/* eslint-disable */
/* GENERATED FILE. DO NOT MODIFY. */
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  Bool: { input: any; output: any; }
  Date: { input: any; output: any; }
};

/** Manages address book for customer. */
export type AddressBookPage = IContent & IData & {
  __typename: 'AddressBookPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Manages address book for customer. */
export type AddressBookPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manages address book for customer. */
export type AddressBookPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type AddressBookPageAutocomplete = {
  __typename: 'AddressBookPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type AddressBookPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressBookPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type AddressBookPageFacet = {
  __typename: 'AddressBookPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type AddressBookPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressBookPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressBookPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressBookPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressBookPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressBookPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressBookPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type AddressBookPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type AddressBookPageOutput = {
  __typename: 'AddressBookPageOutput';
  autocomplete: Maybe<AddressBookPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<AddressBookPageFacet>;
  items: Maybe<Array<Maybe<AddressBookPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type AddressBookPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type AddressBookPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<AddressBookPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<AddressBookPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<AddressBookPageWhereInput>>>;
};

export type AddressesElementBlock = IContent & IData & {
  __typename: 'AddressesElementBlock';
  AddressLabel: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApiKey: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  CityLabel: Maybe<Scalars['String']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CountryLabel: Maybe<Scalars['String']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MapHeight: Maybe<Scalars['Int']['output']>;
  MapWidth: Maybe<Scalars['Int']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PostalLabel: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  StateLabel: Maybe<Scalars['String']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  StreetLabel: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type AddressesElementBlockAddressLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockApiKeyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockCityLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockCountryLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockPostalLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockStateLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockStreetLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type AddressesElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type AddressesElementBlockAutocomplete = {
  __typename: 'AddressesElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type AddressesElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AddressesElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type AddressesElementBlockFacet = {
  __typename: 'AddressesElementBlockFacet';
  AddressLabel: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApiKey: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  CityLabel: Maybe<Array<Maybe<StringFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  CountryLabel: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MapHeight: Maybe<Array<Maybe<NumberFacet>>>;
  MapWidth: Maybe<Array<Maybe<NumberFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PostalLabel: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  StateLabel: Maybe<Array<Maybe<StringFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  StreetLabel: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type AddressesElementBlockFacetAddressLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetApiKeyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressesElementBlockFacetCityLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type AddressesElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetCountryLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressesElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetMapHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type AddressesElementBlockFacetMapWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type AddressesElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetPostalLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressesElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressesElementBlockFacetStateLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AddressesElementBlockFacetStreetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AddressesElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type AddressesElementBlockOrderByInput = {
  AddressLabel: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  ApiKey: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  CityLabel: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  CountryLabel: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MapHeight: InputMaybe<OrderBy>;
  MapWidth: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PostalLabel: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  StateLabel: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  StreetLabel: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type AddressesElementBlockOutput = {
  __typename: 'AddressesElementBlockOutput';
  autocomplete: Maybe<AddressesElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<AddressesElementBlockFacet>;
  items: Maybe<Array<Maybe<AddressesElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type AddressesElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type AddressesElementBlockWhereInput = {
  AddressLabel: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  ApiKey: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  CityLabel: InputMaybe<SearchableStringFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  CountryLabel: InputMaybe<SearchableStringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MapHeight: InputMaybe<IntFilterInput>;
  MapWidth: InputMaybe<IntFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PostalLabel: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  StateLabel: InputMaybe<SearchableStringFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  StreetLabel: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<AddressesElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<AddressesElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<AddressesElementBlockWhereInput>>>;
};

/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlock = IContent & IData & {
  __typename: 'AssetsDownloadLinksBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Count: Maybe<Scalars['Int']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  GroupName: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  /** Root content can be a folder or catalog content */
  RootContent: Maybe<ContentModelReference>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlockGroupNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blocks to show links for assets to download */
export type AssetsDownloadLinksBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type AssetsDownloadLinksBlockAutocomplete = {
  __typename: 'AssetsDownloadLinksBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RootContent: Maybe<ContentModelReferenceAutocomplete>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type AssetsDownloadLinksBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssetsDownloadLinksBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type AssetsDownloadLinksBlockFacet = {
  __typename: 'AssetsDownloadLinksBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Count: Maybe<Array<Maybe<NumberFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  GroupName: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RootContent: Maybe<ContentModelReferenceFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type AssetsDownloadLinksBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type AssetsDownloadLinksBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssetsDownloadLinksBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetCountArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type AssetsDownloadLinksBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssetsDownloadLinksBlockFacetGroupNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssetsDownloadLinksBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssetsDownloadLinksBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssetsDownloadLinksBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssetsDownloadLinksBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type AssetsDownloadLinksBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Count: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  GroupName: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RootContent: InputMaybe<ContentModelReferenceOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type AssetsDownloadLinksBlockOutput = {
  __typename: 'AssetsDownloadLinksBlockOutput';
  autocomplete: Maybe<AssetsDownloadLinksBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<AssetsDownloadLinksBlockFacet>;
  items: Maybe<Array<Maybe<AssetsDownloadLinksBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type AssetsDownloadLinksBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type AssetsDownloadLinksBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Count: InputMaybe<IntFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  GroupName: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RootContent: InputMaybe<ContentModelReferenceWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<AssetsDownloadLinksBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<AssetsDownloadLinksBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<AssetsDownloadLinksBlockWhereInput>>>;
};

export type Associations = IContent & IData & {
  __typename: 'Associations';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type AssociationsNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Associations_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Associations_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type AssociationsAutocomplete = {
  __typename: 'AssociationsAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type AssociationsAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type AssociationsAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type AssociationsFacet = {
  __typename: 'AssociationsFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type AssociationsFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssociationsFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssociationsFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssociationsFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssociationsFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type AssociationsFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type AssociationsFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type AssociationsOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type AssociationsOutput = {
  __typename: 'AssociationsOutput';
  autocomplete: Maybe<AssociationsAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<AssociationsFacet>;
  items: Maybe<Array<Maybe<Associations>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type AssociationsOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type AssociationsWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<AssociationsWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<AssociationsWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<AssociationsWhereInput>>>;
};

export type BlobModel = {
  __typename: 'BlobModel';
  Id: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
};

export type BlobModelAutocomplete = {
  __typename: 'BlobModelAutocomplete';
  Id: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BlobModelAutocompleteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlobModelAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BlobModelFacet = {
  __typename: 'BlobModelFacet';
  Id: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BlobModelFacetIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlobModelFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BlobModelOrderByInput = {
  Id: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
};

export type BlobModelWhereInput = {
  Id: InputMaybe<StringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
};

/** Configures the frontend view properties of a blog comment block */
export type BlogCommentBlock = IContent & IData & {
  __typename: 'BlogCommentBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  /** Number of comments per page */
  CommentsPerPage: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  PaddingBottom: Maybe<Scalars['Int']['output']>;
  PaddingLeft: Maybe<Scalars['Int']['output']>;
  PaddingRight: Maybe<Scalars['Int']['output']>;
  PaddingTop: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the frontend view properties of a blog comment block */
export type BlogCommentBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a blog comment block */
export type BlogCommentBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a blog comment block */
export type BlogCommentBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BlogCommentBlockAutocomplete = {
  __typename: 'BlogCommentBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BlogCommentBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogCommentBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BlogCommentBlockFacet = {
  __typename: 'BlogCommentBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  CommentsPerPage: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PaddingBottom: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingLeft: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingRight: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingTop: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BlogCommentBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogCommentBlockFacetCommentsPerPageArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BlogCommentBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogCommentBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetPaddingBottomArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BlogCommentBlockFacetPaddingLeftArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BlogCommentBlockFacetPaddingRightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BlogCommentBlockFacetPaddingTopArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BlogCommentBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogCommentBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogCommentBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogCommentBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogCommentBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BlogCommentBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  CommentsPerPage: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  PaddingBottom: InputMaybe<OrderBy>;
  PaddingLeft: InputMaybe<OrderBy>;
  PaddingRight: InputMaybe<OrderBy>;
  PaddingTop: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BlogCommentBlockOutput = {
  __typename: 'BlogCommentBlockOutput';
  autocomplete: Maybe<BlogCommentBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BlogCommentBlockFacet>;
  items: Maybe<Array<Maybe<BlogCommentBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BlogCommentBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogCommentBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  CommentsPerPage: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PaddingBottom: InputMaybe<IntFilterInput>;
  PaddingLeft: InputMaybe<IntFilterInput>;
  PaddingRight: InputMaybe<IntFilterInput>;
  PaddingTop: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BlogCommentBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BlogCommentBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BlogCommentBlockWhereInput>>>;
};

/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPage = IContent & IData & {
  __typename: 'BlogItemPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  Author: Maybe<Scalars['String']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageAuthorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog Item Page created underneath the start page and moved to the right area */
export type BlogItemPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BlogItemPageAutocomplete = {
  __typename: 'BlogItemPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BlogItemPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogItemPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BlogItemPageFacet = {
  __typename: 'BlogItemPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  Author: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BlogItemPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetAuthorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogItemPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogItemPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogItemPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogItemPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogItemPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogItemPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BlogItemPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  Author: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BlogItemPageOutput = {
  __typename: 'BlogItemPageOutput';
  autocomplete: Maybe<BlogItemPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BlogItemPageFacet>;
  items: Maybe<Array<Maybe<BlogItemPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BlogItemPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogItemPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  Author: InputMaybe<SearchableStringFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BlogItemPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BlogItemPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BlogItemPageWhereInput>>>;
};

/** Blog List Page for dates such as year and month */
export type BlogListPage = IContent & IData & {
  __typename: 'BlogListPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  /** Categories to filter the list on */
  CategoryListFilter: Maybe<Array<Maybe<ContentModelReference>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  IncludeAllLevels: Maybe<Scalars['Bool']['output']>;
  IncludePublishDate: Maybe<Scalars['Bool']['output']>;
  IncludeTeaserText: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  /** Apply for Card template */
  OverlayColor: Maybe<Scalars['String']['output']>;
  /** Apply for Card template */
  OverlayTextColor: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  PreviewOption: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  Root: Maybe<ContentModelReference>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  SortOrder: Maybe<Scalars['Int']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Template: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageOverlayColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageOverlayTextColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPagePreviewOptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPageTemplateArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Blog List Page for dates such as year and month */
export type BlogListPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BlogListPageAutocomplete = {
  __typename: 'BlogListPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  CategoryListFilter: Maybe<ContentModelReferenceAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Root: Maybe<ContentModelReferenceAutocomplete>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BlogListPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BlogListPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BlogListPageFacet = {
  __typename: 'BlogListPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  CategoryListFilter: Maybe<ContentModelReferenceFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  IncludeAllLevels: Maybe<Array<Maybe<StringFacet>>>;
  IncludePublishDate: Maybe<Array<Maybe<StringFacet>>>;
  IncludeTeaserText: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  OverlayColor: Maybe<Array<Maybe<StringFacet>>>;
  OverlayTextColor: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PreviewOption: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  Root: Maybe<ContentModelReferenceFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  SortOrder: Maybe<Array<Maybe<NumberFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Template: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BlogListPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogListPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogListPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetIncludeAllLevelsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetIncludePublishDateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetIncludeTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetOverlayColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetOverlayTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetPreviewOptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogListPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetSortOrderArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BlogListPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogListPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BlogListPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetTemplateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BlogListPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BlogListPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  CategoryListFilter: InputMaybe<ContentModelReferenceOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  IncludeAllLevels: InputMaybe<OrderBy>;
  IncludePublishDate: InputMaybe<OrderBy>;
  IncludeTeaserText: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  OverlayColor: InputMaybe<OrderBy>;
  OverlayTextColor: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PreviewOption: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  Root: InputMaybe<ContentModelReferenceOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  SortOrder: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Template: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BlogListPageOutput = {
  __typename: 'BlogListPageOutput';
  autocomplete: Maybe<BlogListPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BlogListPageFacet>;
  items: Maybe<Array<Maybe<BlogListPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BlogListPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogListPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  CategoryListFilter: InputMaybe<ContentModelReferenceWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  IncludeAllLevels: InputMaybe<BoolFilterInput>;
  IncludePublishDate: InputMaybe<BoolFilterInput>;
  IncludeTeaserText: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  OverlayColor: InputMaybe<SearchableStringFilterInput>;
  OverlayTextColor: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PreviewOption: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  Root: InputMaybe<ContentModelReferenceWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  SortOrder: InputMaybe<IntFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Template: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BlogListPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BlogListPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BlogListPageWhereInput>>>;
};

/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPage = IContent & IData & {
  __typename: 'BookmarksPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays list the different content that has been bookmarked belonging to an user */
export type BookmarksPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BookmarksPageAutocomplete = {
  __typename: 'BookmarksPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BookmarksPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BookmarksPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BookmarksPageFacet = {
  __typename: 'BookmarksPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BookmarksPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BookmarksPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BookmarksPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BookmarksPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BookmarksPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BookmarksPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BookmarksPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BookmarksPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BookmarksPageOutput = {
  __typename: 'BookmarksPageOutput';
  autocomplete: Maybe<BookmarksPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BookmarksPageFacet>;
  items: Maybe<Array<Maybe<BookmarksPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BookmarksPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BookmarksPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BookmarksPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BookmarksPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BookmarksPageWhereInput>>>;
};

export type BoolFilterInput = {
  /** `boost` influences the weight of a field by boosting a match with a number (default: 1) — counts more towards the eventual relevance score which can be projected with `_score` — at query time. Note that `boost` cannot be a negative number. */
  boost: InputMaybe<Scalars['Int']['input']>;
  /** `eq` matches on an exact value, but the value is case-insensitive. */
  eq: InputMaybe<Scalars['Boolean']['input']>;
  /** `exist` matches results that have this field. */
  exist: InputMaybe<Scalars['Boolean']['input']>;
  /** `not_eq` retrieves results not matching with an exact (but case-insensitive) value. */
  notEq: InputMaybe<Scalars['Boolean']['input']>;
};

/** Adds bootstrap card block to the page */
export type BootstrapCardBlock = IContent & IData & {
  __typename: 'BootstrapCardBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  CardAlignment: Maybe<Scalars['String']['output']>;
  /** Link for card button */
  CardButtonLink: Maybe<Scalars['String']['output']>;
  /** Text to show for card button -- button hidden if blank */
  CardButtonText: Maybe<Scalars['String']['output']>;
  /** Click anywhere on card to browse to URL defined in button (instead of only clicking the button)? */
  CardClickable: Maybe<Scalars['Bool']['output']>;
  CardContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  CardFooter: Maybe<Scalars['String']['output']>;
  CardHeader: Maybe<Scalars['String']['output']>;
  CardImage: Maybe<ContentModelReference>;
  /** Links to show on card (0-3 links supported) */
  CardLinks: Maybe<Array<Maybe<LinkItemNode>>>;
  CardSubtitle: Maybe<Scalars['String']['output']>;
  CardTitle: Maybe<Scalars['String']['output']>;
  CardTitleSize: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  /** Custom CSS class for card (to help with custom styles) */
  CssClass: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardAlignmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardFooterArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardHeaderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardSubtitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCardTitleSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockCssClassArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds bootstrap card block to the page */
export type BootstrapCardBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BootstrapCardBlockAutocomplete = {
  __typename: 'BootstrapCardBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CardButtonLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CardImage: Maybe<ContentModelReferenceAutocomplete>;
  CardLinks: Maybe<LinkItemNodeAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BootstrapCardBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteCardButtonLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BootstrapCardBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BootstrapCardBlockFacet = {
  __typename: 'BootstrapCardBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  CardAlignment: Maybe<Array<Maybe<StringFacet>>>;
  CardButtonLink: Maybe<Array<Maybe<StringFacet>>>;
  CardButtonText: Maybe<Array<Maybe<StringFacet>>>;
  CardClickable: Maybe<Array<Maybe<StringFacet>>>;
  CardContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  CardFooter: Maybe<Array<Maybe<StringFacet>>>;
  CardHeader: Maybe<Array<Maybe<StringFacet>>>;
  CardImage: Maybe<ContentModelReferenceFacet>;
  CardLinks: Maybe<LinkItemNodeFacet>;
  CardSubtitle: Maybe<Array<Maybe<StringFacet>>>;
  CardTitle: Maybe<Array<Maybe<StringFacet>>>;
  CardTitleSize: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  CssClass: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BootstrapCardBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BootstrapCardBlockFacetCardAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardButtonLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardClickableArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardSubtitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCardTitleSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BootstrapCardBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BootstrapCardBlockFacetCssClassArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BootstrapCardBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BootstrapCardBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BootstrapCardBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BootstrapCardBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BootstrapCardBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  CardAlignment: InputMaybe<OrderBy>;
  CardButtonLink: InputMaybe<OrderBy>;
  CardButtonText: InputMaybe<OrderBy>;
  CardClickable: InputMaybe<OrderBy>;
  CardContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  CardFooter: InputMaybe<OrderBy>;
  CardHeader: InputMaybe<OrderBy>;
  CardImage: InputMaybe<ContentModelReferenceOrderByInput>;
  CardLinks: InputMaybe<LinkItemNodeOrderByInput>;
  CardSubtitle: InputMaybe<OrderBy>;
  CardTitle: InputMaybe<OrderBy>;
  CardTitleSize: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  CssClass: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BootstrapCardBlockOutput = {
  __typename: 'BootstrapCardBlockOutput';
  autocomplete: Maybe<BootstrapCardBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BootstrapCardBlockFacet>;
  items: Maybe<Array<Maybe<BootstrapCardBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BootstrapCardBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BootstrapCardBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  CardAlignment: InputMaybe<SearchableStringFilterInput>;
  CardButtonLink: InputMaybe<StringFilterInput>;
  CardButtonText: InputMaybe<SearchableStringFilterInput>;
  CardClickable: InputMaybe<BoolFilterInput>;
  CardContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  CardFooter: InputMaybe<SearchableStringFilterInput>;
  CardHeader: InputMaybe<SearchableStringFilterInput>;
  CardImage: InputMaybe<ContentModelReferenceWhereInput>;
  CardLinks: InputMaybe<LinkItemNodeWhereInput>;
  CardSubtitle: InputMaybe<SearchableStringFilterInput>;
  CardTitle: InputMaybe<SearchableStringFilterInput>;
  CardTitleSize: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  CssClass: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BootstrapCardBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BootstrapCardBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BootstrapCardBlockWhereInput>>>;
};

/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlock = IContent & IData & {
  __typename: 'BreadcrumbBlock';
  Alignment: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DestinationPage: Maybe<ContentModelReference>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Separator: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlockAlignmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlockSeparatorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal navigation structures as a breadcrumb */
export type BreadcrumbBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BreadcrumbBlockAutocomplete = {
  __typename: 'BreadcrumbBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DestinationPage: Maybe<ContentModelReferenceAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BreadcrumbBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BreadcrumbBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BreadcrumbBlockFacet = {
  __typename: 'BreadcrumbBlockFacet';
  Alignment: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DestinationPage: Maybe<ContentModelReferenceFacet>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Separator: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BreadcrumbBlockFacetAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BreadcrumbBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BreadcrumbBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BreadcrumbBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BreadcrumbBlockFacetSeparatorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BreadcrumbBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BreadcrumbBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BreadcrumbBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BreadcrumbBlockOrderByInput = {
  Alignment: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DestinationPage: InputMaybe<ContentModelReferenceOrderByInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Separator: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BreadcrumbBlockOutput = {
  __typename: 'BreadcrumbBlockOutput';
  autocomplete: Maybe<BreadcrumbBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BreadcrumbBlockFacet>;
  items: Maybe<Array<Maybe<BreadcrumbBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BreadcrumbBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BreadcrumbBlockWhereInput = {
  Alignment: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DestinationPage: InputMaybe<ContentModelReferenceWhereInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Separator: InputMaybe<SearchableStringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BreadcrumbBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BreadcrumbBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BreadcrumbBlockWhereInput>>>;
};

/** Manage budgets for organization. */
export type BudgetingPage = IContent & IData & {
  __typename: 'BudgetingPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Manage budgets for organization. */
export type BudgetingPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage budgets for organization. */
export type BudgetingPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BudgetingPageAutocomplete = {
  __typename: 'BudgetingPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BudgetingPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BudgetingPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BudgetingPageFacet = {
  __typename: 'BudgetingPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BudgetingPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BudgetingPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BudgetingPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BudgetingPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BudgetingPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BudgetingPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BudgetingPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BudgetingPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BudgetingPageOutput = {
  __typename: 'BudgetingPageOutput';
  autocomplete: Maybe<BudgetingPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BudgetingPageFacet>;
  items: Maybe<Array<Maybe<BudgetingPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BudgetingPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BudgetingPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BudgetingPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BudgetingPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BudgetingPageWhereInput>>>;
};

export type BundleContent = IContent & IData & {
  __typename: 'BundleContent';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<BundleContentAssociations>;
  BundleReference: Maybe<ContentModelReference>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<BundleContentCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentEntries: Maybe<BundleContentRelations>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SeoInformation: Maybe<BundleContentSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type BundleContentCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type BundleContentDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type BundleContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type BundleContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type BundleContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type BundleContentAssociations = {
  __typename: 'BundleContentAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type BundleContentAssociationsAutocomplete = {
  __typename: 'BundleContentAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type BundleContentAssociationsFacet = {
  __typename: 'BundleContentAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type BundleContentAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type BundleContentAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type BundleContentAutocomplete = {
  __typename: 'BundleContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<BundleContentAssociationsAutocomplete>;
  BundleReference: Maybe<ContentModelReferenceAutocomplete>;
  Categories: Maybe<BundleContentCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<BundleContentRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SeoInformation: Maybe<BundleContentSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BundleContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BundleContentCategories = {
  __typename: 'BundleContentCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type BundleContentCategoriesAutocomplete = {
  __typename: 'BundleContentCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type BundleContentCategoriesFacet = {
  __typename: 'BundleContentCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type BundleContentCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type BundleContentCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type BundleContentFacet = {
  __typename: 'BundleContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<BundleContentAssociationsFacet>;
  BundleReference: Maybe<ContentModelReferenceFacet>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<BundleContentCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<BundleContentRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SeoInformation: Maybe<BundleContentSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type BundleContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BundleContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BundleContentFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BundleContentFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type BundleContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BundleContentFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BundleContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type BundleContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BundleContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<BundleContentAssociationsOrderByInput>;
  BundleReference: InputMaybe<ContentModelReferenceOrderByInput>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<BundleContentCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<BundleContentRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<BundleContentSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type BundleContentOutput = {
  __typename: 'BundleContentOutput';
  autocomplete: Maybe<BundleContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<BundleContentFacet>;
  items: Maybe<Array<Maybe<BundleContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type BundleContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type BundleContentRelations = {
  __typename: 'BundleContentRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type BundleContentRelationsAutocomplete = {
  __typename: 'BundleContentRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type BundleContentRelationsFacet = {
  __typename: 'BundleContentRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type BundleContentRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type BundleContentRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type BundleContentSeoInformation = {
  __typename: 'BundleContentSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type BundleContentSeoInformationAutocomplete = {
  __typename: 'BundleContentSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type BundleContentSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type BundleContentSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type BundleContentSeoInformationFacet = {
  __typename: 'BundleContentSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type BundleContentSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type BundleContentSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type BundleContentSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type BundleContentSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type BundleContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<BundleContentAssociationsWhereInput>;
  BundleReference: InputMaybe<ContentModelReferenceWhereInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<BundleContentCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentEntries: InputMaybe<BundleContentRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SeoInformation: InputMaybe<BundleContentSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<BundleContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<BundleContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<BundleContentWhereInput>>>;
};

/** Used to insert a link which is styled as a button */
export type ButtonBlock = IContent & IData & {
  __typename: 'ButtonBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to overdride background color */
  BackgroundColorOverdrive: Maybe<Scalars['Bool']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  BorderRadius: Maybe<Scalars['Int']['output']>;
  /** This will determine whether or not to show border */
  BorderStyle: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to overdride border style */
  BorderStyleOverdrive: Maybe<Scalars['Bool']['output']>;
  BorderWidth: Maybe<Scalars['Int']['output']>;
  ButtonBackgroundColor: Maybe<Scalars['String']['output']>;
  ButtonBackgroundHoverColor: Maybe<Scalars['String']['output']>;
  ButtonBorderColor: Maybe<Scalars['String']['output']>;
  ButtonBorderHoverColor: Maybe<Scalars['String']['output']>;
  ButtonCaption: Maybe<Scalars['String']['output']>;
  ButtonLink: Maybe<Scalars['String']['output']>;
  ButtonStyle: Maybe<Scalars['String']['output']>;
  ButtonText: Maybe<Scalars['String']['output']>;
  ButtonTextColor: Maybe<Scalars['String']['output']>;
  ButtonTextHoverColor: Maybe<Scalars['String']['output']>;
  ButtonTextUppercase: Maybe<Scalars['Bool']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FontSize: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to use transparent background */
  ShowTransparentBackground: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  /** This will determine whether or not to overdride text color */
  TextColorOverdrive: Maybe<Scalars['Bool']['output']>;
  TextPadding: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockBorderStyleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockButtonCaptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockButtonStyleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlockTextPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a link which is styled as a button */
export type ButtonBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ButtonBlockAutocomplete = {
  __typename: 'ButtonBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBackgroundHoverColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBorderColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBorderHoverColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonTextColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonTextHoverColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ButtonBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonBackgroundHoverColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonBorderColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonBorderHoverColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonTextColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteButtonTextHoverColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ButtonBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ButtonBlockFacet = {
  __typename: 'ButtonBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColorOverdrive: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  BorderRadius: Maybe<Array<Maybe<NumberFacet>>>;
  BorderStyle: Maybe<Array<Maybe<StringFacet>>>;
  BorderStyleOverdrive: Maybe<Array<Maybe<StringFacet>>>;
  BorderWidth: Maybe<Array<Maybe<NumberFacet>>>;
  ButtonBackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonBackgroundHoverColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonBorderColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonBorderHoverColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonCaption: Maybe<Array<Maybe<StringFacet>>>;
  ButtonLink: Maybe<Array<Maybe<StringFacet>>>;
  ButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  ButtonText: Maybe<Array<Maybe<StringFacet>>>;
  ButtonTextColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonTextHoverColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonTextUppercase: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FontSize: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowTransparentBackground: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TextColorOverdrive: Maybe<Array<Maybe<StringFacet>>>;
  TextPadding: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ButtonBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetBackgroundColorOverdriveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ButtonBlockFacetBorderRadiusArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ButtonBlockFacetBorderStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetBorderStyleOverdriveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetBorderWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ButtonBlockFacetButtonBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonBackgroundHoverColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonBorderColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonBorderHoverColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonCaptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonTextHoverColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetButtonTextUppercaseArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ButtonBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ButtonBlockFacetFontSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ButtonBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ButtonBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetShowTransparentBackgroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ButtonBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ButtonBlockFacetTextColorOverdriveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetTextPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ButtonBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ButtonBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundColorOverdrive: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  BorderRadius: InputMaybe<OrderBy>;
  BorderStyle: InputMaybe<OrderBy>;
  BorderStyleOverdrive: InputMaybe<OrderBy>;
  BorderWidth: InputMaybe<OrderBy>;
  ButtonBackgroundColor: InputMaybe<OrderBy>;
  ButtonBackgroundHoverColor: InputMaybe<OrderBy>;
  ButtonBorderColor: InputMaybe<OrderBy>;
  ButtonBorderHoverColor: InputMaybe<OrderBy>;
  ButtonCaption: InputMaybe<OrderBy>;
  ButtonLink: InputMaybe<OrderBy>;
  ButtonStyle: InputMaybe<OrderBy>;
  ButtonText: InputMaybe<OrderBy>;
  ButtonTextColor: InputMaybe<OrderBy>;
  ButtonTextHoverColor: InputMaybe<OrderBy>;
  ButtonTextUppercase: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FontSize: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowTransparentBackground: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TextColorOverdrive: InputMaybe<OrderBy>;
  TextPadding: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ButtonBlockOutput = {
  __typename: 'ButtonBlockOutput';
  autocomplete: Maybe<ButtonBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ButtonBlockFacet>;
  items: Maybe<Array<Maybe<ButtonBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ButtonBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ButtonBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BackgroundColorOverdrive: InputMaybe<BoolFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  BorderRadius: InputMaybe<IntFilterInput>;
  BorderStyle: InputMaybe<SearchableStringFilterInput>;
  BorderStyleOverdrive: InputMaybe<BoolFilterInput>;
  BorderWidth: InputMaybe<IntFilterInput>;
  ButtonBackgroundColor: InputMaybe<StringFilterInput>;
  ButtonBackgroundHoverColor: InputMaybe<StringFilterInput>;
  ButtonBorderColor: InputMaybe<StringFilterInput>;
  ButtonBorderHoverColor: InputMaybe<StringFilterInput>;
  ButtonCaption: InputMaybe<SearchableStringFilterInput>;
  ButtonLink: InputMaybe<StringFilterInput>;
  ButtonStyle: InputMaybe<SearchableStringFilterInput>;
  ButtonText: InputMaybe<SearchableStringFilterInput>;
  ButtonTextColor: InputMaybe<StringFilterInput>;
  ButtonTextHoverColor: InputMaybe<StringFilterInput>;
  ButtonTextUppercase: InputMaybe<BoolFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FontSize: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowTransparentBackground: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TextColorOverdrive: InputMaybe<BoolFilterInput>;
  TextPadding: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ButtonBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ButtonBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ButtonBlockWhereInput>>>;
};

/** A block that lists a bunch of calendar events */
export type CalendarBlock = IContent & IData & {
  __typename: 'CalendarBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  CategoryFilter: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Count: Maybe<Scalars['Int']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  EventsRoot: Maybe<ContentModelReference>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  Recursive: Maybe<Scalars['Bool']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  ViewMode: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlockViewModeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of calendar events */
export type CalendarBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CalendarBlockAutocomplete = {
  __typename: 'CalendarBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  CategoryFilter: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  EventsRoot: Maybe<ContentModelReferenceAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CalendarBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CalendarBlockFacet = {
  __typename: 'CalendarBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  CategoryFilter: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Count: Maybe<Array<Maybe<NumberFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  EventsRoot: Maybe<ContentModelReferenceFacet>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Recursive: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  ViewMode: Maybe<Array<Maybe<StringFacet>>>;
};


export type CalendarBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CalendarBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetCountArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CalendarBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetRecursiveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarBlockFacetViewModeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CalendarBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  CategoryFilter: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Count: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  EventsRoot: InputMaybe<ContentModelReferenceOrderByInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Recursive: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  ViewMode: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CalendarBlockOutput = {
  __typename: 'CalendarBlockOutput';
  autocomplete: Maybe<CalendarBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CalendarBlockFacet>;
  items: Maybe<Array<Maybe<CalendarBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CalendarBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CalendarBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  CategoryFilter: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Count: InputMaybe<IntFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  EventsRoot: InputMaybe<ContentModelReferenceWhereInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Recursive: InputMaybe<BoolFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  ViewMode: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CalendarBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CalendarBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CalendarBlockWhereInput>>>;
};

/** Used to define an Event */
export type CalendarEventPage = IContent & IData & {
  __typename: 'CalendarEventPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  EventEndDate: Maybe<Scalars['Date']['output']>;
  EventStartDate: Maybe<Scalars['Date']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Location: Maybe<Scalars['String']['output']>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to define an Event */
export type CalendarEventPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageLocationArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define an Event */
export type CalendarEventPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CalendarEventPageAutocomplete = {
  __typename: 'CalendarEventPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CalendarEventPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CalendarEventPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CalendarEventPageFacet = {
  __typename: 'CalendarEventPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  EventEndDate: Maybe<Array<Maybe<DateFacet>>>;
  EventStartDate: Maybe<Array<Maybe<DateFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Location: Maybe<Array<Maybe<StringFacet>>>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CalendarEventPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetEventEndDateArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetEventStartDateArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetLocationArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CalendarEventPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CalendarEventPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CalendarEventPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  EventEndDate: InputMaybe<OrderBy>;
  EventStartDate: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Location: InputMaybe<OrderBy>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CalendarEventPageOutput = {
  __typename: 'CalendarEventPageOutput';
  autocomplete: Maybe<CalendarEventPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CalendarEventPageFacet>;
  items: Maybe<Array<Maybe<CalendarEventPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CalendarEventPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CalendarEventPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  EventEndDate: InputMaybe<DateFilterInput>;
  EventStartDate: InputMaybe<DateFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Location: InputMaybe<SearchableStringFilterInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CalendarEventPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CalendarEventPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CalendarEventPageWhereInput>>>;
};

/** Provides a CTA anchor or link */
export type CallToActionBlock = IContent & IData & {
  __typename: 'CallToActionBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BackgroundImage: Maybe<ContentModelReference>;
  BackgroundImageSetting: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Button: Maybe<CallToActionBlockButtonBlock>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Subtext: Maybe<Scalars['String']['output']>;
  TextColor: Maybe<Scalars['String']['output']>;
  /** Title displayed */
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockBackgroundImageSettingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockSubtextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockTextColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlockTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Provides a CTA anchor or link */
export type CallToActionBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CallToActionBlockAutocomplete = {
  __typename: 'CallToActionBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundImage: Maybe<ContentModelReferenceAutocomplete>;
  Button: Maybe<CallToActionBlockButtonBlockAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CallToActionBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CallToActionBlockButtonBlock = {
  __typename: 'CallToActionBlockButtonBlock';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BackgroundColorOverdrive: Maybe<Scalars['Bool']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  BorderRadius: Maybe<Scalars['Int']['output']>;
  BorderStyle: Maybe<Scalars['String']['output']>;
  BorderStyleOverdrive: Maybe<Scalars['Bool']['output']>;
  BorderWidth: Maybe<Scalars['Int']['output']>;
  ButtonBackgroundColor: Maybe<Scalars['String']['output']>;
  ButtonBackgroundHoverColor: Maybe<Scalars['String']['output']>;
  ButtonBorderColor: Maybe<Scalars['String']['output']>;
  ButtonBorderHoverColor: Maybe<Scalars['String']['output']>;
  ButtonCaption: Maybe<Scalars['String']['output']>;
  ButtonLink: Maybe<Scalars['String']['output']>;
  ButtonStyle: Maybe<Scalars['String']['output']>;
  ButtonText: Maybe<Scalars['String']['output']>;
  ButtonTextColor: Maybe<Scalars['String']['output']>;
  ButtonTextHoverColor: Maybe<Scalars['String']['output']>;
  ButtonTextUppercase: Maybe<Scalars['Bool']['output']>;
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  FontSize: Maybe<Scalars['Int']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ShowTransparentBackground: Maybe<Scalars['Bool']['output']>;
  TextColorOverdrive: Maybe<Scalars['Bool']['output']>;
  TextPadding: Maybe<Scalars['String']['output']>;
};

export type CallToActionBlockButtonBlockAutocomplete = {
  __typename: 'CallToActionBlockButtonBlockAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BorderStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBackgroundHoverColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBorderColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonBorderHoverColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonCaption: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonText: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonTextColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonTextHoverColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TextPadding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CallToActionBlockButtonBlockAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteBorderStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonBackgroundHoverColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonBorderColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonBorderHoverColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonCaptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonTextArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonTextColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteButtonTextHoverColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CallToActionBlockButtonBlockAutocompleteTextPaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CallToActionBlockButtonBlockFacet = {
  __typename: 'CallToActionBlockButtonBlockFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColorOverdrive: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  BorderRadius: Maybe<Array<Maybe<NumberFacet>>>;
  BorderStyle: Maybe<Array<Maybe<StringFacet>>>;
  BorderStyleOverdrive: Maybe<Array<Maybe<StringFacet>>>;
  BorderWidth: Maybe<Array<Maybe<NumberFacet>>>;
  ButtonBackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonBackgroundHoverColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonBorderColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonBorderHoverColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonCaption: Maybe<Array<Maybe<StringFacet>>>;
  ButtonLink: Maybe<Array<Maybe<StringFacet>>>;
  ButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  ButtonText: Maybe<Array<Maybe<StringFacet>>>;
  ButtonTextColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonTextHoverColor: Maybe<Array<Maybe<StringFacet>>>;
  ButtonTextUppercase: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  FontSize: Maybe<Array<Maybe<NumberFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ShowTransparentBackground: Maybe<Array<Maybe<StringFacet>>>;
  TextColorOverdrive: Maybe<Array<Maybe<StringFacet>>>;
  TextPadding: Maybe<Array<Maybe<StringFacet>>>;
};


export type CallToActionBlockButtonBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetBackgroundColorOverdriveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CallToActionBlockButtonBlockFacetBorderRadiusArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CallToActionBlockButtonBlockFacetBorderStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetBorderStyleOverdriveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetBorderWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CallToActionBlockButtonBlockFacetButtonBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonBackgroundHoverColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonBorderColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonBorderHoverColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonCaptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonTextHoverColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetButtonTextUppercaseArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetFontSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CallToActionBlockButtonBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetShowTransparentBackgroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetTextColorOverdriveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockButtonBlockFacetTextPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CallToActionBlockButtonBlockOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundColorOverdrive: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  BorderRadius: InputMaybe<OrderBy>;
  BorderStyle: InputMaybe<OrderBy>;
  BorderStyleOverdrive: InputMaybe<OrderBy>;
  BorderWidth: InputMaybe<OrderBy>;
  ButtonBackgroundColor: InputMaybe<OrderBy>;
  ButtonBackgroundHoverColor: InputMaybe<OrderBy>;
  ButtonBorderColor: InputMaybe<OrderBy>;
  ButtonBorderHoverColor: InputMaybe<OrderBy>;
  ButtonCaption: InputMaybe<OrderBy>;
  ButtonLink: InputMaybe<OrderBy>;
  ButtonStyle: InputMaybe<OrderBy>;
  ButtonText: InputMaybe<OrderBy>;
  ButtonTextColor: InputMaybe<OrderBy>;
  ButtonTextHoverColor: InputMaybe<OrderBy>;
  ButtonTextUppercase: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  FontSize: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ShowTransparentBackground: InputMaybe<OrderBy>;
  TextColorOverdrive: InputMaybe<OrderBy>;
  TextPadding: InputMaybe<OrderBy>;
};

export type CallToActionBlockButtonBlockWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  BackgroundColorOverdrive: InputMaybe<BoolFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  BorderRadius: InputMaybe<IntFilterInput>;
  BorderStyle: InputMaybe<StringFilterInput>;
  BorderStyleOverdrive: InputMaybe<BoolFilterInput>;
  BorderWidth: InputMaybe<IntFilterInput>;
  ButtonBackgroundColor: InputMaybe<StringFilterInput>;
  ButtonBackgroundHoverColor: InputMaybe<StringFilterInput>;
  ButtonBorderColor: InputMaybe<StringFilterInput>;
  ButtonBorderHoverColor: InputMaybe<StringFilterInput>;
  ButtonCaption: InputMaybe<StringFilterInput>;
  ButtonLink: InputMaybe<StringFilterInput>;
  ButtonStyle: InputMaybe<StringFilterInput>;
  ButtonText: InputMaybe<StringFilterInput>;
  ButtonTextColor: InputMaybe<StringFilterInput>;
  ButtonTextHoverColor: InputMaybe<StringFilterInput>;
  ButtonTextUppercase: InputMaybe<BoolFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  FontSize: InputMaybe<IntFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  ShowTransparentBackground: InputMaybe<BoolFilterInput>;
  TextColorOverdrive: InputMaybe<BoolFilterInput>;
  TextPadding: InputMaybe<StringFilterInput>;
};

export type CallToActionBlockFacet = {
  __typename: 'CallToActionBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundImage: Maybe<ContentModelReferenceFacet>;
  BackgroundImageSetting: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Button: Maybe<CallToActionBlockButtonBlockFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Subtext: Maybe<Array<Maybe<StringFacet>>>;
  TextColor: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CallToActionBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetBackgroundImageSettingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CallToActionBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CallToActionBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CallToActionBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CallToActionBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CallToActionBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CallToActionBlockFacetSubtextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CallToActionBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CallToActionBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundImage: InputMaybe<ContentModelReferenceOrderByInput>;
  BackgroundImageSetting: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Button: InputMaybe<CallToActionBlockButtonBlockOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Subtext: InputMaybe<OrderBy>;
  TextColor: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CallToActionBlockOutput = {
  __typename: 'CallToActionBlockOutput';
  autocomplete: Maybe<CallToActionBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CallToActionBlockFacet>;
  items: Maybe<Array<Maybe<CallToActionBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CallToActionBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CallToActionBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BackgroundImage: InputMaybe<ContentModelReferenceWhereInput>;
  BackgroundImageSetting: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Button: InputMaybe<CallToActionBlockButtonBlockWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Subtext: InputMaybe<SearchableStringFilterInput>;
  TextColor: InputMaybe<SearchableStringFilterInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CallToActionBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CallToActionBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CallToActionBlockWhereInput>>>;
};

export type CaptchaElementBlock = IContent & IData & {
  __typename: 'CaptchaElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  ImageHeight: Maybe<Scalars['Int']['output']>;
  ImageWidth: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TextLength: Maybe<Scalars['Int']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type CaptchaElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CaptchaElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CaptchaElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CaptchaElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CaptchaElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CaptchaElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CaptchaElementBlockAutocomplete = {
  __typename: 'CaptchaElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CaptchaElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CaptchaElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CaptchaElementBlockFacet = {
  __typename: 'CaptchaElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  ImageHeight: Maybe<Array<Maybe<NumberFacet>>>;
  ImageWidth: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TextLength: Maybe<Array<Maybe<NumberFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type CaptchaElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CaptchaElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CaptchaElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetImageHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CaptchaElementBlockFacetImageWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CaptchaElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CaptchaElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CaptchaElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CaptchaElementBlockFacetTextLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CaptchaElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CaptchaElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CaptchaElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  ImageHeight: InputMaybe<OrderBy>;
  ImageWidth: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TextLength: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CaptchaElementBlockOutput = {
  __typename: 'CaptchaElementBlockOutput';
  autocomplete: Maybe<CaptchaElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CaptchaElementBlockFacet>;
  items: Maybe<Array<Maybe<CaptchaElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CaptchaElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CaptchaElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  ImageHeight: InputMaybe<IntFilterInput>;
  ImageWidth: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TextLength: InputMaybe<IntFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CaptchaElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CaptchaElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CaptchaElementBlockWhereInput>>>;
};

/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlock = IContent & IData & {
  __typename: 'CarouselBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Carousel Controls */
  CarouselControls: Maybe<CarouselBlockCarouselControls>;
  /** List of carousel items */
  CarouselItems: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlockCarouselItemsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows users to create a slider using a collection of Images or Hero blocks */
export type CarouselBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CarouselBlockAutocomplete = {
  __typename: 'CarouselBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CarouselControls: Maybe<CarouselBlockCarouselControlsAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CarouselBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CarouselBlockCarouselControls = {
  __typename: 'CarouselBlockCarouselControls';
  AutoPlay: Maybe<Scalars['Bool']['output']>;
  Fade: Maybe<Scalars['Bool']['output']>;
  Interval: Maybe<Scalars['Int']['output']>;
  ShowControls: Maybe<Scalars['Bool']['output']>;
  ShowIndicators: Maybe<Scalars['Bool']['output']>;
  Theme: Maybe<Scalars['String']['output']>;
};

export type CarouselBlockCarouselControlsAutocomplete = {
  __typename: 'CarouselBlockCarouselControlsAutocomplete';
  Theme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CarouselBlockCarouselControlsAutocompleteThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CarouselBlockCarouselControlsFacet = {
  __typename: 'CarouselBlockCarouselControlsFacet';
  AutoPlay: Maybe<Array<Maybe<StringFacet>>>;
  Fade: Maybe<Array<Maybe<StringFacet>>>;
  Interval: Maybe<Array<Maybe<NumberFacet>>>;
  ShowControls: Maybe<Array<Maybe<StringFacet>>>;
  ShowIndicators: Maybe<Array<Maybe<StringFacet>>>;
  Theme: Maybe<Array<Maybe<StringFacet>>>;
};


export type CarouselBlockCarouselControlsFacetAutoPlayArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockCarouselControlsFacetFadeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockCarouselControlsFacetIntervalArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CarouselBlockCarouselControlsFacetShowControlsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockCarouselControlsFacetShowIndicatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockCarouselControlsFacetThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CarouselBlockCarouselControlsOrderByInput = {
  AutoPlay: InputMaybe<OrderBy>;
  Fade: InputMaybe<OrderBy>;
  Interval: InputMaybe<OrderBy>;
  ShowControls: InputMaybe<OrderBy>;
  ShowIndicators: InputMaybe<OrderBy>;
  Theme: InputMaybe<OrderBy>;
};

export type CarouselBlockCarouselControlsWhereInput = {
  AutoPlay: InputMaybe<BoolFilterInput>;
  Fade: InputMaybe<BoolFilterInput>;
  Interval: InputMaybe<IntFilterInput>;
  ShowControls: InputMaybe<BoolFilterInput>;
  ShowIndicators: InputMaybe<BoolFilterInput>;
  Theme: InputMaybe<StringFilterInput>;
};

export type CarouselBlockFacet = {
  __typename: 'CarouselBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  CarouselControls: Maybe<CarouselBlockCarouselControlsFacet>;
  CarouselItems: Maybe<ContentAreaItemModelSearchFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CarouselBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CarouselBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CarouselBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  CarouselControls: InputMaybe<CarouselBlockCarouselControlsOrderByInput>;
  CarouselItems: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CarouselBlockOutput = {
  __typename: 'CarouselBlockOutput';
  autocomplete: Maybe<CarouselBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CarouselBlockFacet>;
  items: Maybe<Array<Maybe<CarouselBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CarouselBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CarouselBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  CarouselControls: InputMaybe<CarouselBlockCarouselControlsWhereInput>;
  CarouselItems: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CarouselBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CarouselBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CarouselBlockWhereInput>>>;
};

export type CarouselControls = IContent & IData & {
  __typename: 'CarouselControls';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  /** If set the carousel will auto-play */
  AutoPlay: Maybe<Scalars['Bool']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** If set, the carousely transition will fade */
  Fade: Maybe<Scalars['Bool']['output']>;
  /** The amount of time in milliseconds before automatically advancing to the next slide. Defaults to 5 seconds */
  Interval: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** Show carousel controls, left / right arrows so users can manually move between items */
  ShowControls: Maybe<Scalars['Bool']['output']>;
  /** Show carousel indicators, small bars below the carousel items to allow users to jump to any item in the carousel */
  ShowIndicators: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Theme: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type CarouselControlsNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CarouselControlsThemeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CarouselControls_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CarouselControls_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CarouselControlsAutocomplete = {
  __typename: 'CarouselControlsAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CarouselControlsAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CarouselControlsAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CarouselControlsFacet = {
  __typename: 'CarouselControlsFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AutoPlay: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Fade: Maybe<Array<Maybe<StringFacet>>>;
  Interval: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowControls: Maybe<Array<Maybe<StringFacet>>>;
  ShowIndicators: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Theme: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CarouselControlsFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetAutoPlayArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselControlsFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselControlsFacetFadeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetIntervalArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CarouselControlsFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselControlsFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetShowControlsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetShowIndicatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselControlsFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CarouselControlsFacetThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CarouselControlsFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CarouselControlsOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  AutoPlay: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Fade: InputMaybe<OrderBy>;
  Interval: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowControls: InputMaybe<OrderBy>;
  ShowIndicators: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Theme: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CarouselControlsOutput = {
  __typename: 'CarouselControlsOutput';
  autocomplete: Maybe<CarouselControlsAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CarouselControlsFacet>;
  items: Maybe<Array<Maybe<CarouselControls>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CarouselControlsOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CarouselControlsWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  AutoPlay: InputMaybe<BoolFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Fade: InputMaybe<BoolFilterInput>;
  Interval: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowControls: InputMaybe<BoolFilterInput>;
  ShowIndicators: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Theme: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CarouselControlsWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CarouselControlsWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CarouselControlsWhereInput>>>;
};

/** Page for managing cart */
export type CartPage = IContent & IData & {
  __typename: 'CartPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  BottomContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to show recommendations. */
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for managing cart */
export type CartPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageBottomContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for managing cart */
export type CartPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CartPageAutocomplete = {
  __typename: 'CartPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CartPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CartPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CartPageFacet = {
  __typename: 'CartPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  BottomContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CartPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CartPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CartPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CartPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CartPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CartPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CartPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CartPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  BottomContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CartPageOutput = {
  __typename: 'CartPageOutput';
  autocomplete: Maybe<CartPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CartPageFacet>;
  items: Maybe<Array<Maybe<CartPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CartPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CartPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  BottomContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CartPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CartPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CartPageWhereInput>>>;
};

export type CatalogContent = IContent & IData & {
  __typename: 'CatalogContent';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DefaultCurrency: Maybe<Scalars['String']['output']>;
  DefaultLanguage: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  IsPrimary: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LengthBase: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Owner: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  WeightBase: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type CatalogContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CatalogContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CatalogContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CatalogContentAutocomplete = {
  __typename: 'CatalogContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DefaultCurrency: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DefaultLanguage: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  LengthBase: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Owner: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  WeightBase: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CatalogContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteDefaultCurrencyArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteDefaultLanguageArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteLengthBaseArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteOwnerArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CatalogContentAutocompleteWeightBaseArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CatalogContentFacet = {
  __typename: 'CatalogContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DefaultCurrency: Maybe<Array<Maybe<StringFacet>>>;
  DefaultLanguage: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  IsPrimary: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LengthBase: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Owner: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  WeightBase: Maybe<Array<Maybe<StringFacet>>>;
};


export type CatalogContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CatalogContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CatalogContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CatalogContentFacetDefaultCurrencyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetDefaultLanguageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetIsPrimaryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetLengthBaseArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CatalogContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetOwnerArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CatalogContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CatalogContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CatalogContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CatalogContentFacetWeightBaseArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CatalogContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DefaultCurrency: InputMaybe<OrderBy>;
  DefaultLanguage: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  IsPrimary: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LengthBase: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Owner: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  WeightBase: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CatalogContentOutput = {
  __typename: 'CatalogContentOutput';
  autocomplete: Maybe<CatalogContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CatalogContentFacet>;
  items: Maybe<Array<Maybe<CatalogContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CatalogContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CatalogContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DefaultCurrency: InputMaybe<StringFilterInput>;
  DefaultLanguage: InputMaybe<StringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  IsPrimary: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LengthBase: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Owner: InputMaybe<StringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  WeightBase: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CatalogContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CatalogContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CatalogContentWhereInput>>>;
};

export type Categories = IContent & IData & {
  __typename: 'Categories';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type CategoriesNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Categories_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Categories_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CategoriesAutocomplete = {
  __typename: 'CategoriesAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CategoriesAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoriesAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CategoriesFacet = {
  __typename: 'CategoriesFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CategoriesFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoriesFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoriesFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoriesFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoriesFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoriesFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoriesFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CategoriesOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CategoriesOutput = {
  __typename: 'CategoriesOutput';
  autocomplete: Maybe<CategoriesAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CategoriesFacet>;
  items: Maybe<Array<Maybe<Categories>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CategoriesOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CategoriesWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CategoriesWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CategoriesWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CategoriesWhereInput>>>;
};

/** Category block */
export type CategoryBlock = IContent & IData & {
  __typename: 'CategoryBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Catalog: Maybe<ContentModelReference>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Category block */
export type CategoryBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Category block */
export type CategoryBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Category block */
export type CategoryBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Category block */
export type CategoryBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Category block */
export type CategoryBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Category block */
export type CategoryBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Category block */
export type CategoryBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CategoryBlockAutocomplete = {
  __typename: 'CategoryBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Catalog: Maybe<ContentModelReferenceAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CategoryBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CategoryBlockFacet = {
  __typename: 'CategoryBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Catalog: Maybe<ContentModelReferenceFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CategoryBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CategoryBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoryBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoryBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoryBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoryBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CategoryBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CategoryBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Catalog: InputMaybe<ContentModelReferenceOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CategoryBlockOutput = {
  __typename: 'CategoryBlockOutput';
  autocomplete: Maybe<CategoryBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CategoryBlockFacet>;
  items: Maybe<Array<Maybe<CategoryBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CategoryBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CategoryBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Catalog: InputMaybe<ContentModelReferenceWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CategoryBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CategoryBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CategoryBlockWhereInput>>>;
};

export type CategoryModel = {
  __typename: 'CategoryModel';
  Description: Maybe<Scalars['String']['output']>;
  Id: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
};

export type CategoryModelAutocomplete = {
  __typename: 'CategoryModelAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Name: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CategoryModelAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CategoryModelAutocompleteNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CategoryModelFacet = {
  __typename: 'CategoryModelFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Id: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
};


export type CategoryModelFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CategoryModelFacetIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CategoryModelFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CategoryModelOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Id: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
};

export type CategoryModelWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Id: InputMaybe<IntFilterInput>;
  Name: InputMaybe<StringFilterInput>;
};

/** Checkout page */
export type CheckoutPage = IContent & IData & {
  __typename: 'CheckoutPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Checkout page */
export type CheckoutPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Checkout page */
export type CheckoutPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CheckoutPageAutocomplete = {
  __typename: 'CheckoutPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CheckoutPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CheckoutPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CheckoutPageFacet = {
  __typename: 'CheckoutPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CheckoutPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CheckoutPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CheckoutPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CheckoutPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CheckoutPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CheckoutPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CheckoutPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CheckoutPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CheckoutPageOutput = {
  __typename: 'CheckoutPageOutput';
  autocomplete: Maybe<CheckoutPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CheckoutPageFacet>;
  items: Maybe<Array<Maybe<CheckoutPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CheckoutPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CheckoutPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CheckoutPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CheckoutPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CheckoutPageWhereInput>>>;
};

export type ChoiceElementBlock = IContent & IData & {
  __typename: 'ChoiceElementBlock';
  AllowMultiSelect: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Feed: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ChoiceElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlockFeedArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ChoiceElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ChoiceElementBlockAutocomplete = {
  __typename: 'ChoiceElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ChoiceElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ChoiceElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ChoiceElementBlockFacet = {
  __typename: 'ChoiceElementBlockFacet';
  AllowMultiSelect: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Feed: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type ChoiceElementBlockFacetAllowMultiSelectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ChoiceElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ChoiceElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ChoiceElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetFeedArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ChoiceElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ChoiceElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ChoiceElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ChoiceElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ChoiceElementBlockOrderByInput = {
  AllowMultiSelect: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Feed: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ChoiceElementBlockOutput = {
  __typename: 'ChoiceElementBlockOutput';
  autocomplete: Maybe<ChoiceElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ChoiceElementBlockFacet>;
  items: Maybe<Array<Maybe<ChoiceElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ChoiceElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ChoiceElementBlockWhereInput = {
  AllowMultiSelect: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Feed: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ChoiceElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ChoiceElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ChoiceElementBlockWhereInput>>>;
};

/** Used for coding file types such as Css, Javascript. */
export type CodingFile = IContent & IData & {
  __typename: 'CodingFile';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for coding file types such as Css, Javascript. */
export type CodingFileContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for coding file types such as Css, Javascript. */
export type CodingFileDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for coding file types such as Css, Javascript. */
export type CodingFileNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for coding file types such as Css, Javascript. */
export type CodingFile_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for coding file types such as Css, Javascript. */
export type CodingFile_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CodingFileAutocomplete = {
  __typename: 'CodingFileAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CodingFileAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CodingFileAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CodingFileFacet = {
  __typename: 'CodingFileFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CodingFileFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CodingFileFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CodingFileFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CodingFileFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CodingFileFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CodingFileFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CodingFileFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CodingFileOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CodingFileOutput = {
  __typename: 'CodingFileOutput';
  autocomplete: Maybe<CodingFileAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CodingFileFacet>;
  items: Maybe<Array<Maybe<CodingFile>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CodingFileOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CodingFileWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CodingFileWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CodingFileWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CodingFileWhereInput>>>;
};

/** Collection page */
export type CollectionPage = IContent & IData & {
  __typename: 'CollectionPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  CollectionName: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Description: Maybe<Scalars['String']['output']>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Image: Maybe<ContentModelReference>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Navigation: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  Products: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  Video: Maybe<ContentModelReference>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Collection page */
export type CollectionPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageCollectionNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageNavigationArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageProductsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Collection page */
export type CollectionPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CollectionPageAutocomplete = {
  __typename: 'CollectionPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Image: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Video: Maybe<ContentModelReferenceAutocomplete>;
};


export type CollectionPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CollectionPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CollectionPageFacet = {
  __typename: 'CollectionPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  CollectionName: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Image: Maybe<ContentModelReferenceFacet>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Navigation: Maybe<ContentAreaItemModelSearchFacet>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Products: Maybe<ContentAreaItemModelSearchFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Video: Maybe<ContentModelReferenceFacet>;
};


export type CollectionPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CollectionPageFacetCollectionNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CollectionPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CollectionPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CollectionPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CollectionPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CollectionPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CollectionPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  CollectionName: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Description: InputMaybe<OrderBy>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Image: InputMaybe<ContentModelReferenceOrderByInput>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Navigation: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Products: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  Video: InputMaybe<ContentModelReferenceOrderByInput>;
  _ranking: InputMaybe<Ranking>;
};

export type CollectionPageOutput = {
  __typename: 'CollectionPageOutput';
  autocomplete: Maybe<CollectionPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CollectionPageFacet>;
  items: Maybe<Array<Maybe<CollectionPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CollectionPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CollectionPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  CollectionName: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Image: InputMaybe<ContentModelReferenceWhereInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Navigation: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Products: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  Video: InputMaybe<ContentModelReferenceWhereInput>;
  _and: InputMaybe<Array<InputMaybe<CollectionPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CollectionPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CollectionPageWhereInput>>>;
};

/** Configures the frontend view properties of a comment block */
export type CommentsBlock = IContent & IData & {
  __typename: 'CommentsBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  CommentBoxRows: Maybe<Scalars['Int']['output']>;
  CommentMaxLength: Maybe<Scalars['Int']['output']>;
  CommentsDisplayMax: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SendActivity: Maybe<Scalars['Bool']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a comment block */
export type CommentsBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CommentsBlockAutocomplete = {
  __typename: 'CommentsBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommentsBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommentsBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommentsBlockFacet = {
  __typename: 'CommentsBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  CommentBoxRows: Maybe<Array<Maybe<NumberFacet>>>;
  CommentMaxLength: Maybe<Array<Maybe<NumberFacet>>>;
  CommentsDisplayMax: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SendActivity: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommentsBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommentsBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommentsBlockFacetCommentBoxRowsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommentsBlockFacetCommentMaxLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommentsBlockFacetCommentsDisplayMaxArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommentsBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommentsBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommentsBlockFacetSendActivityArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommentsBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommentsBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommentsBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommentsBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  CommentBoxRows: InputMaybe<OrderBy>;
  CommentMaxLength: InputMaybe<OrderBy>;
  CommentsDisplayMax: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SendActivity: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CommentsBlockOutput = {
  __typename: 'CommentsBlockOutput';
  autocomplete: Maybe<CommentsBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CommentsBlockFacet>;
  items: Maybe<Array<Maybe<CommentsBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CommentsBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CommentsBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  CommentBoxRows: InputMaybe<IntFilterInput>;
  CommentMaxLength: InputMaybe<IntFilterInput>;
  CommentsDisplayMax: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SendActivity: InputMaybe<BoolFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CommentsBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CommentsBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CommentsBlockWhereInput>>>;
};

/** A reseller's community page using Episerver Social. */
export type CommunityPage = IContent & IData & {
  __typename: 'CommunityPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  /** The comment section of the page. Local comment block will display comments only for this page */
  Comments: Maybe<CommunityPageCommentsBlock>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** The group admission section of the page. Local group creation block will allow a logged in user to submit a request for membrship admission for the group that corresponds to this page */
  GroupAdmission: Maybe<CommunityPageGroupAdmissionBlock>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  /** The membership display section of the page. Local membership display block will display existing membership for the group that corresponds to this page */
  Memberships: Maybe<CommunityPageMembershipDisplayBlock>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  /** The comment section of the page. Local ratings block will allow a logged in user to rate this page */
  Ratings: Maybe<CommunityPageRatingBlock>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  /** The subscription section of the page. Local subscription block will allow a logged in user to subscribe to this page */
  Subscriptions: Maybe<CommunityPageSubscriptionBlock>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A reseller's community page using Episerver Social. */
export type CommunityPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CommunityPageAutocomplete = {
  __typename: 'CommunityPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  Comments: Maybe<CommunityPageCommentsBlockAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  GroupAdmission: Maybe<CommunityPageGroupAdmissionBlockAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Memberships: Maybe<CommunityPageMembershipDisplayBlockAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  Ratings: Maybe<CommunityPageRatingBlockAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Subscriptions: Maybe<CommunityPageSubscriptionBlockAutocomplete>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommunityPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommunityPageCommentsBlock = {
  __typename: 'CommunityPageCommentsBlock';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  CommentBoxRows: Maybe<Scalars['Int']['output']>;
  CommentMaxLength: Maybe<Scalars['Int']['output']>;
  CommentsDisplayMax: Maybe<Scalars['Int']['output']>;
  Heading: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  SendActivity: Maybe<Scalars['Bool']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
};

export type CommunityPageCommentsBlockAutocomplete = {
  __typename: 'CommunityPageCommentsBlockAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Heading: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommunityPageCommentsBlockAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageCommentsBlockAutocompleteHeadingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageCommentsBlockAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageCommentsBlockAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommunityPageCommentsBlockFacet = {
  __typename: 'CommunityPageCommentsBlockFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  CommentBoxRows: Maybe<Array<Maybe<NumberFacet>>>;
  CommentMaxLength: Maybe<Array<Maybe<NumberFacet>>>;
  CommentsDisplayMax: Maybe<Array<Maybe<NumberFacet>>>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  SendActivity: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommunityPageCommentsBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageCommentsBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageCommentsBlockFacetCommentBoxRowsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageCommentsBlockFacetCommentMaxLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageCommentsBlockFacetCommentsDisplayMaxArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageCommentsBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageCommentsBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageCommentsBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageCommentsBlockFacetSendActivityArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageCommentsBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommunityPageCommentsBlockOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  CommentBoxRows: InputMaybe<OrderBy>;
  CommentMaxLength: InputMaybe<OrderBy>;
  CommentsDisplayMax: InputMaybe<OrderBy>;
  Heading: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  SendActivity: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
};

export type CommunityPageCommentsBlockWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  CommentBoxRows: InputMaybe<IntFilterInput>;
  CommentMaxLength: InputMaybe<IntFilterInput>;
  CommentsDisplayMax: InputMaybe<IntFilterInput>;
  Heading: InputMaybe<StringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  SendActivity: InputMaybe<BoolFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
};

export type CommunityPageFacet = {
  __typename: 'CommunityPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Comments: Maybe<CommunityPageCommentsBlockFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  GroupAdmission: Maybe<CommunityPageGroupAdmissionBlockFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Memberships: Maybe<CommunityPageMembershipDisplayBlockFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Ratings: Maybe<CommunityPageRatingBlockFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Subscriptions: Maybe<CommunityPageSubscriptionBlockFacet>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommunityPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommunityPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommunityPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommunityPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommunityPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CommunityPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommunityPageGroupAdmissionBlock = {
  __typename: 'CommunityPageGroupAdmissionBlock';
  GroupName: Maybe<Scalars['String']['output']>;
  Heading: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
};

export type CommunityPageGroupAdmissionBlockAutocomplete = {
  __typename: 'CommunityPageGroupAdmissionBlockAutocomplete';
  GroupName: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Heading: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommunityPageGroupAdmissionBlockAutocompleteGroupNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageGroupAdmissionBlockAutocompleteHeadingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommunityPageGroupAdmissionBlockFacet = {
  __typename: 'CommunityPageGroupAdmissionBlockFacet';
  GroupName: Maybe<Array<Maybe<StringFacet>>>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommunityPageGroupAdmissionBlockFacetGroupNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageGroupAdmissionBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageGroupAdmissionBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommunityPageGroupAdmissionBlockOrderByInput = {
  GroupName: InputMaybe<OrderBy>;
  Heading: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
};

export type CommunityPageGroupAdmissionBlockWhereInput = {
  GroupName: InputMaybe<StringFilterInput>;
  Heading: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
};

export type CommunityPageMembershipDisplayBlock = {
  __typename: 'CommunityPageMembershipDisplayBlock';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  GroupName: Maybe<Scalars['String']['output']>;
  Heading: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  NumberOfMembers: Maybe<Scalars['Int']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
};

export type CommunityPageMembershipDisplayBlockAutocomplete = {
  __typename: 'CommunityPageMembershipDisplayBlockAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  GroupName: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Heading: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommunityPageMembershipDisplayBlockAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageMembershipDisplayBlockAutocompleteGroupNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageMembershipDisplayBlockAutocompleteHeadingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageMembershipDisplayBlockAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageMembershipDisplayBlockAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommunityPageMembershipDisplayBlockFacet = {
  __typename: 'CommunityPageMembershipDisplayBlockFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  GroupName: Maybe<Array<Maybe<StringFacet>>>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfMembers: Maybe<Array<Maybe<NumberFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommunityPageMembershipDisplayBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageMembershipDisplayBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageMembershipDisplayBlockFacetGroupNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageMembershipDisplayBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageMembershipDisplayBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageMembershipDisplayBlockFacetNumberOfMembersArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageMembershipDisplayBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageMembershipDisplayBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommunityPageMembershipDisplayBlockOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  GroupName: InputMaybe<OrderBy>;
  Heading: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  NumberOfMembers: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
};

export type CommunityPageMembershipDisplayBlockWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  GroupName: InputMaybe<StringFilterInput>;
  Heading: InputMaybe<StringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  NumberOfMembers: InputMaybe<IntFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
};

export type CommunityPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Comments: InputMaybe<CommunityPageCommentsBlockOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  GroupAdmission: InputMaybe<CommunityPageGroupAdmissionBlockOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Memberships: InputMaybe<CommunityPageMembershipDisplayBlockOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Ratings: InputMaybe<CommunityPageRatingBlockOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Subscriptions: InputMaybe<CommunityPageSubscriptionBlockOrderByInput>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CommunityPageOutput = {
  __typename: 'CommunityPageOutput';
  autocomplete: Maybe<CommunityPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CommunityPageFacet>;
  items: Maybe<Array<Maybe<CommunityPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CommunityPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CommunityPageRatingBlock = {
  __typename: 'CommunityPageRatingBlock';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Heading: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  SendActivity: Maybe<Scalars['Bool']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
};

export type CommunityPageRatingBlockAutocomplete = {
  __typename: 'CommunityPageRatingBlockAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Heading: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommunityPageRatingBlockAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageRatingBlockAutocompleteHeadingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageRatingBlockAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageRatingBlockAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommunityPageRatingBlockFacet = {
  __typename: 'CommunityPageRatingBlockFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  SendActivity: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommunityPageRatingBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageRatingBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageRatingBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageRatingBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageRatingBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageRatingBlockFacetSendActivityArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageRatingBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommunityPageRatingBlockOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  SendActivity: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
};

export type CommunityPageRatingBlockWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Heading: InputMaybe<StringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  SendActivity: InputMaybe<BoolFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
};

export type CommunityPageSubscriptionBlock = {
  __typename: 'CommunityPageSubscriptionBlock';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Heading: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
};

export type CommunityPageSubscriptionBlockAutocomplete = {
  __typename: 'CommunityPageSubscriptionBlockAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Heading: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CommunityPageSubscriptionBlockAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageSubscriptionBlockAutocompleteHeadingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageSubscriptionBlockAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CommunityPageSubscriptionBlockAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CommunityPageSubscriptionBlockFacet = {
  __typename: 'CommunityPageSubscriptionBlockFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
};


export type CommunityPageSubscriptionBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageSubscriptionBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CommunityPageSubscriptionBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageSubscriptionBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageSubscriptionBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CommunityPageSubscriptionBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CommunityPageSubscriptionBlockOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
};

export type CommunityPageSubscriptionBlockWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Heading: InputMaybe<StringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
};

export type CommunityPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Comments: InputMaybe<CommunityPageCommentsBlockWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  GroupAdmission: InputMaybe<CommunityPageGroupAdmissionBlockWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Memberships: InputMaybe<CommunityPageMembershipDisplayBlockWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Ratings: InputMaybe<CommunityPageRatingBlockWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Subscriptions: InputMaybe<CommunityPageSubscriptionBlockWhereInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CommunityPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CommunityPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CommunityPageWhereInput>>>;
};

/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlock = IContent & IData & {
  __typename: 'ContainerBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  CssClass: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlockCssClassArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlockMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allow to style individual blocks, as well as groups of blocks */
export type ContainerBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ContainerBlockAutocomplete = {
  __typename: 'ContainerBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ContainerBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContainerBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ContainerBlockFacet = {
  __typename: 'ContainerBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  CssClass: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ContainerBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ContainerBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContainerBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContainerBlockFacetCssClassArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContainerBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContainerBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContainerBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContainerBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ContainerBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  CssClass: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ContainerBlockOutput = {
  __typename: 'ContainerBlockOutput';
  autocomplete: Maybe<ContainerBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ContainerBlockFacet>;
  items: Maybe<Array<Maybe<ContainerBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ContainerBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContainerBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  CssClass: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ContainerBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ContainerBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ContainerBlockWhereInput>>>;
};

export type Content = IContent & IData & {
  __typename: 'Content';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Content_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Content_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ContentAreaItemModel = {
  __typename: 'ContentAreaItemModel';
  ContentLink: Maybe<ContentModelReference>;
  DisplayOption: Maybe<Scalars['String']['output']>;
  InlineBlock: Maybe<InlineBlockPropertyModel>;
  Tag: Maybe<Scalars['String']['output']>;
};

export type ContentAreaItemModelFacet = {
  __typename: 'ContentAreaItemModelFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
  DisplayOption: Maybe<Array<Maybe<StringFacet>>>;
  InlineBlock: Maybe<InlineBlockPropertyModelFacet>;
  Tag: Maybe<Array<Maybe<StringFacet>>>;
};


export type ContentAreaItemModelFacetDisplayOptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentAreaItemModelFacetTagArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ContentAreaItemModelOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  DisplayOption: InputMaybe<OrderBy>;
  InlineBlock: InputMaybe<InlineBlockPropertyModelOrderByInput>;
  Tag: InputMaybe<OrderBy>;
};

export type ContentAreaItemModelSearch = {
  __typename: 'ContentAreaItemModelSearch';
  ContentLink: Maybe<ContentModelReferenceSearch>;
  DisplayOption: Maybe<Scalars['String']['output']>;
  InlineBlock: Maybe<InlineBlockPropertyModelSearch>;
  Tag: Maybe<Scalars['String']['output']>;
};


export type ContentAreaItemModelSearchContentLinkArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentAreaItemModelSearchDisplayOptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentAreaItemModelSearchInlineBlockArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentAreaItemModelSearchTagArgs = {
  highlight: InputMaybe<HighlightOptions>;
};

export type ContentAreaItemModelSearchFacet = {
  __typename: 'ContentAreaItemModelSearchFacet';
  ContentLink: Maybe<ContentModelReferenceSearchFacet>;
  DisplayOption: Maybe<Array<Maybe<StringFacet>>>;
  InlineBlock: Maybe<InlineBlockPropertyModelSearchFacet>;
  Tag: Maybe<Array<Maybe<StringFacet>>>;
};


export type ContentAreaItemModelSearchFacetDisplayOptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentAreaItemModelSearchFacetTagArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ContentAreaItemModelSearchOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceSearchOrderByInput>;
  DisplayOption: InputMaybe<OrderBy>;
  InlineBlock: InputMaybe<InlineBlockPropertyModelSearchOrderByInput>;
  Tag: InputMaybe<OrderBy>;
};

export type ContentAreaItemModelSearchWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceSearchWhereInput>;
  DisplayOption: InputMaybe<SearchableStringFilterInput>;
  InlineBlock: InputMaybe<InlineBlockPropertyModelSearchWhereInput>;
  Tag: InputMaybe<SearchableStringFilterInput>;
};

export type ContentAreaItemModelWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  DisplayOption: InputMaybe<StringFilterInput>;
  InlineBlock: InputMaybe<InlineBlockPropertyModelWhereInput>;
  Tag: InputMaybe<StringFilterInput>;
};

export type ContentAutocomplete = {
  __typename: 'ContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ContentFacet = {
  __typename: 'ContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ContentLanguageModel = {
  __typename: 'ContentLanguageModel';
  DisplayName: Maybe<Scalars['String']['output']>;
  Link: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
};

export type ContentLanguageModelAutocomplete = {
  __typename: 'ContentLanguageModelAutocomplete';
  DisplayName: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Link: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Name: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ContentLanguageModelAutocompleteDisplayNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentLanguageModelAutocompleteLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentLanguageModelAutocompleteNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ContentLanguageModelFacet = {
  __typename: 'ContentLanguageModelFacet';
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  Link: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
};


export type ContentLanguageModelFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentLanguageModelFacetLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentLanguageModelFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ContentLanguageModelOrderByInput = {
  DisplayName: InputMaybe<OrderBy>;
  Link: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
};

export type ContentLanguageModelSearch = {
  __typename: 'ContentLanguageModelSearch';
  DisplayName: Maybe<Scalars['String']['output']>;
  Link: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
};


export type ContentLanguageModelSearchDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentLanguageModelSearchLinkArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentLanguageModelSearchNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};

export type ContentLanguageModelSearchFacet = {
  __typename: 'ContentLanguageModelSearchFacet';
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  Link: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
};


export type ContentLanguageModelSearchFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentLanguageModelSearchFacetLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentLanguageModelSearchFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ContentLanguageModelSearchOrderByInput = {
  DisplayName: InputMaybe<OrderBy>;
  Link: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
};

export type ContentLanguageModelSearchWhereInput = {
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  Link: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
};

export type ContentLanguageModelWhereInput = {
  DisplayName: InputMaybe<StringFilterInput>;
  Link: InputMaybe<StringFilterInput>;
  Name: InputMaybe<StringFilterInput>;
};

export type ContentModelReference = {
  __typename: 'ContentModelReference';
  Expanded: Maybe<IContent>;
  GuidValue: Maybe<Scalars['String']['output']>;
  Id: Maybe<Scalars['Int']['output']>;
  Language: Maybe<ContentLanguageModel>;
  ProviderName: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  WorkId: Maybe<Scalars['Int']['output']>;
};

export type ContentModelReferenceAutocomplete = {
  __typename: 'ContentModelReferenceAutocomplete';
  GuidValue: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ProviderName: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ContentModelReferenceAutocompleteGuidValueArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentModelReferenceAutocompleteProviderNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ContentModelReferenceAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ContentModelReferenceFacet = {
  __typename: 'ContentModelReferenceFacet';
  GuidValue: Maybe<Array<Maybe<StringFacet>>>;
  Id: Maybe<Array<Maybe<NumberFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  ProviderName: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  WorkId: Maybe<Array<Maybe<NumberFacet>>>;
};


export type ContentModelReferenceFacetGuidValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentModelReferenceFacetIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ContentModelReferenceFacetProviderNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentModelReferenceFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentModelReferenceFacetWorkIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type ContentModelReferenceOrderByInput = {
  GuidValue: InputMaybe<OrderBy>;
  Id: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  ProviderName: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  WorkId: InputMaybe<OrderBy>;
};

export type ContentModelReferenceSearch = {
  __typename: 'ContentModelReferenceSearch';
  Expanded: Maybe<IContent>;
  GuidValue: Maybe<Scalars['String']['output']>;
  Id: Maybe<Scalars['Int']['output']>;
  Language: Maybe<ContentLanguageModelSearch>;
  ProviderName: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  WorkId: Maybe<Scalars['Int']['output']>;
};


export type ContentModelReferenceSearchExpandedArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentModelReferenceSearchLanguageArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentModelReferenceSearchProviderNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ContentModelReferenceSearchUrlArgs = {
  highlight: InputMaybe<HighlightOptions>;
};

export type ContentModelReferenceSearchFacet = {
  __typename: 'ContentModelReferenceSearchFacet';
  GuidValue: Maybe<Array<Maybe<StringFacet>>>;
  Id: Maybe<Array<Maybe<NumberFacet>>>;
  Language: Maybe<ContentLanguageModelSearchFacet>;
  ProviderName: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  WorkId: Maybe<Array<Maybe<NumberFacet>>>;
};


export type ContentModelReferenceSearchFacetGuidValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentModelReferenceSearchFacetIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ContentModelReferenceSearchFacetProviderNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentModelReferenceSearchFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ContentModelReferenceSearchFacetWorkIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type ContentModelReferenceSearchOrderByInput = {
  GuidValue: InputMaybe<OrderBy>;
  Id: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelSearchOrderByInput>;
  ProviderName: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  WorkId: InputMaybe<OrderBy>;
};

export type ContentModelReferenceSearchWhereInput = {
  GuidValue: InputMaybe<StringFilterInput>;
  Id: InputMaybe<IntFilterInput>;
  Language: InputMaybe<ContentLanguageModelSearchWhereInput>;
  ProviderName: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<SearchableStringFilterInput>;
  WorkId: InputMaybe<IntFilterInput>;
};

export type ContentModelReferenceWhereInput = {
  GuidValue: InputMaybe<StringFilterInput>;
  Id: InputMaybe<IntFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  ProviderName: InputMaybe<StringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  WorkId: InputMaybe<IntFilterInput>;
};

export type ContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ContentOutput = {
  __typename: 'ContentOutput';
  autocomplete: Maybe<ContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ContentFacet>;
  items: Maybe<Array<Maybe<IContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContentRootsModel = {
  __typename: 'ContentRootsModel';
  ContentAssetsRoot: Maybe<ContentModelReference>;
  GlobalAssetsRoot: Maybe<ContentModelReference>;
  RootPage: Maybe<ContentModelReference>;
  SiteAssetsRoot: Maybe<ContentModelReference>;
  StartPage: Maybe<ContentModelReference>;
  WasteBasket: Maybe<ContentModelReference>;
};

export type ContentRootsModelAutocomplete = {
  __typename: 'ContentRootsModelAutocomplete';
  ContentAssetsRoot: Maybe<ContentModelReferenceAutocomplete>;
  GlobalAssetsRoot: Maybe<ContentModelReferenceAutocomplete>;
  RootPage: Maybe<ContentModelReferenceAutocomplete>;
  SiteAssetsRoot: Maybe<ContentModelReferenceAutocomplete>;
  StartPage: Maybe<ContentModelReferenceAutocomplete>;
  WasteBasket: Maybe<ContentModelReferenceAutocomplete>;
};

export type ContentRootsModelFacet = {
  __typename: 'ContentRootsModelFacet';
  ContentAssetsRoot: Maybe<ContentModelReferenceFacet>;
  GlobalAssetsRoot: Maybe<ContentModelReferenceFacet>;
  RootPage: Maybe<ContentModelReferenceFacet>;
  SiteAssetsRoot: Maybe<ContentModelReferenceFacet>;
  StartPage: Maybe<ContentModelReferenceFacet>;
  WasteBasket: Maybe<ContentModelReferenceFacet>;
};

export type ContentRootsModelOrderByInput = {
  ContentAssetsRoot: InputMaybe<ContentModelReferenceOrderByInput>;
  GlobalAssetsRoot: InputMaybe<ContentModelReferenceOrderByInput>;
  RootPage: InputMaybe<ContentModelReferenceOrderByInput>;
  SiteAssetsRoot: InputMaybe<ContentModelReferenceOrderByInput>;
  StartPage: InputMaybe<ContentModelReferenceOrderByInput>;
  WasteBasket: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type ContentRootsModelWhereInput = {
  ContentAssetsRoot: InputMaybe<ContentModelReferenceWhereInput>;
  GlobalAssetsRoot: InputMaybe<ContentModelReferenceWhereInput>;
  RootPage: InputMaybe<ContentModelReferenceWhereInput>;
  SiteAssetsRoot: InputMaybe<ContentModelReferenceWhereInput>;
  StartPage: InputMaybe<ContentModelReferenceWhereInput>;
  WasteBasket: InputMaybe<ContentModelReferenceWhereInput>;
};

export type ContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ContentWhereInput>>>;
};

export type CouponData = IContent & IData & {
  __typename: 'CouponData';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type CouponDataCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CouponDataNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CouponData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type CouponData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CouponDataAutocomplete = {
  __typename: 'CouponDataAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CouponDataAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CouponDataAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CouponDataFacet = {
  __typename: 'CouponDataFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CouponDataFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CouponDataFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CouponDataFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CouponDataFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CouponDataFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CouponDataFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CouponDataFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CouponDataOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CouponDataOutput = {
  __typename: 'CouponDataOutput';
  autocomplete: Maybe<CouponDataAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CouponDataFacet>;
  items: Maybe<Array<Maybe<CouponData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CouponDataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CouponDataWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CouponDataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CouponDataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CouponDataWhereInput>>>;
};

/** Manage credit cards */
export type CreditCardPage = IContent & IData & {
  __typename: 'CreditCardPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  B2B: Maybe<Scalars['Bool']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Manage credit cards */
export type CreditCardPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage credit cards */
export type CreditCardPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CreditCardPageAutocomplete = {
  __typename: 'CreditCardPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CreditCardPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CreditCardPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CreditCardPageFacet = {
  __typename: 'CreditCardPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  B2B: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CreditCardPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetB2BArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CreditCardPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CreditCardPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CreditCardPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CreditCardPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CreditCardPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CreditCardPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CreditCardPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  B2B: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CreditCardPageOutput = {
  __typename: 'CreditCardPageOutput';
  autocomplete: Maybe<CreditCardPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CreditCardPageFacet>;
  items: Maybe<Array<Maybe<CreditCardPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CreditCardPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CreditCardPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  B2B: InputMaybe<BoolFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CreditCardPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CreditCardPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CreditCardPageWhereInput>>>;
};

/** Block used to configure Content Manager views */
export type CustomViewConfigurationBlock = IContent & IData & {
  __typename: 'CustomViewConfigurationBlock';
  /** Types that editor can add when using external grid view */
  AllowedTypesToAddString: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  /** When true, then view is used by views provider */
  Enabled: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  /** ContentLink to container where contents should be added. It should be subfolder of the Content Root */
  NewContentRoot: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  /** Root ContentLink for view */
  Root: Maybe<ContentModelReference>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  /** Sort order in menu */
  SortOrder: Maybe<Scalars['Int']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Block used to configure Content Manager views */
export type CustomViewConfigurationBlockAllowedTypesToAddStringArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block used to configure Content Manager views */
export type CustomViewConfigurationBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block used to configure Content Manager views */
export type CustomViewConfigurationBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block used to configure Content Manager views */
export type CustomViewConfigurationBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type CustomViewConfigurationBlockAutocomplete = {
  __typename: 'CustomViewConfigurationBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  NewContentRoot: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Root: Maybe<ContentModelReferenceAutocomplete>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type CustomViewConfigurationBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type CustomViewConfigurationBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type CustomViewConfigurationBlockFacet = {
  __typename: 'CustomViewConfigurationBlockFacet';
  AllowedTypesToAddString: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Enabled: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NewContentRoot: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  Root: Maybe<ContentModelReferenceFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  SortOrder: Maybe<Array<Maybe<NumberFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type CustomViewConfigurationBlockFacetAllowedTypesToAddStringArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CustomViewConfigurationBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CustomViewConfigurationBlockFacetEnabledArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CustomViewConfigurationBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetSortOrderArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type CustomViewConfigurationBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CustomViewConfigurationBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type CustomViewConfigurationBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type CustomViewConfigurationBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type CustomViewConfigurationBlockOrderByInput = {
  AllowedTypesToAddString: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Enabled: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  NewContentRoot: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  Root: InputMaybe<ContentModelReferenceOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  SortOrder: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type CustomViewConfigurationBlockOutput = {
  __typename: 'CustomViewConfigurationBlockOutput';
  autocomplete: Maybe<CustomViewConfigurationBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<CustomViewConfigurationBlockFacet>;
  items: Maybe<Array<Maybe<CustomViewConfigurationBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type CustomViewConfigurationBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type CustomViewConfigurationBlockWhereInput = {
  AllowedTypesToAddString: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Enabled: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NewContentRoot: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  Root: InputMaybe<ContentModelReferenceWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  SortOrder: InputMaybe<IntFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<CustomViewConfigurationBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<CustomViewConfigurationBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<CustomViewConfigurationBlockWhereInput>>>;
};

/** Used by the DAM integration, cannot be edited */
export type DamAsset = IContent & IData & {
  __typename: 'DAMAsset';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used by the DAM integration, cannot be edited */
export type DamAssetContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamAssetNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamAsset_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamAsset_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DamAssetAutocomplete = {
  __typename: 'DAMAssetAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DamAssetAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamAssetAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DamAssetFacet = {
  __typename: 'DAMAssetFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type DamAssetFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamAssetFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamAssetFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamAssetFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamAssetFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamAssetFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamAssetFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DamAssetOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DamAssetOutput = {
  __typename: 'DAMAssetOutput';
  autocomplete: Maybe<DamAssetAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DamAssetFacet>;
  items: Maybe<Array<Maybe<DamAsset>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DamAssetOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DamAssetWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DamAssetWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DamAssetWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DamAssetWhereInput>>>;
};

/** Used by the DAM integration, cannot be edited */
export type DamImageAsset = IContent & IData & {
  __typename: 'DAMImageAsset';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used by the DAM integration, cannot be edited */
export type DamImageAssetContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamImageAssetNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamImageAsset_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamImageAsset_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DamImageAssetAutocomplete = {
  __typename: 'DAMImageAssetAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DamImageAssetAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamImageAssetAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DamImageAssetFacet = {
  __typename: 'DAMImageAssetFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type DamImageAssetFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamImageAssetFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamImageAssetFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamImageAssetFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamImageAssetFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamImageAssetFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamImageAssetFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DamImageAssetOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DamImageAssetOutput = {
  __typename: 'DAMImageAssetOutput';
  autocomplete: Maybe<DamImageAssetAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DamImageAssetFacet>;
  items: Maybe<Array<Maybe<DamImageAsset>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DamImageAssetOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DamImageAssetWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DamImageAssetWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DamImageAssetWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DamImageAssetWhereInput>>>;
};

/** Used by the DAM integration, cannot be edited */
export type DamVideoAsset = IContent & IData & {
  __typename: 'DAMVideoAsset';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used by the DAM integration, cannot be edited */
export type DamVideoAssetContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamVideoAssetNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamVideoAsset_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used by the DAM integration, cannot be edited */
export type DamVideoAsset_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DamVideoAssetAutocomplete = {
  __typename: 'DAMVideoAssetAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DamVideoAssetAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DamVideoAssetAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DamVideoAssetFacet = {
  __typename: 'DAMVideoAssetFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type DamVideoAssetFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamVideoAssetFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamVideoAssetFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamVideoAssetFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamVideoAssetFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DamVideoAssetFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DamVideoAssetFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DamVideoAssetOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DamVideoAssetOutput = {
  __typename: 'DAMVideoAssetOutput';
  autocomplete: Maybe<DamVideoAssetAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DamVideoAssetFacet>;
  items: Maybe<Array<Maybe<DamVideoAsset>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DamVideoAssetOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DamVideoAssetWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DamVideoAssetWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DamVideoAssetWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DamVideoAssetWhereInput>>>;
};

export type Data = IData & {
  __typename: 'Data';
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type Data_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Data_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DataOrderByInput = {
  _ranking: InputMaybe<Ranking>;
};

export type DataOutput = {
  __typename: 'DataOutput';
  cursor: Maybe<Scalars['String']['output']>;
  items: Maybe<Array<Maybe<IData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DataWhereInput = {
  _and: InputMaybe<Array<InputMaybe<DataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DataWhereInput>>>;
};

export type DateFacet = {
  __typename: 'DateFacet';
  count: Maybe<Scalars['Int']['output']>;
  name: Maybe<Scalars['String']['output']>;
};

export enum DateFacetUnit {
  /** Defined as 24 hours (86,400,000 milliseconds). All days begin at the earliest possible time, which is usually 00:00:00 (midnight). */
  Day = 'DAY',
  /** Defined as 60 minutes each (3,600,000 milliseconds). All hours begin at 00 minutes and 00 seconds. */
  Hour = 'HOUR',
  /** Defined as 1000 milliseconds each. */
  Minute = 'MINUTE'
}

export type DateFilterInput = {
  /** `boost` influences the weight of a field by boosting a match with a number (default: 1) — counts more towards the eventual relevance score which can be projected with `_score` — at query time. Note that `boost` cannot be a negative number. */
  boost: InputMaybe<Scalars['Int']['input']>;
  /** `eq` matches on an exact value, but the value is case-insensitive. */
  eq: InputMaybe<Scalars['Date']['input']>;
  /** `gt` retrieves results with matches that have a value which is `greater than` it. */
  gt: InputMaybe<Scalars['Date']['input']>;
  /** `gte` retrieves results with matches that have a value which is `greater than or equal to` it. */
  gte: InputMaybe<Scalars['Date']['input']>;
  /** `lt` retrieves results with matches that have a value which is `lower than` it. */
  lt: InputMaybe<Scalars['Date']['input']>;
  /** `lte` retrieves results with matches that have a value which is `lower than or equal to` it. */
  lte: InputMaybe<Scalars['Date']['input']>;
  /** `not_eq` retrieves results not matching with an exact (but case-insensitive) value. */
  notEq: InputMaybe<Scalars['Date']['input']>;
};

export type DateTimeElementBlock = IContent & IData & {
  __typename: 'DateTimeElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PickerType: Maybe<Scalars['Int']['output']>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type DateTimeElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DateTimeElementBlockAutocomplete = {
  __typename: 'DateTimeElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DateTimeElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DateTimeElementBlockFacet = {
  __typename: 'DateTimeElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PickerType: Maybe<Array<Maybe<NumberFacet>>>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type DateTimeElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DateTimeElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetPickerTypeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DateTimeElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DateTimeElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PickerType: InputMaybe<OrderBy>;
  PlaceHolder: InputMaybe<OrderBy>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DateTimeElementBlockOutput = {
  __typename: 'DateTimeElementBlockOutput';
  autocomplete: Maybe<DateTimeElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DateTimeElementBlockFacet>;
  items: Maybe<Array<Maybe<DateTimeElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DateTimeElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DateTimeElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PickerType: InputMaybe<IntFilterInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DateTimeElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DateTimeElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DateTimeElementBlockWhereInput>>>;
};

export type DateTimeRangeElementBlock = IContent & IData & {
  __typename: 'DateTimeRangeElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PickerType: Maybe<Scalars['Int']['output']>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type DateTimeRangeElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DateTimeRangeElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DateTimeRangeElementBlockAutocomplete = {
  __typename: 'DateTimeRangeElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DateTimeRangeElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DateTimeRangeElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DateTimeRangeElementBlockFacet = {
  __typename: 'DateTimeRangeElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PickerType: Maybe<Array<Maybe<NumberFacet>>>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type DateTimeRangeElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeRangeElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DateTimeRangeElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeRangeElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetPickerTypeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DateTimeRangeElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeRangeElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeRangeElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DateTimeRangeElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DateTimeRangeElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DateTimeRangeElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PickerType: InputMaybe<OrderBy>;
  PlaceHolder: InputMaybe<OrderBy>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DateTimeRangeElementBlockOutput = {
  __typename: 'DateTimeRangeElementBlockOutput';
  autocomplete: Maybe<DateTimeRangeElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DateTimeRangeElementBlockFacet>;
  items: Maybe<Array<Maybe<DateTimeRangeElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DateTimeRangeElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DateTimeRangeElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PickerType: InputMaybe<IntFilterInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DateTimeRangeElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DateTimeRangeElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DateTimeRangeElementBlockWhereInput>>>;
};

export type DiscountItems = IContent & IData & {
  __typename: 'DiscountItems';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Items: Maybe<Array<Maybe<ContentModelReference>>>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MatchRecursive: Maybe<Scalars['Bool']['output']>;
  MaxQuantity: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type DiscountItemsNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DiscountItems_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type DiscountItems_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DiscountItemsAutocomplete = {
  __typename: 'DiscountItemsAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Items: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DiscountItemsAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DiscountItemsAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DiscountItemsFacet = {
  __typename: 'DiscountItemsFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Items: Maybe<ContentModelReferenceFacet>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MatchRecursive: Maybe<Array<Maybe<StringFacet>>>;
  MaxQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type DiscountItemsFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DiscountItemsFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DiscountItemsFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetMatchRecursiveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetMaxQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DiscountItemsFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DiscountItemsFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DiscountItemsFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DiscountItemsFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DiscountItemsFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DiscountItemsOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Items: InputMaybe<ContentModelReferenceOrderByInput>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MatchRecursive: InputMaybe<OrderBy>;
  MaxQuantity: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DiscountItemsOutput = {
  __typename: 'DiscountItemsOutput';
  autocomplete: Maybe<DiscountItemsAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DiscountItemsFacet>;
  items: Maybe<Array<Maybe<DiscountItems>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DiscountItemsOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DiscountItemsWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Items: InputMaybe<ContentModelReferenceWhereInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MatchRecursive: InputMaybe<BoolFilterInput>;
  MaxQuantity: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DiscountItemsWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DiscountItemsWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DiscountItemsWhereInput>>>;
};

/** Dynamic product supports mutiple options */
export type DynamicProduct = IContent & IData & {
  __typename: 'DynamicProduct';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<DynamicProductAssociations>;
  AssociationsTitle: Maybe<Scalars['String']['output']>;
  /** Boost product in search results with default sort */
  Boost: Maybe<Scalars['Int']['output']>;
  Brand: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to hide product in search results. */
  Bury: Maybe<Scalars['Bool']['output']>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<DynamicProductCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Department: Maybe<Scalars['String']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LegalDisclaimer: Maybe<Scalars['String']['output']>;
  LongDescription: Maybe<Scalars['String']['output']>;
  Manufacturer: Maybe<Scalars['String']['output']>;
  ManufacturerPartsWarrantyDescription: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Model: Maybe<Scalars['String']['output']>;
  ModelYear: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  NewArrival: Maybe<Scalars['Bool']['output']>;
  OnSale: Maybe<Scalars['Bool']['output']>;
  ParentEntries: Maybe<DynamicProductRelations>;
  ParentLink: Maybe<ContentModelReference>;
  ProductGroup: Maybe<Scalars['String']['output']>;
  ProductStatus: Maybe<Scalars['String']['output']>;
  ProductTeaser: Maybe<Scalars['String']['output']>;
  ProductTypeName: Maybe<Scalars['String']['output']>;
  ProductTypeSubcategory: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<DynamicProductSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to show recommendations. */
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  Sizing: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  VariantsReference: Maybe<ContentModelReference>;
  Warranty: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductAssociationsTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductBrandArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductDepartmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductLegalDisclaimerArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductLongDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductManufacturerArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductManufacturerPartsWarrantyDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductModelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductModelYearArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductProductGroupArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductProductStatusArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductProductTeaserArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductProductTypeNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductProductTypeSubcategoryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductSizingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProductWarrantyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProduct_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic product supports mutiple options */
export type DynamicProduct_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DynamicProductAssociations = {
  __typename: 'DynamicProductAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type DynamicProductAssociationsAutocomplete = {
  __typename: 'DynamicProductAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type DynamicProductAssociationsFacet = {
  __typename: 'DynamicProductAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type DynamicProductAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type DynamicProductAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type DynamicProductAutocomplete = {
  __typename: 'DynamicProductAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<DynamicProductAssociationsAutocomplete>;
  Categories: Maybe<DynamicProductCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<DynamicProductRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<DynamicProductSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  VariantsReference: Maybe<ContentModelReferenceAutocomplete>;
};


export type DynamicProductAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DynamicProductCategories = {
  __typename: 'DynamicProductCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type DynamicProductCategoriesAutocomplete = {
  __typename: 'DynamicProductCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type DynamicProductCategoriesFacet = {
  __typename: 'DynamicProductCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type DynamicProductCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type DynamicProductCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type DynamicProductFacet = {
  __typename: 'DynamicProductFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<DynamicProductAssociationsFacet>;
  AssociationsTitle: Maybe<Array<Maybe<StringFacet>>>;
  Boost: Maybe<Array<Maybe<NumberFacet>>>;
  Brand: Maybe<Array<Maybe<StringFacet>>>;
  Bury: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<DynamicProductCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Department: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LegalDisclaimer: Maybe<Array<Maybe<StringFacet>>>;
  LongDescription: Maybe<Array<Maybe<StringFacet>>>;
  Manufacturer: Maybe<Array<Maybe<StringFacet>>>;
  ManufacturerPartsWarrantyDescription: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Model: Maybe<Array<Maybe<StringFacet>>>;
  ModelYear: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NewArrival: Maybe<Array<Maybe<StringFacet>>>;
  OnSale: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<DynamicProductRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  ProductGroup: Maybe<Array<Maybe<StringFacet>>>;
  ProductStatus: Maybe<Array<Maybe<StringFacet>>>;
  ProductTeaser: Maybe<Array<Maybe<StringFacet>>>;
  ProductTypeName: Maybe<Array<Maybe<StringFacet>>>;
  ProductTypeSubcategory: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<DynamicProductSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  Sizing: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VariantsReference: Maybe<ContentModelReferenceFacet>;
  Warranty: Maybe<Array<Maybe<StringFacet>>>;
};


export type DynamicProductFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetAssociationsTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetBoostArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicProductFacetBrandArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetBuryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicProductFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicProductFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicProductFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetDepartmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetLegalDisclaimerArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetLongDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetManufacturerArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetManufacturerPartsWarrantyDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicProductFacetModelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetModelYearArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetNewArrivalArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetOnSaleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetProductGroupArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetProductStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetProductTeaserArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetProductTypeNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetProductTypeSubcategoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicProductFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetSizingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicProductFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicProductFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductFacetWarrantyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DynamicProductOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<DynamicProductAssociationsOrderByInput>;
  AssociationsTitle: InputMaybe<OrderBy>;
  Boost: InputMaybe<OrderBy>;
  Brand: InputMaybe<OrderBy>;
  Bury: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<DynamicProductCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Department: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LegalDisclaimer: InputMaybe<OrderBy>;
  LongDescription: InputMaybe<OrderBy>;
  Manufacturer: InputMaybe<OrderBy>;
  ManufacturerPartsWarrantyDescription: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Model: InputMaybe<OrderBy>;
  ModelYear: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  NewArrival: InputMaybe<OrderBy>;
  OnSale: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<DynamicProductRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ProductGroup: InputMaybe<OrderBy>;
  ProductStatus: InputMaybe<OrderBy>;
  ProductTeaser: InputMaybe<OrderBy>;
  ProductTypeName: InputMaybe<OrderBy>;
  ProductTypeSubcategory: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<DynamicProductSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  Sizing: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VariantsReference: InputMaybe<ContentModelReferenceOrderByInput>;
  Warranty: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DynamicProductOutput = {
  __typename: 'DynamicProductOutput';
  autocomplete: Maybe<DynamicProductAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DynamicProductFacet>;
  items: Maybe<Array<Maybe<DynamicProduct>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DynamicProductOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DynamicProductRelations = {
  __typename: 'DynamicProductRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type DynamicProductRelationsAutocomplete = {
  __typename: 'DynamicProductRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type DynamicProductRelationsFacet = {
  __typename: 'DynamicProductRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type DynamicProductRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type DynamicProductRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type DynamicProductSeoInformation = {
  __typename: 'DynamicProductSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type DynamicProductSeoInformationAutocomplete = {
  __typename: 'DynamicProductSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DynamicProductSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicProductSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DynamicProductSeoInformationFacet = {
  __typename: 'DynamicProductSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type DynamicProductSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicProductSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DynamicProductSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type DynamicProductSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type DynamicProductWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<DynamicProductAssociationsWhereInput>;
  AssociationsTitle: InputMaybe<SearchableStringFilterInput>;
  Boost: InputMaybe<IntFilterInput>;
  Brand: InputMaybe<SearchableStringFilterInput>;
  Bury: InputMaybe<BoolFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<DynamicProductCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Department: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LegalDisclaimer: InputMaybe<SearchableStringFilterInput>;
  LongDescription: InputMaybe<SearchableStringFilterInput>;
  Manufacturer: InputMaybe<SearchableStringFilterInput>;
  ManufacturerPartsWarrantyDescription: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Model: InputMaybe<SearchableStringFilterInput>;
  ModelYear: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NewArrival: InputMaybe<BoolFilterInput>;
  OnSale: InputMaybe<BoolFilterInput>;
  ParentEntries: InputMaybe<DynamicProductRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ProductGroup: InputMaybe<SearchableStringFilterInput>;
  ProductStatus: InputMaybe<SearchableStringFilterInput>;
  ProductTeaser: InputMaybe<SearchableStringFilterInput>;
  ProductTypeName: InputMaybe<SearchableStringFilterInput>;
  ProductTypeSubcategory: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<DynamicProductSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  Sizing: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VariantsReference: InputMaybe<ContentModelReferenceWhereInput>;
  Warranty: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DynamicProductWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DynamicProductWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DynamicProductWhereInput>>>;
};

/** Dynamic variant supports multiple options */
export type DynamicVariant = IContent & IData & {
  __typename: 'DynamicVariant';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<DynamicVariantAssociations>;
  AssociationsTitle: Maybe<Scalars['String']['output']>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<DynamicVariantCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  Color: Maybe<Scalars['String']['output']>;
  ContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  InventoryReference: Maybe<ContentModelReference>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MaxQuantity: Maybe<Scalars['Float']['output']>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  MinQuantity: Maybe<Scalars['Float']['output']>;
  Mpn: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  PackageQuantity: Maybe<Scalars['String']['output']>;
  ParentEntries: Maybe<DynamicVariantRelations>;
  ParentLink: Maybe<ContentModelReference>;
  PartNumber: Maybe<Scalars['String']['output']>;
  PriceReference: Maybe<ContentModelReference>;
  RegionCode: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<DynamicVariantSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  ShippingDimensions: Maybe<DynamicVariantShippingDimensions>;
  ShippingPackageId: Maybe<Scalars['Int']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  Size: Maybe<Scalars['String']['output']>;
  Sku: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  SubscriptionLength: Maybe<Scalars['String']['output']>;
  TaxCategoryId: Maybe<Scalars['Int']['output']>;
  TrackInventory: Maybe<Scalars['Bool']['output']>;
  Upc: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  VirtualProductMode: Maybe<Scalars['String']['output']>;
  VirtualProductRole: Maybe<Scalars['String']['output']>;
  Weight: Maybe<Scalars['Float']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantAssociationsTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantMpnArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantPackageQuantityArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantPartNumberArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantRegionCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantSkuArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantSubscriptionLengthArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantUpcArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantVirtualProductModeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariantVirtualProductRoleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariant_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Dynamic variant supports multiple options */
export type DynamicVariant_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type DynamicVariantAssociations = {
  __typename: 'DynamicVariantAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type DynamicVariantAssociationsAutocomplete = {
  __typename: 'DynamicVariantAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type DynamicVariantAssociationsFacet = {
  __typename: 'DynamicVariantAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type DynamicVariantAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type DynamicVariantAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type DynamicVariantAutocomplete = {
  __typename: 'DynamicVariantAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<DynamicVariantAssociationsAutocomplete>;
  Categories: Maybe<DynamicVariantCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  InventoryReference: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<DynamicVariantRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  PriceReference: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<DynamicVariantSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DynamicVariantAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DynamicVariantCategories = {
  __typename: 'DynamicVariantCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type DynamicVariantCategoriesAutocomplete = {
  __typename: 'DynamicVariantCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type DynamicVariantCategoriesFacet = {
  __typename: 'DynamicVariantCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type DynamicVariantCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type DynamicVariantCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type DynamicVariantFacet = {
  __typename: 'DynamicVariantFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<DynamicVariantAssociationsFacet>;
  AssociationsTitle: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<DynamicVariantCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  Color: Maybe<Array<Maybe<StringFacet>>>;
  ContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  InventoryReference: Maybe<ContentModelReferenceFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  MinQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  Mpn: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PackageQuantity: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<DynamicVariantRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartNumber: Maybe<Array<Maybe<StringFacet>>>;
  PriceReference: Maybe<ContentModelReferenceFacet>;
  RegionCode: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<DynamicVariantSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  ShippingDimensions: Maybe<DynamicVariantShippingDimensionsFacet>;
  ShippingPackageId: Maybe<Array<Maybe<NumberFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  Size: Maybe<Array<Maybe<StringFacet>>>;
  Sku: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  SubscriptionLength: Maybe<Array<Maybe<StringFacet>>>;
  TaxCategoryId: Maybe<Array<Maybe<NumberFacet>>>;
  TrackInventory: Maybe<Array<Maybe<StringFacet>>>;
  Upc: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VirtualProductMode: Maybe<Array<Maybe<StringFacet>>>;
  VirtualProductRole: Maybe<Array<Maybe<StringFacet>>>;
  Weight: Maybe<Array<Maybe<NumberFacet>>>;
};


export type DynamicVariantFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetAssociationsTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicVariantFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicVariantFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetMaxQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantFacetMinQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantFacetMpnArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetPackageQuantityArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetPartNumberArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetRegionCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicVariantFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetShippingPackageIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetSkuArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicVariantFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type DynamicVariantFacetSubscriptionLengthArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetTaxCategoryIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantFacetTrackInventoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetUpcArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetVirtualProductModeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetVirtualProductRoleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantFacetWeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type DynamicVariantOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<DynamicVariantAssociationsOrderByInput>;
  AssociationsTitle: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<DynamicVariantCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  Color: InputMaybe<OrderBy>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  InventoryReference: InputMaybe<ContentModelReferenceOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxQuantity: InputMaybe<OrderBy>;
  MetaClassId: InputMaybe<OrderBy>;
  MinQuantity: InputMaybe<OrderBy>;
  Mpn: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  PackageQuantity: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<DynamicVariantRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartNumber: InputMaybe<OrderBy>;
  PriceReference: InputMaybe<ContentModelReferenceOrderByInput>;
  RegionCode: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<DynamicVariantSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  ShippingDimensions: InputMaybe<DynamicVariantShippingDimensionsOrderByInput>;
  ShippingPackageId: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  Size: InputMaybe<OrderBy>;
  Sku: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  SubscriptionLength: InputMaybe<OrderBy>;
  TaxCategoryId: InputMaybe<OrderBy>;
  TrackInventory: InputMaybe<OrderBy>;
  Upc: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VirtualProductMode: InputMaybe<OrderBy>;
  VirtualProductRole: InputMaybe<OrderBy>;
  Weight: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type DynamicVariantOutput = {
  __typename: 'DynamicVariantOutput';
  autocomplete: Maybe<DynamicVariantAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<DynamicVariantFacet>;
  items: Maybe<Array<Maybe<DynamicVariant>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type DynamicVariantOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type DynamicVariantRelations = {
  __typename: 'DynamicVariantRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type DynamicVariantRelationsAutocomplete = {
  __typename: 'DynamicVariantRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type DynamicVariantRelationsFacet = {
  __typename: 'DynamicVariantRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type DynamicVariantRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type DynamicVariantRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type DynamicVariantSeoInformation = {
  __typename: 'DynamicVariantSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type DynamicVariantSeoInformationAutocomplete = {
  __typename: 'DynamicVariantSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type DynamicVariantSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type DynamicVariantSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type DynamicVariantSeoInformationFacet = {
  __typename: 'DynamicVariantSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type DynamicVariantSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type DynamicVariantSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type DynamicVariantSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type DynamicVariantSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type DynamicVariantShippingDimensions = {
  __typename: 'DynamicVariantShippingDimensions';
  Height: Maybe<Scalars['Float']['output']>;
  Length: Maybe<Scalars['Float']['output']>;
  Width: Maybe<Scalars['Float']['output']>;
};

export type DynamicVariantShippingDimensionsFacet = {
  __typename: 'DynamicVariantShippingDimensionsFacet';
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  Length: Maybe<Array<Maybe<NumberFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type DynamicVariantShippingDimensionsFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantShippingDimensionsFacetLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type DynamicVariantShippingDimensionsFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type DynamicVariantShippingDimensionsOrderByInput = {
  Height: InputMaybe<OrderBy>;
  Length: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
};

export type DynamicVariantShippingDimensionsWhereInput = {
  Height: InputMaybe<FloatFilterInput>;
  Length: InputMaybe<FloatFilterInput>;
  Width: InputMaybe<FloatFilterInput>;
};

export type DynamicVariantWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<DynamicVariantAssociationsWhereInput>;
  AssociationsTitle: InputMaybe<SearchableStringFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<DynamicVariantCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  Color: InputMaybe<SearchableStringFilterInput>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  InventoryReference: InputMaybe<ContentModelReferenceWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxQuantity: InputMaybe<FloatFilterInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  MinQuantity: InputMaybe<FloatFilterInput>;
  Mpn: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PackageQuantity: InputMaybe<SearchableStringFilterInput>;
  ParentEntries: InputMaybe<DynamicVariantRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartNumber: InputMaybe<SearchableStringFilterInput>;
  PriceReference: InputMaybe<ContentModelReferenceWhereInput>;
  RegionCode: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<DynamicVariantSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  ShippingDimensions: InputMaybe<DynamicVariantShippingDimensionsWhereInput>;
  ShippingPackageId: InputMaybe<IntFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  Size: InputMaybe<SearchableStringFilterInput>;
  Sku: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  SubscriptionLength: InputMaybe<SearchableStringFilterInput>;
  TaxCategoryId: InputMaybe<IntFilterInput>;
  TrackInventory: InputMaybe<BoolFilterInput>;
  Upc: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VirtualProductMode: InputMaybe<SearchableStringFilterInput>;
  VirtualProductRole: InputMaybe<SearchableStringFilterInput>;
  Weight: InputMaybe<FloatFilterInput>;
  _and: InputMaybe<Array<InputMaybe<DynamicVariantWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<DynamicVariantWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<DynamicVariantWhereInput>>>;
};

/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlock = IContent & IData & {
  __typename: 'ElevatedRoleBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Body: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlockBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlockMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Elevated Role Block that uses access rights for read */
export type ElevatedRoleBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ElevatedRoleBlockAutocomplete = {
  __typename: 'ElevatedRoleBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ElevatedRoleBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ElevatedRoleBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ElevatedRoleBlockFacet = {
  __typename: 'ElevatedRoleBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Body: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ElevatedRoleBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ElevatedRoleBlockFacetBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ElevatedRoleBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ElevatedRoleBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ElevatedRoleBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ElevatedRoleBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ElevatedRoleBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ElevatedRoleBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ElevatedRoleBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Body: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ElevatedRoleBlockOutput = {
  __typename: 'ElevatedRoleBlockOutput';
  autocomplete: Maybe<ElevatedRoleBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ElevatedRoleBlockFacet>;
  items: Maybe<Array<Maybe<ElevatedRoleBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ElevatedRoleBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ElevatedRoleBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Body: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ElevatedRoleBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ElevatedRoleBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ElevatedRoleBlockWhereInput>>>;
};

/** Filter product that has a value for the given field */
export type ExistsFilterBlock = IContent & IData & {
  __typename: 'ExistsFilterBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** Name of field in index */
  FieldName: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Filter product that has a value for the given field */
export type ExistsFilterBlockFieldNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product that has a value for the given field */
export type ExistsFilterBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product that has a value for the given field */
export type ExistsFilterBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product that has a value for the given field */
export type ExistsFilterBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ExistsFilterBlockAutocomplete = {
  __typename: 'ExistsFilterBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ExistsFilterBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ExistsFilterBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ExistsFilterBlockFacet = {
  __typename: 'ExistsFilterBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FieldName: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ExistsFilterBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ExistsFilterBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ExistsFilterBlockFacetFieldNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ExistsFilterBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ExistsFilterBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ExistsFilterBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ExistsFilterBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ExistsFilterBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FieldName: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ExistsFilterBlockOutput = {
  __typename: 'ExistsFilterBlockOutput';
  autocomplete: Maybe<ExistsFilterBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ExistsFilterBlockFacet>;
  items: Maybe<Array<Maybe<ExistsFilterBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ExistsFilterBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ExistsFilterBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FieldName: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ExistsFilterBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ExistsFilterBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ExistsFilterBlockWhereInput>>>;
};

/** Display content from a Facebook feed */
export type FacebookBlock = IContent & IData & {
  __typename: 'FacebookBlock';
  AccountName: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Height: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Width: Maybe<Scalars['Int']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Display content from a Facebook feed */
export type FacebookBlockAccountNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Facebook feed */
export type FacebookBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Facebook feed */
export type FacebookBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Facebook feed */
export type FacebookBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Facebook feed */
export type FacebookBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Facebook feed */
export type FacebookBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Facebook feed */
export type FacebookBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FacebookBlockAutocomplete = {
  __typename: 'FacebookBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FacebookBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FacebookBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FacebookBlockFacet = {
  __typename: 'FacebookBlockFacet';
  AccountName: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type FacebookBlockFacetAccountNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FacebookBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FacebookBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FacebookBlockFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FacebookBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FacebookBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FacebookBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FacebookBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FacebookBlockFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type FacebookBlockOrderByInput = {
  AccountName: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Height: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FacebookBlockOutput = {
  __typename: 'FacebookBlockOutput';
  autocomplete: Maybe<FacebookBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FacebookBlockFacet>;
  items: Maybe<Array<Maybe<FacebookBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FacebookBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FacebookBlockWhereInput = {
  AccountName: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Height: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Width: InputMaybe<IntFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FacebookBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FacebookBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FacebookBlockWhereInput>>>;
};

/** Configures the properties of a feed block frontend view */
export type FeedBlock = IContent & IData & {
  __typename: 'FeedBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FeedDisplayMax: Maybe<Scalars['Int']['output']>;
  FeedTitle: Maybe<Scalars['String']['output']>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlockFeedTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a feed block frontend view */
export type FeedBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FeedBlockAutocomplete = {
  __typename: 'FeedBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FeedBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FeedBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FeedBlockFacet = {
  __typename: 'FeedBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FeedDisplayMax: Maybe<Array<Maybe<NumberFacet>>>;
  FeedTitle: Maybe<Array<Maybe<StringFacet>>>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FeedBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FeedBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FeedBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FeedBlockFacetFeedDisplayMaxArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FeedBlockFacetFeedTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FeedBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FeedBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FeedBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FeedBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FeedBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FeedDisplayMax: InputMaybe<OrderBy>;
  FeedTitle: InputMaybe<OrderBy>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FeedBlockOutput = {
  __typename: 'FeedBlockOutput';
  autocomplete: Maybe<FeedBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FeedBlockFacet>;
  items: Maybe<Array<Maybe<FeedBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FeedBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FeedBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FeedDisplayMax: InputMaybe<IntFilterInput>;
  FeedTitle: InputMaybe<SearchableStringFilterInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FeedBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FeedBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FeedBlockWhereInput>>>;
};

export type FileUploadElementBlock = IContent & IData & {
  __typename: 'FileUploadElementBlock';
  AllowMultiple: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FileSize: Maybe<Scalars['Int']['output']>;
  FileTypes: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type FileUploadElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlockFileTypesArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FileUploadElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FileUploadElementBlockAutocomplete = {
  __typename: 'FileUploadElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FileUploadElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FileUploadElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FileUploadElementBlockFacet = {
  __typename: 'FileUploadElementBlockFacet';
  AllowMultiple: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FileSize: Maybe<Array<Maybe<NumberFacet>>>;
  FileTypes: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type FileUploadElementBlockFacetAllowMultipleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FileUploadElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FileUploadElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FileUploadElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetFileSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FileUploadElementBlockFacetFileTypesArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FileUploadElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FileUploadElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FileUploadElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FileUploadElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FileUploadElementBlockOrderByInput = {
  AllowMultiple: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FileSize: InputMaybe<OrderBy>;
  FileTypes: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FileUploadElementBlockOutput = {
  __typename: 'FileUploadElementBlockOutput';
  autocomplete: Maybe<FileUploadElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FileUploadElementBlockFacet>;
  items: Maybe<Array<Maybe<FileUploadElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FileUploadElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FileUploadElementBlockWhereInput = {
  AllowMultiple: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FileSize: InputMaybe<IntFilterInput>;
  FileTypes: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FileUploadElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FileUploadElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FileUploadElementBlockWhereInput>>>;
};

/** Activity facets for locations */
export type FilterActivitiesBlock = IContent & IData & {
  __typename: 'FilterActivitiesBlock';
  AllConditionText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FilterTitle: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Activity facets for locations */
export type FilterActivitiesBlockAllConditionTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlockFilterTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Activity facets for locations */
export type FilterActivitiesBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FilterActivitiesBlockAutocomplete = {
  __typename: 'FilterActivitiesBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FilterActivitiesBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterActivitiesBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FilterActivitiesBlockFacet = {
  __typename: 'FilterActivitiesBlockFacet';
  AllConditionText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FilterTitle: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FilterActivitiesBlockFacetAllConditionTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FilterActivitiesBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterActivitiesBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterActivitiesBlockFacetFilterTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterActivitiesBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterActivitiesBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterActivitiesBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterActivitiesBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FilterActivitiesBlockOrderByInput = {
  AllConditionText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FilterTitle: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FilterActivitiesBlockOutput = {
  __typename: 'FilterActivitiesBlockOutput';
  autocomplete: Maybe<FilterActivitiesBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FilterActivitiesBlockFacet>;
  items: Maybe<Array<Maybe<FilterActivitiesBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FilterActivitiesBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FilterActivitiesBlockWhereInput = {
  AllConditionText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FilterTitle: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FilterActivitiesBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FilterActivitiesBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FilterActivitiesBlockWhereInput>>>;
};

/** Continent facets for locations */
export type FilterContinentsBlock = IContent & IData & {
  __typename: 'FilterContinentsBlock';
  AllConditionText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FilterTitle: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Continent facets for locations */
export type FilterContinentsBlockAllConditionTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlockFilterTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Continent facets for locations */
export type FilterContinentsBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FilterContinentsBlockAutocomplete = {
  __typename: 'FilterContinentsBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FilterContinentsBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterContinentsBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FilterContinentsBlockFacet = {
  __typename: 'FilterContinentsBlockFacet';
  AllConditionText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FilterTitle: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FilterContinentsBlockFacetAllConditionTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FilterContinentsBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterContinentsBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterContinentsBlockFacetFilterTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterContinentsBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterContinentsBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterContinentsBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterContinentsBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FilterContinentsBlockOrderByInput = {
  AllConditionText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FilterTitle: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FilterContinentsBlockOutput = {
  __typename: 'FilterContinentsBlockOutput';
  autocomplete: Maybe<FilterContinentsBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FilterContinentsBlockFacet>;
  items: Maybe<Array<Maybe<FilterContinentsBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FilterContinentsBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FilterContinentsBlockWhereInput = {
  AllConditionText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FilterTitle: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FilterContinentsBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FilterContinentsBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FilterContinentsBlockWhereInput>>>;
};

/** Distance facets for locations */
export type FilterDistancesBlock = IContent & IData & {
  __typename: 'FilterDistancesBlock';
  AllConditionText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FilterTitle: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Distance facets for locations */
export type FilterDistancesBlockAllConditionTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlockFilterTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Distance facets for locations */
export type FilterDistancesBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FilterDistancesBlockAutocomplete = {
  __typename: 'FilterDistancesBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FilterDistancesBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterDistancesBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FilterDistancesBlockFacet = {
  __typename: 'FilterDistancesBlockFacet';
  AllConditionText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FilterTitle: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FilterDistancesBlockFacetAllConditionTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FilterDistancesBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterDistancesBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterDistancesBlockFacetFilterTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterDistancesBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterDistancesBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterDistancesBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterDistancesBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FilterDistancesBlockOrderByInput = {
  AllConditionText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FilterTitle: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FilterDistancesBlockOutput = {
  __typename: 'FilterDistancesBlockOutput';
  autocomplete: Maybe<FilterDistancesBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FilterDistancesBlockFacet>;
  items: Maybe<Array<Maybe<FilterDistancesBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FilterDistancesBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FilterDistancesBlockWhereInput = {
  AllConditionText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FilterTitle: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FilterDistancesBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FilterDistancesBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FilterDistancesBlockWhereInput>>>;
};

/** Temperature slider for locations */
export type FilterTemperaturesBlock = IContent & IData & {
  __typename: 'FilterTemperaturesBlock';
  AllConditionText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FilterTitle: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlockAllConditionTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlockFilterTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Temperature slider for locations */
export type FilterTemperaturesBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FilterTemperaturesBlockAutocomplete = {
  __typename: 'FilterTemperaturesBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FilterTemperaturesBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FilterTemperaturesBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FilterTemperaturesBlockFacet = {
  __typename: 'FilterTemperaturesBlockFacet';
  AllConditionText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FilterTitle: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FilterTemperaturesBlockFacetAllConditionTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FilterTemperaturesBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterTemperaturesBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterTemperaturesBlockFacetFilterTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterTemperaturesBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterTemperaturesBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FilterTemperaturesBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FilterTemperaturesBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FilterTemperaturesBlockOrderByInput = {
  AllConditionText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FilterTitle: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FilterTemperaturesBlockOutput = {
  __typename: 'FilterTemperaturesBlockOutput';
  autocomplete: Maybe<FilterTemperaturesBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FilterTemperaturesBlockFacet>;
  items: Maybe<Array<Maybe<FilterTemperaturesBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FilterTemperaturesBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FilterTemperaturesBlockWhereInput = {
  AllConditionText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FilterTitle: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FilterTemperaturesBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FilterTemperaturesBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FilterTemperaturesBlockWhereInput>>>;
};

export type FixedPricePurchaseQuantity = IContent & IData & {
  __typename: 'FixedPricePurchaseQuantity';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Items: Maybe<Array<Maybe<ContentModelReference>>>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MatchRecursive: Maybe<Scalars['Bool']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PartiallyFulfilledThreshold: Maybe<Scalars['Float']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RequiredQuantity: Maybe<Scalars['Int']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type FixedPricePurchaseQuantityNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FixedPricePurchaseQuantity_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FixedPricePurchaseQuantity_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FixedPricePurchaseQuantityAutocomplete = {
  __typename: 'FixedPricePurchaseQuantityAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Items: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FixedPricePurchaseQuantityAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FixedPricePurchaseQuantityAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FixedPricePurchaseQuantityFacet = {
  __typename: 'FixedPricePurchaseQuantityFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Items: Maybe<ContentModelReferenceFacet>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MatchRecursive: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartiallyFulfilledThreshold: Maybe<Array<Maybe<NumberFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RequiredQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FixedPricePurchaseQuantityFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FixedPricePurchaseQuantityFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FixedPricePurchaseQuantityFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetMatchRecursiveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetPartiallyFulfilledThresholdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FixedPricePurchaseQuantityFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetRequiredQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FixedPricePurchaseQuantityFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FixedPricePurchaseQuantityFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FixedPricePurchaseQuantityFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FixedPricePurchaseQuantityFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FixedPricePurchaseQuantityFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FixedPricePurchaseQuantityOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Items: InputMaybe<ContentModelReferenceOrderByInput>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MatchRecursive: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartiallyFulfilledThreshold: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RequiredQuantity: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FixedPricePurchaseQuantityOutput = {
  __typename: 'FixedPricePurchaseQuantityOutput';
  autocomplete: Maybe<FixedPricePurchaseQuantityAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FixedPricePurchaseQuantityFacet>;
  items: Maybe<Array<Maybe<FixedPricePurchaseQuantity>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FixedPricePurchaseQuantityOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FixedPricePurchaseQuantityWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Items: InputMaybe<ContentModelReferenceWhereInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MatchRecursive: InputMaybe<BoolFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartiallyFulfilledThreshold: InputMaybe<FloatFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RequiredQuantity: InputMaybe<IntFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FixedPricePurchaseQuantityWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FixedPricePurchaseQuantityWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FixedPricePurchaseQuantityWhereInput>>>;
};

export type FloatFilterInput = {
  /** `boost` influences the weight of a field by boosting a match with a number (default: 1) — counts more towards the eventual relevance score which can be projected with `_score` — at query time. Note that `boost` cannot be a negative number. */
  boost: InputMaybe<Scalars['Float']['input']>;
  /** `eq` matches on an exact value, but the value is case-insensitive. */
  eq: InputMaybe<Scalars['Float']['input']>;
  /** `exist` matches results that have this field. */
  exist: InputMaybe<Scalars['Boolean']['input']>;
  /** `gt` retrieves results with matches that have a value which is `greater than` it. */
  gt: InputMaybe<Scalars['Float']['input']>;
  /** `gte` retrieves results with matches that have a value which is `greater than or equal to` it. */
  gte: InputMaybe<Scalars['Float']['input']>;
  /** `in` matches with 1 or more exact values in a list. Example: `in: ["word1", "word2", "this is a phrase"]` */
  in: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
  /** `lt` retrieves results with matches that have a value which is `lower than` it. */
  lt: InputMaybe<Scalars['Float']['input']>;
  /** `lte` retrieves results with matches that have a value which is `lower than or equal to` it. */
  lte: InputMaybe<Scalars['Float']['input']>;
  /** `not_eq` retrieves results not matching with an exact (but case-insensitive) value. */
  notEq: InputMaybe<Scalars['Float']['input']>;
  /** `not_in` returns results that do not match with 1 or more exact values in a list. Example: `not_in: ["word1", "word2", "this is a phrase"]` */
  notIn: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

/** A page which allows you to structure pages. */
export type FolderPage = IContent & IData & {
  __typename: 'FolderPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** A page which allows you to structure pages. */
export type FolderPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A page which allows you to structure pages. */
export type FolderPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A page which allows you to structure pages. */
export type FolderPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FolderPageAutocomplete = {
  __typename: 'FolderPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FolderPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FolderPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FolderPageFacet = {
  __typename: 'FolderPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FolderPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FolderPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FolderPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FolderPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FolderPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FolderPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FolderPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FolderPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FolderPageOutput = {
  __typename: 'FolderPageOutput';
  autocomplete: Maybe<FolderPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FolderPageFacet>;
  items: Maybe<Array<Maybe<FolderPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FolderPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FolderPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FolderPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FolderPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FolderPageWhereInput>>>;
};

export type FormContainerBlock = IContent & IData & {
  __typename: 'FormContainerBlock';
  AllowAnonymousSubmission: Maybe<Scalars['Bool']['output']>;
  AllowExposingDataFeeds: Maybe<Scalars['Bool']['output']>;
  AllowMultipleSubmission: Maybe<Scalars['Bool']['output']>;
  AllowToStoreSubmissionData: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConfirmationMessage: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ElementsArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FinalizedSubmissionRetentionPeriod: Maybe<Scalars['String']['output']>;
  FocusOnForm: Maybe<Scalars['Bool']['output']>;
  FormModel: Maybe<FormContainerBlockModel>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetadataAttribute: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PartialSubmissionRetentionPeriod: Maybe<Scalars['String']['output']>;
  RedirectToPage: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  ResetConfirmationMessage: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowNavigationBar: Maybe<Scalars['Bool']['output']>;
  ShowSummarizedData: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  SubmitSuccessMessage: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type FormContainerBlockConfirmationMessageArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockElementsAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockFinalizedSubmissionRetentionPeriodArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockMetadataAttributeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockPartialSubmissionRetentionPeriodArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockResetConfirmationMessageArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockSubmitSuccessMessageArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlockTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormContainerBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FormContainerBlockAutocomplete = {
  __typename: 'FormContainerBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  FormModel: Maybe<FormContainerBlockModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RedirectToPage: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FormContainerBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteRedirectToPageArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormContainerBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FormContainerBlockFacet = {
  __typename: 'FormContainerBlockFacet';
  AllowAnonymousSubmission: Maybe<Array<Maybe<StringFacet>>>;
  AllowExposingDataFeeds: Maybe<Array<Maybe<StringFacet>>>;
  AllowMultipleSubmission: Maybe<Array<Maybe<StringFacet>>>;
  AllowToStoreSubmissionData: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConfirmationMessage: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ElementsArea: Maybe<ContentAreaItemModelSearchFacet>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FinalizedSubmissionRetentionPeriod: Maybe<Array<Maybe<StringFacet>>>;
  FocusOnForm: Maybe<Array<Maybe<StringFacet>>>;
  FormModel: Maybe<FormContainerBlockModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetadataAttribute: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartialSubmissionRetentionPeriod: Maybe<Array<Maybe<StringFacet>>>;
  RedirectToPage: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  ResetConfirmationMessage: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowNavigationBar: Maybe<Array<Maybe<StringFacet>>>;
  ShowSummarizedData: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  SubmitSuccessMessage: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FormContainerBlockFacetAllowAnonymousSubmissionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetAllowExposingDataFeedsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetAllowMultipleSubmissionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetAllowToStoreSubmissionDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormContainerBlockFacetConfirmationMessageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormContainerBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetFinalizedSubmissionRetentionPeriodArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetFocusOnFormArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetMetadataAttributeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetPartialSubmissionRetentionPeriodArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetRedirectToPageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetResetConfirmationMessageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormContainerBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetShowNavigationBarArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetShowSummarizedDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormContainerBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormContainerBlockFacetSubmitSuccessMessageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormContainerBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FormContainerBlockModel = {
  __typename: 'FormContainerBlockModel';
  Template: Maybe<Scalars['String']['output']>;
};

export type FormContainerBlockModelAutocomplete = {
  __typename: 'FormContainerBlockModelAutocomplete';
  Template: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FormContainerBlockModelAutocompleteTemplateArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FormContainerBlockModelFacet = {
  __typename: 'FormContainerBlockModelFacet';
  Template: Maybe<Array<Maybe<StringFacet>>>;
};


export type FormContainerBlockModelFacetTemplateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FormContainerBlockModelOrderByInput = {
  Template: InputMaybe<OrderBy>;
};

export type FormContainerBlockModelWhereInput = {
  Template: InputMaybe<StringFilterInput>;
};

export type FormContainerBlockOrderByInput = {
  AllowAnonymousSubmission: InputMaybe<OrderBy>;
  AllowExposingDataFeeds: InputMaybe<OrderBy>;
  AllowMultipleSubmission: InputMaybe<OrderBy>;
  AllowToStoreSubmissionData: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConfirmationMessage: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ElementsArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FinalizedSubmissionRetentionPeriod: InputMaybe<OrderBy>;
  FocusOnForm: InputMaybe<OrderBy>;
  FormModel: InputMaybe<FormContainerBlockModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetadataAttribute: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartialSubmissionRetentionPeriod: InputMaybe<OrderBy>;
  RedirectToPage: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  ResetConfirmationMessage: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowNavigationBar: InputMaybe<OrderBy>;
  ShowSummarizedData: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  SubmitSuccessMessage: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FormContainerBlockOutput = {
  __typename: 'FormContainerBlockOutput';
  autocomplete: Maybe<FormContainerBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FormContainerBlockFacet>;
  items: Maybe<Array<Maybe<FormContainerBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FormContainerBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FormContainerBlockWhereInput = {
  AllowAnonymousSubmission: InputMaybe<BoolFilterInput>;
  AllowExposingDataFeeds: InputMaybe<BoolFilterInput>;
  AllowMultipleSubmission: InputMaybe<BoolFilterInput>;
  AllowToStoreSubmissionData: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConfirmationMessage: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ElementsArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FinalizedSubmissionRetentionPeriod: InputMaybe<SearchableStringFilterInput>;
  FocusOnForm: InputMaybe<BoolFilterInput>;
  FormModel: InputMaybe<FormContainerBlockModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetadataAttribute: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartialSubmissionRetentionPeriod: InputMaybe<SearchableStringFilterInput>;
  RedirectToPage: InputMaybe<StringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  ResetConfirmationMessage: InputMaybe<SearchableStringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowNavigationBar: InputMaybe<BoolFilterInput>;
  ShowSummarizedData: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  SubmitSuccessMessage: InputMaybe<SearchableStringFilterInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FormContainerBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FormContainerBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FormContainerBlockWhereInput>>>;
};

export type FormStepBlock = IContent & IData & {
  __typename: 'FormStepBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AttachedContentLink: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DependCondition: Maybe<Scalars['Int']['output']>;
  DependField: Maybe<ContentModelReference>;
  DependValue: Maybe<Scalars['String']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type FormStepBlockDependValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormStepBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormStepBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormStepBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormStepBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type FormStepBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FormStepBlockAutocomplete = {
  __typename: 'FormStepBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AttachedContentLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DependField: Maybe<ContentModelReferenceAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FormStepBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteAttachedContentLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FormStepBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FormStepBlockFacet = {
  __typename: 'FormStepBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AttachedContentLink: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DependCondition: Maybe<Array<Maybe<NumberFacet>>>;
  DependField: Maybe<ContentModelReferenceFacet>;
  DependValue: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FormStepBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetAttachedContentLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormStepBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormStepBlockFacetDependConditionArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FormStepBlockFacetDependValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormStepBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormStepBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FormStepBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FormStepBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FormStepBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  AttachedContentLink: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DependCondition: InputMaybe<OrderBy>;
  DependField: InputMaybe<ContentModelReferenceOrderByInput>;
  DependValue: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FormStepBlockOutput = {
  __typename: 'FormStepBlockOutput';
  autocomplete: Maybe<FormStepBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FormStepBlockFacet>;
  items: Maybe<Array<Maybe<FormStepBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FormStepBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FormStepBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  AttachedContentLink: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DependCondition: InputMaybe<IntFilterInput>;
  DependField: InputMaybe<ContentModelReferenceWhereInput>;
  DependValue: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FormStepBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FormStepBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FormStepBlockWhereInput>>>;
};

/** Used for PDF file */
export type FoundationPdfFile = IContent & IData & {
  __typename: 'FoundationPdfFile';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayAsPreview: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** The height of PDF preview embed (px) */
  Height: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowDescription: Maybe<Scalars['Bool']['output']>;
  ShowIcon: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for PDF file */
export type FoundationPdfFileContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for PDF file */
export type FoundationPdfFileDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for PDF file */
export type FoundationPdfFileNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for PDF file */
export type FoundationPdfFileTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for PDF file */
export type FoundationPdfFile_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for PDF file */
export type FoundationPdfFile_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type FoundationPdfFileAutocomplete = {
  __typename: 'FoundationPdfFileAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type FoundationPdfFileAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type FoundationPdfFileAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type FoundationPdfFileFacet = {
  __typename: 'FoundationPdfFileFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsPreview: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowDescription: Maybe<Array<Maybe<StringFacet>>>;
  ShowIcon: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type FoundationPdfFileFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FoundationPdfFileFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FoundationPdfFileFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetDisplayAsPreviewArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type FoundationPdfFileFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FoundationPdfFileFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetShowDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetShowIconArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FoundationPdfFileFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type FoundationPdfFileFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type FoundationPdfFileFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type FoundationPdfFileOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DisplayAsPreview: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Height: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowDescription: InputMaybe<OrderBy>;
  ShowIcon: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type FoundationPdfFileOutput = {
  __typename: 'FoundationPdfFileOutput';
  autocomplete: Maybe<FoundationPdfFileAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<FoundationPdfFileFacet>;
  items: Maybe<Array<Maybe<FoundationPdfFile>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type FoundationPdfFileOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type FoundationPdfFileWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayAsPreview: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Height: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowDescription: InputMaybe<BoolFilterInput>;
  ShowIcon: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<FoundationPdfFileWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<FoundationPdfFileWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<FoundationPdfFileWhereInput>>>;
};

/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundle = IContent & IData & {
  __typename: 'GenericBundle';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericBundleAssociations>;
  AssociationsTitle: Maybe<Scalars['String']['output']>;
  BundleReference: Maybe<ContentModelReference>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<GenericBundleCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LongDescription: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  NewArrival: Maybe<Scalars['Bool']['output']>;
  OnSale: Maybe<Scalars['Bool']['output']>;
  ParentEntries: Maybe<GenericBundleRelations>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<GenericBundleSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleAssociationsTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleLongDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundleScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundle_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Displays a bundle, which is collection of individual fashion variants. */
export type GenericBundle_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GenericBundleAssociations = {
  __typename: 'GenericBundleAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericBundleAssociationsAutocomplete = {
  __typename: 'GenericBundleAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericBundleAssociationsFacet = {
  __typename: 'GenericBundleAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericBundleAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericBundleAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericBundleAutocomplete = {
  __typename: 'GenericBundleAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericBundleAssociationsAutocomplete>;
  BundleReference: Maybe<ContentModelReferenceAutocomplete>;
  Categories: Maybe<GenericBundleCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<GenericBundleRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<GenericBundleSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericBundleAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericBundleCategories = {
  __typename: 'GenericBundleCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericBundleCategoriesAutocomplete = {
  __typename: 'GenericBundleCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericBundleCategoriesFacet = {
  __typename: 'GenericBundleCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericBundleCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericBundleCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericBundleFacet = {
  __typename: 'GenericBundleFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<GenericBundleAssociationsFacet>;
  AssociationsTitle: Maybe<Array<Maybe<StringFacet>>>;
  BundleReference: Maybe<ContentModelReferenceFacet>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<GenericBundleCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LongDescription: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NewArrival: Maybe<Array<Maybe<StringFacet>>>;
  OnSale: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<GenericBundleRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<GenericBundleSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericBundleFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetAssociationsTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericBundleFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericBundleFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericBundleFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetLongDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericBundleFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetNewArrivalArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetOnSaleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericBundleFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericBundleFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericBundleFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericBundleOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<GenericBundleAssociationsOrderByInput>;
  AssociationsTitle: InputMaybe<OrderBy>;
  BundleReference: InputMaybe<ContentModelReferenceOrderByInput>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<GenericBundleCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LongDescription: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  NewArrival: InputMaybe<OrderBy>;
  OnSale: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<GenericBundleRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<GenericBundleSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GenericBundleOutput = {
  __typename: 'GenericBundleOutput';
  autocomplete: Maybe<GenericBundleAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GenericBundleFacet>;
  items: Maybe<Array<Maybe<GenericBundle>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GenericBundleOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GenericBundleRelations = {
  __typename: 'GenericBundleRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericBundleRelationsAutocomplete = {
  __typename: 'GenericBundleRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericBundleRelationsFacet = {
  __typename: 'GenericBundleRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericBundleRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericBundleRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericBundleSeoInformation = {
  __typename: 'GenericBundleSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type GenericBundleSeoInformationAutocomplete = {
  __typename: 'GenericBundleSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericBundleSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericBundleSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericBundleSeoInformationFacet = {
  __typename: 'GenericBundleSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericBundleSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericBundleSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericBundleSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type GenericBundleSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type GenericBundleWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<GenericBundleAssociationsWhereInput>;
  AssociationsTitle: InputMaybe<SearchableStringFilterInput>;
  BundleReference: InputMaybe<ContentModelReferenceWhereInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<GenericBundleCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LongDescription: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NewArrival: InputMaybe<BoolFilterInput>;
  OnSale: InputMaybe<BoolFilterInput>;
  ParentEntries: InputMaybe<GenericBundleRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<GenericBundleSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GenericBundleWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GenericBundleWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GenericBundleWhereInput>>>;
};

export type GenericNode = IContent & IData & {
  __typename: 'GenericNode';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<GenericNodeCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DefaultTemplate: Maybe<Scalars['String']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FeaturedProducts: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LongName: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PartialPageSize: Maybe<Scalars['Int']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<GenericNodeSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Teaser: Maybe<Scalars['String']['output']>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type GenericNodeCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeDefaultTemplateArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeFeaturedProductsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeLongNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeTeaserArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNodeTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNode_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericNode_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GenericNodeAutocomplete = {
  __typename: 'GenericNodeAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<GenericNodeCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<GenericNodeSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericNodeAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericNodeCategories = {
  __typename: 'GenericNodeCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericNodeCategoriesAutocomplete = {
  __typename: 'GenericNodeCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericNodeCategoriesFacet = {
  __typename: 'GenericNodeCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericNodeCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericNodeCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericNodeFacet = {
  __typename: 'GenericNodeFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<GenericNodeCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DefaultTemplate: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FeaturedProducts: Maybe<ContentAreaItemModelSearchFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LongName: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartialPageSize: Maybe<Array<Maybe<NumberFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<GenericNodeSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Teaser: Maybe<Array<Maybe<StringFacet>>>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericNodeFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericNodeFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericNodeFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericNodeFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetDefaultTemplateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetLongNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericNodeFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetPartialPageSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericNodeFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericNodeFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericNodeFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericNodeFacetTeaserArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericNodeOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<GenericNodeCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DefaultTemplate: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FeaturedProducts: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LongName: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartialPageSize: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<GenericNodeSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Teaser: InputMaybe<OrderBy>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GenericNodeOutput = {
  __typename: 'GenericNodeOutput';
  autocomplete: Maybe<GenericNodeAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GenericNodeFacet>;
  items: Maybe<Array<Maybe<GenericNode>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GenericNodeOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GenericNodeSeoInformation = {
  __typename: 'GenericNodeSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type GenericNodeSeoInformationAutocomplete = {
  __typename: 'GenericNodeSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericNodeSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericNodeSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericNodeSeoInformationFacet = {
  __typename: 'GenericNodeSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericNodeSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericNodeSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericNodeSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type GenericNodeSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type GenericNodeWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<GenericNodeCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DefaultTemplate: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FeaturedProducts: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LongName: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartialPageSize: InputMaybe<IntFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<GenericNodeSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Teaser: InputMaybe<SearchableStringFilterInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GenericNodeWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GenericNodeWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GenericNodeWhereInput>>>;
};

export type GenericPackage = IContent & IData & {
  __typename: 'GenericPackage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericPackageAssociations>;
  /** This is title of the Associations tab. */
  AssociationsTitle: Maybe<Scalars['String']['output']>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<GenericPackageCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  /** This will display the content area. */
  ContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  InventoryReference: Maybe<ContentModelReference>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LongDescription: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MaxQuantity: Maybe<Scalars['Float']['output']>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  MinQuantity: Maybe<Scalars['Float']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  NewArrival: Maybe<Scalars['Bool']['output']>;
  OnSale: Maybe<Scalars['Bool']['output']>;
  PackageReference: Maybe<ContentModelReference>;
  ParentEntries: Maybe<GenericPackageRelations>;
  ParentLink: Maybe<ContentModelReference>;
  PriceReference: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<GenericPackageSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  ShippingDimensions: Maybe<GenericPackageShippingDimensions>;
  ShippingPackageId: Maybe<Scalars['Int']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TaxCategoryId: Maybe<Scalars['Int']['output']>;
  TrackInventory: Maybe<Scalars['Bool']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Weight: Maybe<Scalars['Float']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type GenericPackageAssociationsTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageLongDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackageScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type GenericPackage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GenericPackageAssociations = {
  __typename: 'GenericPackageAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericPackageAssociationsAutocomplete = {
  __typename: 'GenericPackageAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericPackageAssociationsFacet = {
  __typename: 'GenericPackageAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericPackageAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericPackageAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericPackageAutocomplete = {
  __typename: 'GenericPackageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericPackageAssociationsAutocomplete>;
  Categories: Maybe<GenericPackageCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  InventoryReference: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  PackageReference: Maybe<ContentModelReferenceAutocomplete>;
  ParentEntries: Maybe<GenericPackageRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  PriceReference: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<GenericPackageSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericPackageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericPackageCategories = {
  __typename: 'GenericPackageCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericPackageCategoriesAutocomplete = {
  __typename: 'GenericPackageCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericPackageCategoriesFacet = {
  __typename: 'GenericPackageCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericPackageCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericPackageCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericPackageFacet = {
  __typename: 'GenericPackageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<GenericPackageAssociationsFacet>;
  AssociationsTitle: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<GenericPackageCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  InventoryReference: Maybe<ContentModelReferenceFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LongDescription: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  MinQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NewArrival: Maybe<Array<Maybe<StringFacet>>>;
  OnSale: Maybe<Array<Maybe<StringFacet>>>;
  PackageReference: Maybe<ContentModelReferenceFacet>;
  ParentEntries: Maybe<GenericPackageRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PriceReference: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<GenericPackageSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  ShippingDimensions: Maybe<GenericPackageShippingDimensionsFacet>;
  ShippingPackageId: Maybe<Array<Maybe<NumberFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TaxCategoryId: Maybe<Array<Maybe<NumberFacet>>>;
  TrackInventory: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Weight: Maybe<Array<Maybe<NumberFacet>>>;
};


export type GenericPackageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetAssociationsTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericPackageFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericPackageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetLongDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetMaxQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageFacetMinQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetNewArrivalArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetOnSaleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericPackageFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetShippingPackageIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericPackageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericPackageFacetTaxCategoryIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageFacetTrackInventoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageFacetWeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type GenericPackageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<GenericPackageAssociationsOrderByInput>;
  AssociationsTitle: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<GenericPackageCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  InventoryReference: InputMaybe<ContentModelReferenceOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LongDescription: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxQuantity: InputMaybe<OrderBy>;
  MetaClassId: InputMaybe<OrderBy>;
  MinQuantity: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  NewArrival: InputMaybe<OrderBy>;
  OnSale: InputMaybe<OrderBy>;
  PackageReference: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentEntries: InputMaybe<GenericPackageRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PriceReference: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<GenericPackageSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  ShippingDimensions: InputMaybe<GenericPackageShippingDimensionsOrderByInput>;
  ShippingPackageId: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TaxCategoryId: InputMaybe<OrderBy>;
  TrackInventory: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Weight: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GenericPackageOutput = {
  __typename: 'GenericPackageOutput';
  autocomplete: Maybe<GenericPackageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GenericPackageFacet>;
  items: Maybe<Array<Maybe<GenericPackage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GenericPackageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GenericPackageRelations = {
  __typename: 'GenericPackageRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericPackageRelationsAutocomplete = {
  __typename: 'GenericPackageRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericPackageRelationsFacet = {
  __typename: 'GenericPackageRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericPackageRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericPackageRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericPackageSeoInformation = {
  __typename: 'GenericPackageSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type GenericPackageSeoInformationAutocomplete = {
  __typename: 'GenericPackageSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericPackageSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericPackageSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericPackageSeoInformationFacet = {
  __typename: 'GenericPackageSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericPackageSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericPackageSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericPackageSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type GenericPackageSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type GenericPackageShippingDimensions = {
  __typename: 'GenericPackageShippingDimensions';
  Height: Maybe<Scalars['Float']['output']>;
  Length: Maybe<Scalars['Float']['output']>;
  Width: Maybe<Scalars['Float']['output']>;
};

export type GenericPackageShippingDimensionsFacet = {
  __typename: 'GenericPackageShippingDimensionsFacet';
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  Length: Maybe<Array<Maybe<NumberFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type GenericPackageShippingDimensionsFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageShippingDimensionsFacetLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericPackageShippingDimensionsFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type GenericPackageShippingDimensionsOrderByInput = {
  Height: InputMaybe<OrderBy>;
  Length: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
};

export type GenericPackageShippingDimensionsWhereInput = {
  Height: InputMaybe<FloatFilterInput>;
  Length: InputMaybe<FloatFilterInput>;
  Width: InputMaybe<FloatFilterInput>;
};

export type GenericPackageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<GenericPackageAssociationsWhereInput>;
  AssociationsTitle: InputMaybe<SearchableStringFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<GenericPackageCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  InventoryReference: InputMaybe<ContentModelReferenceWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LongDescription: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxQuantity: InputMaybe<FloatFilterInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  MinQuantity: InputMaybe<FloatFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NewArrival: InputMaybe<BoolFilterInput>;
  OnSale: InputMaybe<BoolFilterInput>;
  PackageReference: InputMaybe<ContentModelReferenceWhereInput>;
  ParentEntries: InputMaybe<GenericPackageRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PriceReference: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<GenericPackageSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  ShippingDimensions: InputMaybe<GenericPackageShippingDimensionsWhereInput>;
  ShippingPackageId: InputMaybe<IntFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TaxCategoryId: InputMaybe<IntFilterInput>;
  TrackInventory: InputMaybe<BoolFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Weight: InputMaybe<FloatFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GenericPackageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GenericPackageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GenericPackageWhereInput>>>;
};

/** Generic product supports mutiple products */
export type GenericProduct = IContent & IData & {
  __typename: 'GenericProduct';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericProductAssociations>;
  AssociationsTitle: Maybe<Scalars['String']['output']>;
  /** Boost product in search results with default sort */
  Boost: Maybe<Scalars['Int']['output']>;
  Brand: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to hide product in search results. */
  Bury: Maybe<Scalars['Bool']['output']>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<GenericProductCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Department: Maybe<Scalars['String']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LegalDisclaimer: Maybe<Scalars['String']['output']>;
  LongDescription: Maybe<Scalars['String']['output']>;
  Manufacturer: Maybe<Scalars['String']['output']>;
  ManufacturerPartsWarrantyDescription: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Model: Maybe<Scalars['String']['output']>;
  ModelYear: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  NewArrival: Maybe<Scalars['Bool']['output']>;
  OnSale: Maybe<Scalars['Bool']['output']>;
  ParentEntries: Maybe<GenericProductRelations>;
  ParentLink: Maybe<ContentModelReference>;
  ProductGroup: Maybe<Scalars['String']['output']>;
  ProductStatus: Maybe<Scalars['String']['output']>;
  ProductTeaser: Maybe<Scalars['String']['output']>;
  ProductTypeName: Maybe<Scalars['String']['output']>;
  ProductTypeSubcategory: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<GenericProductSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to show recommendations. */
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  Sizing: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  VariantsReference: Maybe<ContentModelReference>;
  Warranty: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Generic product supports mutiple products */
export type GenericProductAssociationsTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductBrandArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductDepartmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductLegalDisclaimerArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductLongDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductManufacturerArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductManufacturerPartsWarrantyDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductModelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductModelYearArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductProductGroupArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductProductStatusArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductProductTeaserArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductProductTypeNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductProductTypeSubcategoryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductSizingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProductWarrantyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProduct_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic product supports mutiple products */
export type GenericProduct_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GenericProductAssociations = {
  __typename: 'GenericProductAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericProductAssociationsAutocomplete = {
  __typename: 'GenericProductAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericProductAssociationsFacet = {
  __typename: 'GenericProductAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericProductAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericProductAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericProductAutocomplete = {
  __typename: 'GenericProductAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericProductAssociationsAutocomplete>;
  Categories: Maybe<GenericProductCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<GenericProductRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<GenericProductSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  VariantsReference: Maybe<ContentModelReferenceAutocomplete>;
};


export type GenericProductAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericProductCategories = {
  __typename: 'GenericProductCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericProductCategoriesAutocomplete = {
  __typename: 'GenericProductCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericProductCategoriesFacet = {
  __typename: 'GenericProductCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericProductCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericProductCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericProductFacet = {
  __typename: 'GenericProductFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<GenericProductAssociationsFacet>;
  AssociationsTitle: Maybe<Array<Maybe<StringFacet>>>;
  Boost: Maybe<Array<Maybe<NumberFacet>>>;
  Brand: Maybe<Array<Maybe<StringFacet>>>;
  Bury: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<GenericProductCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Department: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LegalDisclaimer: Maybe<Array<Maybe<StringFacet>>>;
  LongDescription: Maybe<Array<Maybe<StringFacet>>>;
  Manufacturer: Maybe<Array<Maybe<StringFacet>>>;
  ManufacturerPartsWarrantyDescription: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Model: Maybe<Array<Maybe<StringFacet>>>;
  ModelYear: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NewArrival: Maybe<Array<Maybe<StringFacet>>>;
  OnSale: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<GenericProductRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  ProductGroup: Maybe<Array<Maybe<StringFacet>>>;
  ProductStatus: Maybe<Array<Maybe<StringFacet>>>;
  ProductTeaser: Maybe<Array<Maybe<StringFacet>>>;
  ProductTypeName: Maybe<Array<Maybe<StringFacet>>>;
  ProductTypeSubcategory: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<GenericProductSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  Sizing: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VariantsReference: Maybe<ContentModelReferenceFacet>;
  Warranty: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericProductFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetAssociationsTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetBoostArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericProductFacetBrandArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetBuryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericProductFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericProductFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericProductFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetDepartmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetLegalDisclaimerArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetLongDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetManufacturerArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetManufacturerPartsWarrantyDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericProductFacetModelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetModelYearArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetNewArrivalArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetOnSaleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetProductGroupArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetProductStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetProductTeaserArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetProductTypeNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetProductTypeSubcategoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericProductFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetSizingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericProductFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericProductFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductFacetWarrantyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericProductOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<GenericProductAssociationsOrderByInput>;
  AssociationsTitle: InputMaybe<OrderBy>;
  Boost: InputMaybe<OrderBy>;
  Brand: InputMaybe<OrderBy>;
  Bury: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<GenericProductCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Department: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LegalDisclaimer: InputMaybe<OrderBy>;
  LongDescription: InputMaybe<OrderBy>;
  Manufacturer: InputMaybe<OrderBy>;
  ManufacturerPartsWarrantyDescription: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Model: InputMaybe<OrderBy>;
  ModelYear: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  NewArrival: InputMaybe<OrderBy>;
  OnSale: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<GenericProductRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ProductGroup: InputMaybe<OrderBy>;
  ProductStatus: InputMaybe<OrderBy>;
  ProductTeaser: InputMaybe<OrderBy>;
  ProductTypeName: InputMaybe<OrderBy>;
  ProductTypeSubcategory: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<GenericProductSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  Sizing: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VariantsReference: InputMaybe<ContentModelReferenceOrderByInput>;
  Warranty: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GenericProductOutput = {
  __typename: 'GenericProductOutput';
  autocomplete: Maybe<GenericProductAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GenericProductFacet>;
  items: Maybe<Array<Maybe<GenericProduct>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GenericProductOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GenericProductRelations = {
  __typename: 'GenericProductRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericProductRelationsAutocomplete = {
  __typename: 'GenericProductRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericProductRelationsFacet = {
  __typename: 'GenericProductRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericProductRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericProductRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericProductSeoInformation = {
  __typename: 'GenericProductSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type GenericProductSeoInformationAutocomplete = {
  __typename: 'GenericProductSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericProductSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericProductSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericProductSeoInformationFacet = {
  __typename: 'GenericProductSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericProductSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericProductSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericProductSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type GenericProductSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type GenericProductWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<GenericProductAssociationsWhereInput>;
  AssociationsTitle: InputMaybe<SearchableStringFilterInput>;
  Boost: InputMaybe<IntFilterInput>;
  Brand: InputMaybe<SearchableStringFilterInput>;
  Bury: InputMaybe<BoolFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<GenericProductCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Department: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LegalDisclaimer: InputMaybe<SearchableStringFilterInput>;
  LongDescription: InputMaybe<SearchableStringFilterInput>;
  Manufacturer: InputMaybe<SearchableStringFilterInput>;
  ManufacturerPartsWarrantyDescription: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Model: InputMaybe<SearchableStringFilterInput>;
  ModelYear: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NewArrival: InputMaybe<BoolFilterInput>;
  OnSale: InputMaybe<BoolFilterInput>;
  ParentEntries: InputMaybe<GenericProductRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ProductGroup: InputMaybe<SearchableStringFilterInput>;
  ProductStatus: InputMaybe<SearchableStringFilterInput>;
  ProductTeaser: InputMaybe<SearchableStringFilterInput>;
  ProductTypeName: InputMaybe<SearchableStringFilterInput>;
  ProductTypeSubcategory: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<GenericProductSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  Sizing: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VariantsReference: InputMaybe<ContentModelReferenceWhereInput>;
  Warranty: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GenericProductWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GenericProductWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GenericProductWhereInput>>>;
};

/** Generic variant supports multiple variation types */
export type GenericVariant = IContent & IData & {
  __typename: 'GenericVariant';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericVariantAssociations>;
  AssociationsTitle: Maybe<Scalars['String']['output']>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<GenericVariantCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  Color: Maybe<Scalars['String']['output']>;
  ContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  InventoryReference: Maybe<ContentModelReference>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MaxQuantity: Maybe<Scalars['Float']['output']>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  MinQuantity: Maybe<Scalars['Float']['output']>;
  Mpn: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  PackageQuantity: Maybe<Scalars['String']['output']>;
  ParentEntries: Maybe<GenericVariantRelations>;
  ParentLink: Maybe<ContentModelReference>;
  PartNumber: Maybe<Scalars['String']['output']>;
  PriceReference: Maybe<ContentModelReference>;
  RegionCode: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScriptFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  Scripts: Maybe<Scalars['String']['output']>;
  SeoInformation: Maybe<GenericVariantSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  ShippingDimensions: Maybe<GenericVariantShippingDimensions>;
  ShippingPackageId: Maybe<Scalars['Int']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  Size: Maybe<Scalars['String']['output']>;
  Sku: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  SubscriptionLength: Maybe<Scalars['String']['output']>;
  TaxCategoryId: Maybe<Scalars['Int']['output']>;
  TrackInventory: Maybe<Scalars['Bool']['output']>;
  Upc: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  VirtualProductMode: Maybe<Scalars['String']['output']>;
  VirtualProductRole: Maybe<Scalars['String']['output']>;
  Weight: Maybe<Scalars['Float']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantAssociationsTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantCssArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantMpnArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantPackageQuantityArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantPartNumberArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantRegionCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantScriptsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantSkuArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantSubscriptionLengthArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantUpcArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantVirtualProductModeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariantVirtualProductRoleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariant_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Generic variant supports multiple variation types */
export type GenericVariant_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GenericVariantAssociations = {
  __typename: 'GenericVariantAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericVariantAssociationsAutocomplete = {
  __typename: 'GenericVariantAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericVariantAssociationsFacet = {
  __typename: 'GenericVariantAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericVariantAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericVariantAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericVariantAutocomplete = {
  __typename: 'GenericVariantAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<GenericVariantAssociationsAutocomplete>;
  Categories: Maybe<GenericVariantCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  InventoryReference: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<GenericVariantRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  PriceReference: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ScriptFiles: Maybe<LinkItemNodeAutocomplete>;
  SeoInformation: Maybe<GenericVariantSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericVariantAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericVariantCategories = {
  __typename: 'GenericVariantCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericVariantCategoriesAutocomplete = {
  __typename: 'GenericVariantCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericVariantCategoriesFacet = {
  __typename: 'GenericVariantCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericVariantCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericVariantCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericVariantFacet = {
  __typename: 'GenericVariantFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<GenericVariantAssociationsFacet>;
  AssociationsTitle: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<GenericVariantCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  Color: Maybe<Array<Maybe<StringFacet>>>;
  ContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  InventoryReference: Maybe<ContentModelReferenceFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  MinQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  Mpn: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PackageQuantity: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<GenericVariantRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartNumber: Maybe<Array<Maybe<StringFacet>>>;
  PriceReference: Maybe<ContentModelReferenceFacet>;
  RegionCode: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScriptFiles: Maybe<LinkItemNodeFacet>;
  Scripts: Maybe<Array<Maybe<StringFacet>>>;
  SeoInformation: Maybe<GenericVariantSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  ShippingDimensions: Maybe<GenericVariantShippingDimensionsFacet>;
  ShippingPackageId: Maybe<Array<Maybe<NumberFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  Size: Maybe<Array<Maybe<StringFacet>>>;
  Sku: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  SubscriptionLength: Maybe<Array<Maybe<StringFacet>>>;
  TaxCategoryId: Maybe<Array<Maybe<NumberFacet>>>;
  TrackInventory: Maybe<Array<Maybe<StringFacet>>>;
  Upc: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VirtualProductMode: Maybe<Array<Maybe<StringFacet>>>;
  VirtualProductRole: Maybe<Array<Maybe<StringFacet>>>;
  Weight: Maybe<Array<Maybe<NumberFacet>>>;
};


export type GenericVariantFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetAssociationsTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericVariantFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericVariantFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetMaxQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantFacetMinQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantFacetMpnArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetPackageQuantityArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetPartNumberArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetRegionCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericVariantFacetScriptsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetShippingPackageIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetSkuArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericVariantFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GenericVariantFacetSubscriptionLengthArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetTaxCategoryIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantFacetTrackInventoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetUpcArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetVirtualProductModeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetVirtualProductRoleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantFacetWeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type GenericVariantOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<GenericVariantAssociationsOrderByInput>;
  AssociationsTitle: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<GenericVariantCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  Color: InputMaybe<OrderBy>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Description: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  InventoryReference: InputMaybe<ContentModelReferenceOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxQuantity: InputMaybe<OrderBy>;
  MetaClassId: InputMaybe<OrderBy>;
  MinQuantity: InputMaybe<OrderBy>;
  Mpn: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  PackageQuantity: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<GenericVariantRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartNumber: InputMaybe<OrderBy>;
  PriceReference: InputMaybe<ContentModelReferenceOrderByInput>;
  RegionCode: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScriptFiles: InputMaybe<LinkItemNodeOrderByInput>;
  Scripts: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<GenericVariantSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  ShippingDimensions: InputMaybe<GenericVariantShippingDimensionsOrderByInput>;
  ShippingPackageId: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  Size: InputMaybe<OrderBy>;
  Sku: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  SubscriptionLength: InputMaybe<OrderBy>;
  TaxCategoryId: InputMaybe<OrderBy>;
  TrackInventory: InputMaybe<OrderBy>;
  Upc: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VirtualProductMode: InputMaybe<OrderBy>;
  VirtualProductRole: InputMaybe<OrderBy>;
  Weight: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GenericVariantOutput = {
  __typename: 'GenericVariantOutput';
  autocomplete: Maybe<GenericVariantAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GenericVariantFacet>;
  items: Maybe<Array<Maybe<GenericVariant>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GenericVariantOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GenericVariantRelations = {
  __typename: 'GenericVariantRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type GenericVariantRelationsAutocomplete = {
  __typename: 'GenericVariantRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type GenericVariantRelationsFacet = {
  __typename: 'GenericVariantRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type GenericVariantRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type GenericVariantRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type GenericVariantSeoInformation = {
  __typename: 'GenericVariantSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type GenericVariantSeoInformationAutocomplete = {
  __typename: 'GenericVariantSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GenericVariantSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GenericVariantSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GenericVariantSeoInformationFacet = {
  __typename: 'GenericVariantSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type GenericVariantSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GenericVariantSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GenericVariantSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type GenericVariantSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type GenericVariantShippingDimensions = {
  __typename: 'GenericVariantShippingDimensions';
  Height: Maybe<Scalars['Float']['output']>;
  Length: Maybe<Scalars['Float']['output']>;
  Width: Maybe<Scalars['Float']['output']>;
};

export type GenericVariantShippingDimensionsFacet = {
  __typename: 'GenericVariantShippingDimensionsFacet';
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  Length: Maybe<Array<Maybe<NumberFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type GenericVariantShippingDimensionsFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantShippingDimensionsFacetLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GenericVariantShippingDimensionsFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type GenericVariantShippingDimensionsOrderByInput = {
  Height: InputMaybe<OrderBy>;
  Length: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
};

export type GenericVariantShippingDimensionsWhereInput = {
  Height: InputMaybe<FloatFilterInput>;
  Length: InputMaybe<FloatFilterInput>;
  Width: InputMaybe<FloatFilterInput>;
};

export type GenericVariantWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<GenericVariantAssociationsWhereInput>;
  AssociationsTitle: InputMaybe<SearchableStringFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<GenericVariantCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  Color: InputMaybe<SearchableStringFilterInput>;
  ContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<SearchableStringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  InventoryReference: InputMaybe<ContentModelReferenceWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxQuantity: InputMaybe<FloatFilterInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  MinQuantity: InputMaybe<FloatFilterInput>;
  Mpn: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PackageQuantity: InputMaybe<SearchableStringFilterInput>;
  ParentEntries: InputMaybe<GenericVariantRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartNumber: InputMaybe<SearchableStringFilterInput>;
  PriceReference: InputMaybe<ContentModelReferenceWhereInput>;
  RegionCode: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScriptFiles: InputMaybe<LinkItemNodeWhereInput>;
  Scripts: InputMaybe<SearchableStringFilterInput>;
  SeoInformation: InputMaybe<GenericVariantSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  ShippingDimensions: InputMaybe<GenericVariantShippingDimensionsWhereInput>;
  ShippingPackageId: InputMaybe<IntFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  Size: InputMaybe<SearchableStringFilterInput>;
  Sku: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  SubscriptionLength: InputMaybe<SearchableStringFilterInput>;
  TaxCategoryId: InputMaybe<IntFilterInput>;
  TrackInventory: InputMaybe<BoolFilterInput>;
  Upc: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VirtualProductMode: InputMaybe<SearchableStringFilterInput>;
  VirtualProductRole: InputMaybe<SearchableStringFilterInput>;
  Weight: InputMaybe<FloatFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GenericVariantWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GenericVariantWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GenericVariantWhereInput>>>;
};

/** This page displays all gift cards belonging to an user */
export type GiftCardPage = IContent & IData & {
  __typename: 'GiftCardPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** This page displays all gift cards belonging to an user */
export type GiftCardPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GiftCardPageAutocomplete = {
  __typename: 'GiftCardPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GiftCardPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GiftCardPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GiftCardPageFacet = {
  __typename: 'GiftCardPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type GiftCardPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GiftCardPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GiftCardPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GiftCardPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GiftCardPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GiftCardPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GiftCardPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GiftCardPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GiftCardPageOutput = {
  __typename: 'GiftCardPageOutput';
  autocomplete: Maybe<GiftCardPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GiftCardPageFacet>;
  items: Maybe<Array<Maybe<GiftCardPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GiftCardPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GiftCardPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GiftCardPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GiftCardPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GiftCardPageWhereInput>>>;
};

/** Display Google Maps */
export type GoogleMapsBlock = IContent & IData & {
  __typename: 'GoogleMapsBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApiKey: Maybe<Scalars['String']['output']>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Height: Maybe<Scalars['Float']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SearchTerm: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Display Google Maps */
export type GoogleMapsBlockApiKeyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlockSearchTermArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Google Maps */
export type GoogleMapsBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GoogleMapsBlockAutocomplete = {
  __typename: 'GoogleMapsBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GoogleMapsBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GoogleMapsBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GoogleMapsBlockFacet = {
  __typename: 'GoogleMapsBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApiKey: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SearchTerm: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type GoogleMapsBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetApiKeyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GoogleMapsBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GoogleMapsBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GoogleMapsBlockFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type GoogleMapsBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GoogleMapsBlockFacetSearchTermArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GoogleMapsBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GoogleMapsBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GoogleMapsBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GoogleMapsBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApiKey: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Height: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SearchTerm: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GoogleMapsBlockOutput = {
  __typename: 'GoogleMapsBlockOutput';
  autocomplete: Maybe<GoogleMapsBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GoogleMapsBlockFacet>;
  items: Maybe<Array<Maybe<GoogleMapsBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GoogleMapsBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GoogleMapsBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApiKey: InputMaybe<SearchableStringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Height: InputMaybe<FloatFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SearchTerm: InputMaybe<SearchableStringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GoogleMapsBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GoogleMapsBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GoogleMapsBlockWhereInput>>>;
};

/** Configures the properties of a group admission block view */
export type GroupAdmissionBlock = IContent & IData & {
  __typename: 'GroupAdmissionBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  GroupName: Maybe<Scalars['String']['output']>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the properties of a group admission block view */
export type GroupAdmissionBlockGroupNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group admission block view */
export type GroupAdmissionBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group admission block view */
export type GroupAdmissionBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group admission block view */
export type GroupAdmissionBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group admission block view */
export type GroupAdmissionBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GroupAdmissionBlockAutocomplete = {
  __typename: 'GroupAdmissionBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GroupAdmissionBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupAdmissionBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GroupAdmissionBlockFacet = {
  __typename: 'GroupAdmissionBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  GroupName: Maybe<Array<Maybe<StringFacet>>>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type GroupAdmissionBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupAdmissionBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupAdmissionBlockFacetGroupNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupAdmissionBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupAdmissionBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupAdmissionBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupAdmissionBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GroupAdmissionBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  GroupName: InputMaybe<OrderBy>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GroupAdmissionBlockOutput = {
  __typename: 'GroupAdmissionBlockOutput';
  autocomplete: Maybe<GroupAdmissionBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GroupAdmissionBlockFacet>;
  items: Maybe<Array<Maybe<GroupAdmissionBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GroupAdmissionBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupAdmissionBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  GroupName: InputMaybe<SearchableStringFilterInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GroupAdmissionBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GroupAdmissionBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GroupAdmissionBlockWhereInput>>>;
};

/** Configures the properties of a group creation block view */
export type GroupCreationBlock = IContent & IData & {
  __typename: 'GroupCreationBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the properties of a group creation block view */
export type GroupCreationBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group creation block view */
export type GroupCreationBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group creation block view */
export type GroupCreationBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a group creation block view */
export type GroupCreationBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type GroupCreationBlockAutocomplete = {
  __typename: 'GroupCreationBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type GroupCreationBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type GroupCreationBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type GroupCreationBlockFacet = {
  __typename: 'GroupCreationBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type GroupCreationBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupCreationBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupCreationBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupCreationBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupCreationBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type GroupCreationBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type GroupCreationBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type GroupCreationBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type GroupCreationBlockOutput = {
  __typename: 'GroupCreationBlockOutput';
  autocomplete: Maybe<GroupCreationBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<GroupCreationBlockFacet>;
  items: Maybe<Array<Maybe<GroupCreationBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type GroupCreationBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupCreationBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<GroupCreationBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<GroupCreationBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<GroupCreationBlockWhereInput>>>;
};

export type HcaptchaElementBlock = IContent & IData & {
  __typename: 'HcaptchaElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScoreThreshold: Maybe<Scalars['Float']['output']>;
  SecretKey: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  SiteKey: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type HcaptchaElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HcaptchaElementBlockSecretKeyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HcaptchaElementBlockSiteKeyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HcaptchaElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HcaptchaElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HcaptchaElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type HcaptchaElementBlockAutocomplete = {
  __typename: 'HcaptchaElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HcaptchaElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HcaptchaElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HcaptchaElementBlockFacet = {
  __typename: 'HcaptchaElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScoreThreshold: Maybe<Array<Maybe<NumberFacet>>>;
  SecretKey: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  SiteKey: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type HcaptchaElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HcaptchaElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HcaptchaElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HcaptchaElementBlockFacetScoreThresholdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type HcaptchaElementBlockFacetSecretKeyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetSiteKeyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HcaptchaElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HcaptchaElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HcaptchaElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HcaptchaElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScoreThreshold: InputMaybe<OrderBy>;
  SecretKey: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  SiteKey: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type HcaptchaElementBlockOutput = {
  __typename: 'HcaptchaElementBlockOutput';
  autocomplete: Maybe<HcaptchaElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<HcaptchaElementBlockFacet>;
  items: Maybe<Array<Maybe<HcaptchaElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type HcaptchaElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type HcaptchaElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScoreThreshold: InputMaybe<FloatFilterInput>;
  SecretKey: InputMaybe<SearchableStringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  SiteKey: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<HcaptchaElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<HcaptchaElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<HcaptchaElementBlockWhereInput>>>;
};

/** Used to insert a health chat bot */
export type HealthChatbotBlock = IContent & IData & {
  __typename: 'HealthChatbotBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  /** The token that is used to connect to the bot framework. Get this from > Health Bot Service > Integration > Channels > DirectLine */
  DirectLineToken: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** Text that appears above the chat bot */
  HeaderText: Maybe<Scalars['String']['output']>;
  /** The height of the bot in pixels as shown on screen */
  HeightInPixels: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlockDirectLineTokenArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlockHeaderTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to insert a health chat bot */
export type HealthChatbotBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type HealthChatbotBlockAutocomplete = {
  __typename: 'HealthChatbotBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HealthChatbotBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HealthChatbotBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HealthChatbotBlockFacet = {
  __typename: 'HealthChatbotBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DirectLineToken: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HeaderText: Maybe<Array<Maybe<StringFacet>>>;
  HeightInPixels: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type HealthChatbotBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type HealthChatbotBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HealthChatbotBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HealthChatbotBlockFacetDirectLineTokenArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetHeaderTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetHeightInPixelsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type HealthChatbotBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HealthChatbotBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HealthChatbotBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HealthChatbotBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HealthChatbotBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HealthChatbotBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DirectLineToken: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HeaderText: InputMaybe<OrderBy>;
  HeightInPixels: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type HealthChatbotBlockOutput = {
  __typename: 'HealthChatbotBlockOutput';
  autocomplete: Maybe<HealthChatbotBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<HealthChatbotBlockFacet>;
  items: Maybe<Array<Maybe<HealthChatbotBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type HealthChatbotBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type HealthChatbotBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DirectLineToken: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HeaderText: InputMaybe<SearchableStringFilterInput>;
  HeightInPixels: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<HealthChatbotBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<HealthChatbotBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<HealthChatbotBlockWhereInput>>>;
};

/** Image block with overlay for text */
export type HeroBlock = IContent & IData & {
  __typename: 'HeroBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BackgroundImage: Maybe<ContentModelReference>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  BlockRatio: Maybe<Scalars['String']['output']>;
  Callout: Maybe<HeroBlockHeroBlockCallout>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Link: Maybe<Scalars['String']['output']>;
  MainBackgroundVideo: Maybe<ContentModelReference>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Image block with overlay for text */
export type HeroBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type HeroBlockBlockRatioArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type HeroBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type HeroBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type HeroBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type HeroBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type HeroBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type HeroBlockAutocomplete = {
  __typename: 'HeroBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundImage: Maybe<ContentModelReferenceAutocomplete>;
  Callout: Maybe<HeroBlockHeroBlockCalloutAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Link: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MainBackgroundVideo: Maybe<ContentModelReferenceAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HeroBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HeroBlockCallout = IContent & IData & {
  __typename: 'HeroBlockCallout';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BackgroundColorBehindText: Maybe<Scalars['Bool']['output']>;
  CalloutContent: Maybe<Scalars['String']['output']>;
  CalloutContentAlignment: Maybe<Scalars['String']['output']>;
  CalloutOpacity: Maybe<Scalars['Float']['output']>;
  CalloutPosition: Maybe<Scalars['String']['output']>;
  /** Sets text color of callout content */
  CalloutTextColor: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type HeroBlockCalloutBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutCalloutContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutCalloutContentAlignmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutCalloutPositionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutCalloutTextColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCalloutPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCallout_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type HeroBlockCallout_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type HeroBlockCalloutAutocomplete = {
  __typename: 'HeroBlockCalloutAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HeroBlockCalloutAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockCalloutAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HeroBlockCalloutFacet = {
  __typename: 'HeroBlockCalloutFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColorBehindText: Maybe<Array<Maybe<StringFacet>>>;
  CalloutContent: Maybe<Array<Maybe<StringFacet>>>;
  CalloutContentAlignment: Maybe<Array<Maybe<StringFacet>>>;
  CalloutOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  CalloutPosition: Maybe<Array<Maybe<StringFacet>>>;
  CalloutTextColor: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type HeroBlockCalloutFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetBackgroundColorBehindTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetCalloutContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetCalloutContentAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetCalloutOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type HeroBlockCalloutFacetCalloutPositionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetCalloutTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockCalloutFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockCalloutFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockCalloutFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockCalloutFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockCalloutFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockCalloutFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HeroBlockCalloutOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundColorBehindText: InputMaybe<OrderBy>;
  CalloutContent: InputMaybe<OrderBy>;
  CalloutContentAlignment: InputMaybe<OrderBy>;
  CalloutOpacity: InputMaybe<OrderBy>;
  CalloutPosition: InputMaybe<OrderBy>;
  CalloutTextColor: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type HeroBlockCalloutOutput = {
  __typename: 'HeroBlockCalloutOutput';
  autocomplete: Maybe<HeroBlockCalloutAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<HeroBlockCalloutFacet>;
  items: Maybe<Array<Maybe<HeroBlockCallout>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type HeroBlockCalloutOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type HeroBlockCalloutWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BackgroundColorBehindText: InputMaybe<BoolFilterInput>;
  CalloutContent: InputMaybe<SearchableStringFilterInput>;
  CalloutContentAlignment: InputMaybe<SearchableStringFilterInput>;
  CalloutOpacity: InputMaybe<FloatFilterInput>;
  CalloutPosition: InputMaybe<SearchableStringFilterInput>;
  CalloutTextColor: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<HeroBlockCalloutWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<HeroBlockCalloutWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<HeroBlockCalloutWhereInput>>>;
};

export type HeroBlockFacet = {
  __typename: 'HeroBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundImage: Maybe<ContentModelReferenceFacet>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  BlockRatio: Maybe<Array<Maybe<StringFacet>>>;
  Callout: Maybe<HeroBlockHeroBlockCalloutFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Link: Maybe<Array<Maybe<StringFacet>>>;
  MainBackgroundVideo: Maybe<ContentModelReferenceFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type HeroBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type HeroBlockFacetBlockRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HeroBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HeroBlockHeroBlockCallout = {
  __typename: 'HeroBlockHeroBlockCallout';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BackgroundColorBehindText: Maybe<Scalars['Bool']['output']>;
  CalloutContent: Maybe<Scalars['String']['output']>;
  CalloutContentAlignment: Maybe<Scalars['String']['output']>;
  CalloutOpacity: Maybe<Scalars['Float']['output']>;
  CalloutPosition: Maybe<Scalars['String']['output']>;
  CalloutTextColor: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
};

export type HeroBlockHeroBlockCalloutAutocomplete = {
  __typename: 'HeroBlockHeroBlockCalloutAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CalloutContent: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CalloutContentAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CalloutPosition: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CalloutTextColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HeroBlockHeroBlockCalloutAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockHeroBlockCalloutAutocompleteCalloutContentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockHeroBlockCalloutAutocompleteCalloutContentAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockHeroBlockCalloutAutocompleteCalloutPositionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockHeroBlockCalloutAutocompleteCalloutTextColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockHeroBlockCalloutAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HeroBlockHeroBlockCalloutAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HeroBlockHeroBlockCalloutFacet = {
  __typename: 'HeroBlockHeroBlockCalloutFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColorBehindText: Maybe<Array<Maybe<StringFacet>>>;
  CalloutContent: Maybe<Array<Maybe<StringFacet>>>;
  CalloutContentAlignment: Maybe<Array<Maybe<StringFacet>>>;
  CalloutOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  CalloutPosition: Maybe<Array<Maybe<StringFacet>>>;
  CalloutTextColor: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
};


export type HeroBlockHeroBlockCalloutFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetBackgroundColorBehindTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetCalloutContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetCalloutContentAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetCalloutOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type HeroBlockHeroBlockCalloutFacetCalloutPositionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetCalloutTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HeroBlockHeroBlockCalloutFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HeroBlockHeroBlockCalloutOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundColorBehindText: InputMaybe<OrderBy>;
  CalloutContent: InputMaybe<OrderBy>;
  CalloutContentAlignment: InputMaybe<OrderBy>;
  CalloutOpacity: InputMaybe<OrderBy>;
  CalloutPosition: InputMaybe<OrderBy>;
  CalloutTextColor: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
};

export type HeroBlockHeroBlockCalloutWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  BackgroundColorBehindText: InputMaybe<BoolFilterInput>;
  CalloutContent: InputMaybe<StringFilterInput>;
  CalloutContentAlignment: InputMaybe<StringFilterInput>;
  CalloutOpacity: InputMaybe<FloatFilterInput>;
  CalloutPosition: InputMaybe<StringFilterInput>;
  CalloutTextColor: InputMaybe<StringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
};

export type HeroBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundImage: InputMaybe<ContentModelReferenceOrderByInput>;
  BlockOpacity: InputMaybe<OrderBy>;
  BlockRatio: InputMaybe<OrderBy>;
  Callout: InputMaybe<HeroBlockHeroBlockCalloutOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Link: InputMaybe<OrderBy>;
  MainBackgroundVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type HeroBlockOutput = {
  __typename: 'HeroBlockOutput';
  autocomplete: Maybe<HeroBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<HeroBlockFacet>;
  items: Maybe<Array<Maybe<HeroBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type HeroBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type HeroBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BackgroundImage: InputMaybe<ContentModelReferenceWhereInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  BlockRatio: InputMaybe<SearchableStringFilterInput>;
  Callout: InputMaybe<HeroBlockHeroBlockCalloutWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Link: InputMaybe<StringFilterInput>;
  MainBackgroundVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<HeroBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<HeroBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<HeroBlockWhereInput>>>;
};

/** Options for highlighting */
export type HighlightOptions = {
  enabled: InputMaybe<Scalars['Boolean']['input']>;
  endToken: InputMaybe<Scalars['String']['input']>;
  startToken: InputMaybe<Scalars['String']['input']>;
};

/** Used for home page of all sites */
export type HomePage = IContent & IData & {
  __typename: 'HomePage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  BottomContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for home page of all sites */
export type HomePageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageBottomContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePageTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for home page of all sites */
export type HomePage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type HomePageAutocomplete = {
  __typename: 'HomePageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HomePageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HomePageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HomePageFacet = {
  __typename: 'HomePageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  BottomContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type HomePageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HomePageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HomePageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HomePageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HomePageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type HomePageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HomePageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HomePageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  BottomContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type HomePageOutput = {
  __typename: 'HomePageOutput';
  autocomplete: Maybe<HomePageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<HomePageFacet>;
  items: Maybe<Array<Maybe<HomePage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type HomePageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type HomePageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  BottomContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<HomePageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<HomePageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<HomePageWhereInput>>>;
};

export type HostDefinitionModel = {
  __typename: 'HostDefinitionModel';
  Language: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Type: Maybe<Scalars['String']['output']>;
};

export type HostDefinitionModelAutocomplete = {
  __typename: 'HostDefinitionModelAutocomplete';
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Name: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Type: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type HostDefinitionModelAutocompleteNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type HostDefinitionModelAutocompleteTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type HostDefinitionModelFacet = {
  __typename: 'HostDefinitionModelFacet';
  Language: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Type: Maybe<Array<Maybe<StringFacet>>>;
};


export type HostDefinitionModelFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type HostDefinitionModelFacetTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type HostDefinitionModelOrderByInput = {
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Type: InputMaybe<OrderBy>;
};

export type HostDefinitionModelWhereInput = {
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<StringFilterInput>;
  Type: InputMaybe<StringFilterInput>;
};

export type IContent = {
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type IContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type IContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type IContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type IData = {
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type IData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type IData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ImageChoiceElementBlock = IContent & IData & {
  __typename: 'ImageChoiceElementBlock';
  AllowMultiSelect: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Items: Maybe<Array<Maybe<LinkItemNode>>>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowSelectionInputControl: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ImageChoiceElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ImageChoiceElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ImageChoiceElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ImageChoiceElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ImageChoiceElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ImageChoiceElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ImageChoiceElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ImageChoiceElementBlockAutocomplete = {
  __typename: 'ImageChoiceElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Items: Maybe<LinkItemNodeAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ImageChoiceElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageChoiceElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ImageChoiceElementBlockFacet = {
  __typename: 'ImageChoiceElementBlockFacet';
  AllowMultiSelect: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Items: Maybe<LinkItemNodeFacet>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowSelectionInputControl: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type ImageChoiceElementBlockFacetAllowMultiSelectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageChoiceElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ImageChoiceElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageChoiceElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageChoiceElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetShowSelectionInputControlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageChoiceElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageChoiceElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageChoiceElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ImageChoiceElementBlockOrderByInput = {
  AllowMultiSelect: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Items: InputMaybe<LinkItemNodeOrderByInput>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowSelectionInputControl: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ImageChoiceElementBlockOutput = {
  __typename: 'ImageChoiceElementBlockOutput';
  autocomplete: Maybe<ImageChoiceElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ImageChoiceElementBlockFacet>;
  items: Maybe<Array<Maybe<ImageChoiceElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ImageChoiceElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageChoiceElementBlockWhereInput = {
  AllowMultiSelect: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Items: InputMaybe<LinkItemNodeWhereInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowSelectionInputControl: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ImageChoiceElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ImageChoiceElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ImageChoiceElementBlockWhereInput>>>;
};

/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaData = IContent & IData & {
  __typename: 'ImageMediaData';
  AccentColor: Maybe<Scalars['String']['output']>;
  AltText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Caption: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ClipArtType: Maybe<Scalars['String']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Copyright: Maybe<Scalars['String']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  CreditsLink: Maybe<Scalars['String']['output']>;
  CreditsText: Maybe<Scalars['String']['output']>;
  /** Description of the image */
  Description: Maybe<Scalars['String']['output']>;
  DominantColorBackground: Maybe<Scalars['String']['output']>;
  DominantColorForeground: Maybe<Scalars['String']['output']>;
  DominantColors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FileSize: Maybe<Scalars['String']['output']>;
  ImageAlignment: Maybe<Scalars['String']['output']>;
  ImageCategories: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  IsAdultContent: Maybe<Scalars['Bool']['output']>;
  IsBwImg: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  IsRacyContent: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LargeThumbnail: Maybe<BlobModel>;
  LineDrawingType: Maybe<Scalars['String']['output']>;
  /** Link to content */
  Link: Maybe<ContentModelReference>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  PaddingBottom: Maybe<Scalars['Int']['output']>;
  PaddingLeft: Maybe<Scalars['Int']['output']>;
  PaddingRight: Maybe<Scalars['Int']['output']>;
  PaddingTop: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Tags: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModel>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataAccentColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataAltTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataCaptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataClipArtTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataCopyrightArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataCreditsTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataDominantColorBackgroundArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataDominantColorForegroundArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataFileSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataImageAlignmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataLineDrawingTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaDataTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for image file types such as jpg, jpeg, jpe, ico, gif, bmp, png */
export type ImageMediaData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ImageMediaDataAutocomplete = {
  __typename: 'ImageMediaDataAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CreditsLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DominantColors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  ImageCategories: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  LargeThumbnail: Maybe<BlobModelAutocomplete>;
  Link: Maybe<ContentModelReferenceAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Tags: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ImageMediaDataAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteCreditsLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteDominantColorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteImageCategoriesArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteTagsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ImageMediaDataAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ImageMediaDataFacet = {
  __typename: 'ImageMediaDataFacet';
  AccentColor: Maybe<Array<Maybe<StringFacet>>>;
  AltText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Caption: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ClipArtType: Maybe<Array<Maybe<StringFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Copyright: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  CreditsLink: Maybe<Array<Maybe<StringFacet>>>;
  CreditsText: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DominantColorBackground: Maybe<Array<Maybe<StringFacet>>>;
  DominantColorForeground: Maybe<Array<Maybe<StringFacet>>>;
  DominantColors: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FileSize: Maybe<Array<Maybe<StringFacet>>>;
  ImageAlignment: Maybe<Array<Maybe<StringFacet>>>;
  ImageCategories: Maybe<Array<Maybe<StringFacet>>>;
  IsAdultContent: Maybe<Array<Maybe<StringFacet>>>;
  IsBwImg: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  IsRacyContent: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LargeThumbnail: Maybe<BlobModelFacet>;
  LineDrawingType: Maybe<Array<Maybe<StringFacet>>>;
  Link: Maybe<ContentModelReferenceFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PaddingBottom: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingLeft: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingRight: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingTop: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Tags: Maybe<Array<Maybe<StringFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ImageMediaDataFacetAccentColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetAltTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetCaptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageMediaDataFacetClipArtTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetCopyrightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageMediaDataFacetCreditsLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetCreditsTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetDominantColorBackgroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetDominantColorForegroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetDominantColorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetFileSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetImageAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetImageCategoriesArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetIsAdultContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetIsBwImgArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetIsRacyContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetLineDrawingTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetPaddingBottomArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ImageMediaDataFacetPaddingLeftArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ImageMediaDataFacetPaddingRightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ImageMediaDataFacetPaddingTopArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ImageMediaDataFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageMediaDataFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageMediaDataFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ImageMediaDataFacetTagsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ImageMediaDataFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ImageMediaDataOrderByInput = {
  AccentColor: InputMaybe<OrderBy>;
  AltText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Caption: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ClipArtType: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Copyright: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  CreditsLink: InputMaybe<OrderBy>;
  CreditsText: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DominantColorBackground: InputMaybe<OrderBy>;
  DominantColorForeground: InputMaybe<OrderBy>;
  DominantColors: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FileSize: InputMaybe<OrderBy>;
  ImageAlignment: InputMaybe<OrderBy>;
  ImageCategories: InputMaybe<OrderBy>;
  IsAdultContent: InputMaybe<OrderBy>;
  IsBwImg: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  IsRacyContent: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LargeThumbnail: InputMaybe<BlobModelOrderByInput>;
  LineDrawingType: InputMaybe<OrderBy>;
  Link: InputMaybe<ContentModelReferenceOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  PaddingBottom: InputMaybe<OrderBy>;
  PaddingLeft: InputMaybe<OrderBy>;
  PaddingRight: InputMaybe<OrderBy>;
  PaddingTop: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Tags: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ImageMediaDataOutput = {
  __typename: 'ImageMediaDataOutput';
  autocomplete: Maybe<ImageMediaDataAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ImageMediaDataFacet>;
  items: Maybe<Array<Maybe<ImageMediaData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ImageMediaDataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ImageMediaDataWhereInput = {
  AccentColor: InputMaybe<SearchableStringFilterInput>;
  AltText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Caption: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ClipArtType: InputMaybe<SearchableStringFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Copyright: InputMaybe<SearchableStringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  CreditsLink: InputMaybe<StringFilterInput>;
  CreditsText: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DominantColorBackground: InputMaybe<SearchableStringFilterInput>;
  DominantColorForeground: InputMaybe<SearchableStringFilterInput>;
  DominantColors: InputMaybe<StringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FileSize: InputMaybe<SearchableStringFilterInput>;
  ImageAlignment: InputMaybe<SearchableStringFilterInput>;
  ImageCategories: InputMaybe<StringFilterInput>;
  IsAdultContent: InputMaybe<BoolFilterInput>;
  IsBwImg: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  IsRacyContent: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LargeThumbnail: InputMaybe<BlobModelWhereInput>;
  LineDrawingType: InputMaybe<SearchableStringFilterInput>;
  Link: InputMaybe<ContentModelReferenceWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PaddingBottom: InputMaybe<IntFilterInput>;
  PaddingLeft: InputMaybe<IntFilterInput>;
  PaddingRight: InputMaybe<IntFilterInput>;
  PaddingTop: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Tags: InputMaybe<StringFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ImageMediaDataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ImageMediaDataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ImageMediaDataWhereInput>>>;
};

export type InlineBlockPropertyModel = {
  __typename: 'InlineBlockPropertyModel';
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type InlineBlockPropertyModelFacet = {
  __typename: 'InlineBlockPropertyModelFacet';
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
};


export type InlineBlockPropertyModelFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type InlineBlockPropertyModelOrderByInput = {
  ContentType: InputMaybe<OrderBy>;
};

export type InlineBlockPropertyModelSearch = {
  __typename: 'InlineBlockPropertyModelSearch';
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type InlineBlockPropertyModelSearchContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};

export type InlineBlockPropertyModelSearchFacet = {
  __typename: 'InlineBlockPropertyModelSearchFacet';
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
};


export type InlineBlockPropertyModelSearchFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type InlineBlockPropertyModelSearchOrderByInput = {
  ContentType: InputMaybe<OrderBy>;
};

export type InlineBlockPropertyModelSearchWhereInput = {
  ContentType: InputMaybe<SearchableStringFilterInput>;
};

export type InlineBlockPropertyModelWhereInput = {
  ContentType: InputMaybe<StringFilterInput>;
};

export type IntFilterInput = {
  /** `boost` influences the weight of a field by boosting a match with a number (default: 1) — counts more towards the eventual relevance score which can be projected with `_score` — at query time. Note that `boost` cannot be a negative number. */
  boost: InputMaybe<Scalars['Int']['input']>;
  /** `eq` matches on an exact value, but the value is case-insensitive. */
  eq: InputMaybe<Scalars['Int']['input']>;
  /** `exist` matches results that have this field. */
  exist: InputMaybe<Scalars['Boolean']['input']>;
  /** `gt` retrieves results with matches that have a value which is `greater than` it. */
  gt: InputMaybe<Scalars['Int']['input']>;
  /** `gte` retrieves results with matches that have a value which is `greater than or equal to` it. */
  gte: InputMaybe<Scalars['Int']['input']>;
  /** `in` matches with 1 or more exact values in a list. Example: `in: ["word1", "word2", "this is a phrase"]` */
  in: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
  /** `lt` retrieves results with matches that have a value which is `lower than` it. */
  lt: InputMaybe<Scalars['Int']['input']>;
  /** `lte` retrieves results with matches that have a value which is `lower than or equal to` it. */
  lte: InputMaybe<Scalars['Int']['input']>;
  /** `not_eq` retrieves results not matching with an exact (but case-insensitive) value. */
  notEq: InputMaybe<Scalars['Int']['input']>;
  /** `not_in` returns results that do not match with 1 or more exact values in a list. Example: `not_in: ["word1", "word2", "this is a phrase"]` */
  notIn: InputMaybe<Array<InputMaybe<Scalars['Int']['input']>>>;
};

/** Default standard page that has top content area, main body, and main content area */
export type LandingPage = IContent & IData & {
  __typename: 'LandingPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPageTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Default standard page that has top content area, main body, and main content area */
export type LandingPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type LandingPageAutocomplete = {
  __typename: 'LandingPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type LandingPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LandingPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type LandingPageFacet = {
  __typename: 'LandingPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type LandingPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LandingPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LandingPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LandingPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LandingPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LandingPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LandingPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type LandingPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type LandingPageOutput = {
  __typename: 'LandingPageOutput';
  autocomplete: Maybe<LandingPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<LandingPageFacet>;
  items: Maybe<Array<Maybe<LandingPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type LandingPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type LandingPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<LandingPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<LandingPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<LandingPageWhereInput>>>;
};

/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlock = IContent & IData & {
  __typename: 'LikeButtonBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A Like Button block implementation using the Episerver Social Ratings feature. */
export type LikeButtonBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type LikeButtonBlockAutocomplete = {
  __typename: 'LikeButtonBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type LikeButtonBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LikeButtonBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type LikeButtonBlockFacet = {
  __typename: 'LikeButtonBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type LikeButtonBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type LikeButtonBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LikeButtonBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LikeButtonBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LikeButtonBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LikeButtonBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LikeButtonBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LikeButtonBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type LikeButtonBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type LikeButtonBlockOutput = {
  __typename: 'LikeButtonBlockOutput';
  autocomplete: Maybe<LikeButtonBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<LikeButtonBlockFacet>;
  items: Maybe<Array<Maybe<LikeButtonBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type LikeButtonBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type LikeButtonBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<LikeButtonBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<LikeButtonBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<LikeButtonBlockWhereInput>>>;
};

export type LinkConfig = {
  from: InputMaybe<Scalars['String']['input']>;
  to: InputMaybe<Scalars['String']['input']>;
};

export type LinkItemNode = {
  __typename: 'LinkItemNode';
  ContentLink: Maybe<ContentModelReference>;
  Href: Maybe<Scalars['String']['output']>;
  Target: Maybe<Scalars['String']['output']>;
  Text: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type LinkItemNodeAutocomplete = {
  __typename: 'LinkItemNodeAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  Href: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Target: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Text: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type LinkItemNodeAutocompleteHrefArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LinkItemNodeAutocompleteTargetArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LinkItemNodeAutocompleteTextArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LinkItemNodeAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type LinkItemNodeFacet = {
  __typename: 'LinkItemNodeFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
  Href: Maybe<Array<Maybe<StringFacet>>>;
  Target: Maybe<Array<Maybe<StringFacet>>>;
  Text: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type LinkItemNodeFacetHrefArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LinkItemNodeFacetTargetArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LinkItemNodeFacetTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LinkItemNodeFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type LinkItemNodeOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Href: InputMaybe<OrderBy>;
  Target: InputMaybe<OrderBy>;
  Text: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type LinkItemNodeWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Href: InputMaybe<StringFilterInput>;
  Target: InputMaybe<StringFilterInput>;
  Text: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export enum LinkTypes {
  Default = 'DEFAULT'
}

export enum Locales {
  All = 'ALL',
  Neutral = 'NEUTRAL',
  En = 'en',
  Fr = 'fr'
}

/** Used to display the details of a location */
export type LocationItemPage = IContent & IData & {
  __typename: 'LocationItemPage';
  AirportInitials: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  AvgTemp: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Continent: Maybe<Scalars['String']['output']>;
  Country: Maybe<Scalars['String']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Image: Maybe<ContentModelReference>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Latitude: Maybe<Scalars['Float']['output']>;
  LeftContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Longitude: Maybe<Scalars['Float']['output']>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  MainIntro: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  New: Maybe<Scalars['Bool']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  /** Check this, in order to boost this destination and promote it in suggestions */
  Promoted: Maybe<Scalars['Bool']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  YearlyPassengers: Maybe<Scalars['Int']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to display the details of a location */
export type LocationItemPageAirportInitialsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageContinentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageCountryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageLeftContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageMainIntroArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display the details of a location */
export type LocationItemPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type LocationItemPageAutocomplete = {
  __typename: 'LocationItemPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Image: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type LocationItemPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationItemPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type LocationItemPageFacet = {
  __typename: 'LocationItemPageFacet';
  AirportInitials: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  AvgTemp: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Continent: Maybe<Array<Maybe<StringFacet>>>;
  Country: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Image: Maybe<ContentModelReferenceFacet>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Latitude: Maybe<Array<Maybe<NumberFacet>>>;
  LeftContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Longitude: Maybe<Array<Maybe<NumberFacet>>>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  MainIntro: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  New: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Promoted: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  YearlyPassengers: Maybe<Array<Maybe<NumberFacet>>>;
};


export type LocationItemPageFacetAirportInitialsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetAvgTempArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type LocationItemPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationItemPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetContinentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetCountryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationItemPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetLatitudeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type LocationItemPageFacetLongitudeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type LocationItemPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetMainIntroArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetNewArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetPromotedArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationItemPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationItemPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationItemPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationItemPageFacetYearlyPassengersArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type LocationItemPageOrderByInput = {
  AirportInitials: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  AvgTemp: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Continent: InputMaybe<OrderBy>;
  Country: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Image: InputMaybe<ContentModelReferenceOrderByInput>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Latitude: InputMaybe<OrderBy>;
  LeftContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Longitude: InputMaybe<OrderBy>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  MainIntro: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  New: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Promoted: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  YearlyPassengers: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type LocationItemPageOutput = {
  __typename: 'LocationItemPageOutput';
  autocomplete: Maybe<LocationItemPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<LocationItemPageFacet>;
  items: Maybe<Array<Maybe<LocationItemPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type LocationItemPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type LocationItemPageWhereInput = {
  AirportInitials: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  AvgTemp: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Continent: InputMaybe<SearchableStringFilterInput>;
  Country: InputMaybe<SearchableStringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Image: InputMaybe<ContentModelReferenceWhereInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Latitude: InputMaybe<FloatFilterInput>;
  LeftContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Longitude: InputMaybe<FloatFilterInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  MainIntro: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  New: InputMaybe<BoolFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Promoted: InputMaybe<BoolFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  YearlyPassengers: InputMaybe<IntFilterInput>;
  _and: InputMaybe<Array<InputMaybe<LocationItemPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<LocationItemPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<LocationItemPageWhereInput>>>;
};

/** Used to display a list of all locations */
export type LocationListPage = IContent & IData & {
  __typename: 'LocationListPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FilterArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to display a list of all locations */
export type LocationListPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageFilterAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to display a list of all locations */
export type LocationListPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type LocationListPageAutocomplete = {
  __typename: 'LocationListPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type LocationListPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type LocationListPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type LocationListPageFacet = {
  __typename: 'LocationListPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FilterArea: Maybe<ContentAreaItemModelSearchFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type LocationListPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationListPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationListPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationListPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationListPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type LocationListPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type LocationListPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type LocationListPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FilterArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type LocationListPageOutput = {
  __typename: 'LocationListPageOutput';
  autocomplete: Maybe<LocationListPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<LocationListPageFacet>;
  items: Maybe<Array<Maybe<LocationListPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type LocationListPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type LocationListPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FilterArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<LocationListPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<LocationListPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<LocationListPageWhereInput>>>;
};

/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlock = IContent & IData & {
  __typename: 'MembershipAffiliationBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  NumberOfMembers: Maybe<Scalars['Int']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership affiliation block view */
export type MembershipAffiliationBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type MembershipAffiliationBlockAutocomplete = {
  __typename: 'MembershipAffiliationBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type MembershipAffiliationBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipAffiliationBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type MembershipAffiliationBlockFacet = {
  __typename: 'MembershipAffiliationBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfMembers: Maybe<Array<Maybe<NumberFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type MembershipAffiliationBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type MembershipAffiliationBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipAffiliationBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipAffiliationBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetNumberOfMembersArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type MembershipAffiliationBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipAffiliationBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipAffiliationBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipAffiliationBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipAffiliationBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type MembershipAffiliationBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  NumberOfMembers: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type MembershipAffiliationBlockOutput = {
  __typename: 'MembershipAffiliationBlockOutput';
  autocomplete: Maybe<MembershipAffiliationBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<MembershipAffiliationBlockFacet>;
  items: Maybe<Array<Maybe<MembershipAffiliationBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type MembershipAffiliationBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type MembershipAffiliationBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NumberOfMembers: InputMaybe<IntFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<MembershipAffiliationBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<MembershipAffiliationBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<MembershipAffiliationBlockWhereInput>>>;
};

/** Configures the properties of a membership display block view */
export type MembershipDisplayBlock = IContent & IData & {
  __typename: 'MembershipDisplayBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  GroupName: Maybe<Scalars['String']['output']>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  NumberOfMembers: Maybe<Scalars['Int']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlockGroupNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a membership display block view */
export type MembershipDisplayBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type MembershipDisplayBlockAutocomplete = {
  __typename: 'MembershipDisplayBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type MembershipDisplayBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MembershipDisplayBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type MembershipDisplayBlockFacet = {
  __typename: 'MembershipDisplayBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  GroupName: Maybe<Array<Maybe<StringFacet>>>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfMembers: Maybe<Array<Maybe<NumberFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type MembershipDisplayBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type MembershipDisplayBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipDisplayBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipDisplayBlockFacetGroupNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetNumberOfMembersArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type MembershipDisplayBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipDisplayBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipDisplayBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MembershipDisplayBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MembershipDisplayBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type MembershipDisplayBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  GroupName: InputMaybe<OrderBy>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  NumberOfMembers: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type MembershipDisplayBlockOutput = {
  __typename: 'MembershipDisplayBlockOutput';
  autocomplete: Maybe<MembershipDisplayBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<MembershipDisplayBlockFacet>;
  items: Maybe<Array<Maybe<MembershipDisplayBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type MembershipDisplayBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type MembershipDisplayBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  GroupName: InputMaybe<SearchableStringFilterInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NumberOfMembers: InputMaybe<IntFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<MembershipDisplayBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<MembershipDisplayBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<MembershipDisplayBlockWhereInput>>>;
};

/** Used to create a menu item */
export type MenuItemBlock = IContent & IData & {
  __typename: 'MenuItemBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonLink: Maybe<Scalars['String']['output']>;
  ButtonText: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  /** Link */
  Link: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MenuImage: Maybe<ContentModelReference>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to create a menu item */
export type MenuItemBlockButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to create a menu item */
export type MenuItemBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to create a menu item */
export type MenuItemBlockTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to create a menu item */
export type MenuItemBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to create a menu item */
export type MenuItemBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type MenuItemBlockAutocomplete = {
  __typename: 'MenuItemBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ButtonLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Link: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MenuImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type MenuItemBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteButtonLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MenuItemBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type MenuItemBlockFacet = {
  __typename: 'MenuItemBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ButtonLink: Maybe<Array<Maybe<StringFacet>>>;
  ButtonText: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Link: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MenuImage: Maybe<ContentModelReferenceFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type MenuItemBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetButtonLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MenuItemBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MenuItemBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MenuItemBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MenuItemBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MenuItemBlockFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MenuItemBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type MenuItemBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ButtonLink: InputMaybe<OrderBy>;
  ButtonText: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Link: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MenuImage: InputMaybe<ContentModelReferenceOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type MenuItemBlockOutput = {
  __typename: 'MenuItemBlockOutput';
  autocomplete: Maybe<MenuItemBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<MenuItemBlockFacet>;
  items: Maybe<Array<Maybe<MenuItemBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type MenuItemBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type MenuItemBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ButtonLink: InputMaybe<StringFilterInput>;
  ButtonText: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Link: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MenuImage: InputMaybe<ContentModelReferenceWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<MenuItemBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<MenuItemBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<MenuItemBlockWhereInput>>>;
};

/** Adds modal block (pop-up) to the page */
export type ModalBlock = IContent & IData & {
  __typename: 'ModalBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  /** Custom CSS class for modal (to help with custom styles) */
  CssClass: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** Check this box to hide footer (close button) section on modal */
  HideModalFooter: Maybe<Scalars['Bool']['output']>;
  /** Check this box to hide the title section on modal */
  HideModalTitle: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  ModalBackdropImage: Maybe<ContentModelReference>;
  ModalBackgroundImage: Maybe<ContentModelReference>;
  /** Text to show for modal close button -- default value: 'Close' */
  ModalCloseButtonText: Maybe<Scalars['String']['output']>;
  ModalContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  /** Text to show for modal open button (if enabled) */
  ModalOpenButtonText: Maybe<Scalars['String']['output']>;
  /** Set custom width of modal open button (autosized if blank) */
  ModalOpenButtonWidth: Maybe<Scalars['Int']['output']>;
  /** Link for modal primary button */
  ModalPrimaryButtonLink: Maybe<Scalars['String']['output']>;
  /** Text to show for modal primary button -- button hidden if blank */
  ModalPrimaryButtonText: Maybe<Scalars['String']['output']>;
  /** Size of modal */
  ModalSize: Maybe<Scalars['String']['output']>;
  /** Modal title */
  ModalTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** Show modal after X seconds pass (0 = disabled) */
  ShowModalAfterXSeconds: Maybe<Scalars['Int']['output']>;
  /** Check this box to pop up the modal when the visitor's mouse leaves the page */
  ShowModalOnExitIntent: Maybe<Scalars['Bool']['output']>;
  /** Check this box to pop up the modal when page is loaded */
  ShowModalOnPageLoad: Maybe<Scalars['Bool']['output']>;
  /** Show modal when visitor scrolls page X % (0 = disabled) */
  ShowModalOnScrollPercentage: Maybe<Scalars['Int']['output']>;
  /** Check this box to show button on page to open modal */
  ShowModalOpenButton: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockCssClassArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockModalCloseButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockModalContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockModalOpenButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockModalPrimaryButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockModalSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockModalTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Adds modal block (pop-up) to the page */
export type ModalBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ModalBlockAutocomplete = {
  __typename: 'ModalBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ModalBackdropImage: Maybe<ContentModelReferenceAutocomplete>;
  ModalBackgroundImage: Maybe<ContentModelReferenceAutocomplete>;
  ModalPrimaryButtonLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ModalBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteModalPrimaryButtonLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ModalBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ModalBlockFacet = {
  __typename: 'ModalBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  CssClass: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideModalFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideModalTitle: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  ModalBackdropImage: Maybe<ContentModelReferenceFacet>;
  ModalBackgroundImage: Maybe<ContentModelReferenceFacet>;
  ModalCloseButtonText: Maybe<Array<Maybe<StringFacet>>>;
  ModalContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ModalOpenButtonText: Maybe<Array<Maybe<StringFacet>>>;
  ModalOpenButtonWidth: Maybe<Array<Maybe<NumberFacet>>>;
  ModalPrimaryButtonLink: Maybe<Array<Maybe<StringFacet>>>;
  ModalPrimaryButtonText: Maybe<Array<Maybe<StringFacet>>>;
  ModalSize: Maybe<Array<Maybe<StringFacet>>>;
  ModalTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowModalAfterXSeconds: Maybe<Array<Maybe<NumberFacet>>>;
  ShowModalOnExitIntent: Maybe<Array<Maybe<StringFacet>>>;
  ShowModalOnPageLoad: Maybe<Array<Maybe<StringFacet>>>;
  ShowModalOnScrollPercentage: Maybe<Array<Maybe<NumberFacet>>>;
  ShowModalOpenButton: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ModalBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ModalBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ModalBlockFacetCssClassArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetHideModalFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetHideModalTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetModalCloseButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetModalOpenButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetModalOpenButtonWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ModalBlockFacetModalPrimaryButtonLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetModalPrimaryButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetModalSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetModalTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ModalBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetShowModalAfterXSecondsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ModalBlockFacetShowModalOnExitIntentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetShowModalOnPageLoadArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetShowModalOnScrollPercentageArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ModalBlockFacetShowModalOpenButtonArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ModalBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ModalBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ModalBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ModalBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  CssClass: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideModalFooter: InputMaybe<OrderBy>;
  HideModalTitle: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  ModalBackdropImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ModalBackgroundImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ModalCloseButtonText: InputMaybe<OrderBy>;
  ModalContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ModalOpenButtonText: InputMaybe<OrderBy>;
  ModalOpenButtonWidth: InputMaybe<OrderBy>;
  ModalPrimaryButtonLink: InputMaybe<OrderBy>;
  ModalPrimaryButtonText: InputMaybe<OrderBy>;
  ModalSize: InputMaybe<OrderBy>;
  ModalTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowModalAfterXSeconds: InputMaybe<OrderBy>;
  ShowModalOnExitIntent: InputMaybe<OrderBy>;
  ShowModalOnPageLoad: InputMaybe<OrderBy>;
  ShowModalOnScrollPercentage: InputMaybe<OrderBy>;
  ShowModalOpenButton: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ModalBlockOutput = {
  __typename: 'ModalBlockOutput';
  autocomplete: Maybe<ModalBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ModalBlockFacet>;
  items: Maybe<Array<Maybe<ModalBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ModalBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ModalBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  CssClass: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideModalFooter: InputMaybe<BoolFilterInput>;
  HideModalTitle: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  ModalBackdropImage: InputMaybe<ContentModelReferenceWhereInput>;
  ModalBackgroundImage: InputMaybe<ContentModelReferenceWhereInput>;
  ModalCloseButtonText: InputMaybe<SearchableStringFilterInput>;
  ModalContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ModalOpenButtonText: InputMaybe<SearchableStringFilterInput>;
  ModalOpenButtonWidth: InputMaybe<IntFilterInput>;
  ModalPrimaryButtonLink: InputMaybe<StringFilterInput>;
  ModalPrimaryButtonText: InputMaybe<SearchableStringFilterInput>;
  ModalSize: InputMaybe<SearchableStringFilterInput>;
  ModalTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowModalAfterXSeconds: InputMaybe<IntFilterInput>;
  ShowModalOnExitIntent: InputMaybe<BoolFilterInput>;
  ShowModalOnPageLoad: InputMaybe<BoolFilterInput>;
  ShowModalOnScrollPercentage: InputMaybe<IntFilterInput>;
  ShowModalOpenButton: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ModalBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ModalBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ModalBlockWhereInput>>>;
};

export type MonetaryReward = IContent & IData & {
  __typename: 'MonetaryReward';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  Percentage: Maybe<Scalars['Float']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  UseAmounts: Maybe<Scalars['Bool']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type MonetaryRewardNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type MonetaryReward_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type MonetaryReward_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type MonetaryRewardAutocomplete = {
  __typename: 'MonetaryRewardAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type MonetaryRewardAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type MonetaryRewardAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type MonetaryRewardFacet = {
  __typename: 'MonetaryRewardFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Percentage: Maybe<Array<Maybe<NumberFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  UseAmounts: Maybe<Array<Maybe<StringFacet>>>;
};


export type MonetaryRewardFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MonetaryRewardFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MonetaryRewardFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetPercentageArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type MonetaryRewardFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MonetaryRewardFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MonetaryRewardFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type MonetaryRewardFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type MonetaryRewardFacetUseAmountsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type MonetaryRewardOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Percentage: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  UseAmounts: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type MonetaryRewardOutput = {
  __typename: 'MonetaryRewardOutput';
  autocomplete: Maybe<MonetaryRewardAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<MonetaryRewardFacet>;
  items: Maybe<Array<Maybe<MonetaryReward>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type MonetaryRewardOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type MonetaryRewardWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Percentage: InputMaybe<FloatFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  UseAmounts: InputMaybe<BoolFilterInput>;
  _and: InputMaybe<Array<InputMaybe<MonetaryRewardWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<MonetaryRewardWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<MonetaryRewardWhereInput>>>;
};

/** Render normal left/right navigation structures */
export type NavigationBlock = IContent & IData & {
  __typename: 'NavigationBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RootPage: Maybe<ContentModelReference>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Render normal left/right navigation structures */
export type NavigationBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal left/right navigation structures */
export type NavigationBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal left/right navigation structures */
export type NavigationBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal left/right navigation structures */
export type NavigationBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal left/right navigation structures */
export type NavigationBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal left/right navigation structures */
export type NavigationBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Render normal left/right navigation structures */
export type NavigationBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type NavigationBlockAutocomplete = {
  __typename: 'NavigationBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RootPage: Maybe<ContentModelReferenceAutocomplete>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type NavigationBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NavigationBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type NavigationBlockFacet = {
  __typename: 'NavigationBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RootPage: Maybe<ContentModelReferenceFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type NavigationBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NavigationBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NavigationBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NavigationBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NavigationBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NavigationBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NavigationBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NavigationBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type NavigationBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RootPage: InputMaybe<ContentModelReferenceOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type NavigationBlockOutput = {
  __typename: 'NavigationBlockOutput';
  autocomplete: Maybe<NavigationBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<NavigationBlockFacet>;
  items: Maybe<Array<Maybe<NavigationBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type NavigationBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type NavigationBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RootPage: InputMaybe<ContentModelReferenceWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<NavigationBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<NavigationBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<NavigationBlockWhereInput>>>;
};

/** Show the top new products by sorted by the creation date */
export type NewProductsPage = IContent & IData & {
  __typename: 'NewProductsPage';
  AllowPaging: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ManualExclusion: Maybe<Array<Maybe<ContentModelReference>>>;
  ManualInclusion: Maybe<Array<Maybe<ContentModelReference>>>;
  ManualInclusionOrdering: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  NumberOfProducts: Maybe<Scalars['Int']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  PageSize: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageManualInclusionOrderingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show the top new products by sorted by the creation date */
export type NewProductsPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type NewProductsPageAutocomplete = {
  __typename: 'NewProductsPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  ManualExclusion: Maybe<ContentModelReferenceAutocomplete>;
  ManualInclusion: Maybe<ContentModelReferenceAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type NewProductsPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NewProductsPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type NewProductsPageFacet = {
  __typename: 'NewProductsPageFacet';
  AllowPaging: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ManualExclusion: Maybe<ContentModelReferenceFacet>;
  ManualInclusion: Maybe<ContentModelReferenceFacet>;
  ManualInclusionOrdering: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfProducts: Maybe<Array<Maybe<NumberFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  PageSize: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type NewProductsPageFacetAllowPagingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NewProductsPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NewProductsPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetManualInclusionOrderingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetNumberOfProductsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NewProductsPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetPageSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NewProductsPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NewProductsPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NewProductsPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NewProductsPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NewProductsPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type NewProductsPageOrderByInput = {
  AllowPaging: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ManualExclusion: InputMaybe<ContentModelReferenceOrderByInput>;
  ManualInclusion: InputMaybe<ContentModelReferenceOrderByInput>;
  ManualInclusionOrdering: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  NumberOfProducts: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  PageSize: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type NewProductsPageOutput = {
  __typename: 'NewProductsPageOutput';
  autocomplete: Maybe<NewProductsPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<NewProductsPageFacet>;
  items: Maybe<Array<Maybe<NewProductsPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type NewProductsPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type NewProductsPageWhereInput = {
  AllowPaging: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ManualExclusion: InputMaybe<ContentModelReferenceWhereInput>;
  ManualInclusion: InputMaybe<ContentModelReferenceWhereInput>;
  ManualInclusionOrdering: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NumberOfProducts: InputMaybe<IntFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  PageSize: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<NewProductsPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<NewProductsPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<NewProductsPageWhereInput>>>;
};

export type NodeContent = IContent & IData & {
  __typename: 'NodeContent';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<NodeContentCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SeoInformation: Maybe<NodeContentSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type NodeContentCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NodeContentDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NodeContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NodeContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NodeContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type NodeContentAutocomplete = {
  __typename: 'NodeContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<NodeContentCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SeoInformation: Maybe<NodeContentSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type NodeContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type NodeContentCategories = {
  __typename: 'NodeContentCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type NodeContentCategoriesAutocomplete = {
  __typename: 'NodeContentCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type NodeContentCategoriesFacet = {
  __typename: 'NodeContentCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type NodeContentCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type NodeContentCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type NodeContentFacet = {
  __typename: 'NodeContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<NodeContentCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SeoInformation: Maybe<NodeContentSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type NodeContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NodeContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NodeContentFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NodeContentFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NodeContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NodeContentFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NodeContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NodeContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type NodeContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<NodeContentCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<NodeContentSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type NodeContentOutput = {
  __typename: 'NodeContentOutput';
  autocomplete: Maybe<NodeContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<NodeContentFacet>;
  items: Maybe<Array<Maybe<NodeContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type NodeContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type NodeContentSeoInformation = {
  __typename: 'NodeContentSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type NodeContentSeoInformationAutocomplete = {
  __typename: 'NodeContentSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type NodeContentSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NodeContentSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type NodeContentSeoInformationFacet = {
  __typename: 'NodeContentSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type NodeContentSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NodeContentSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type NodeContentSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type NodeContentSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type NodeContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<NodeContentCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SeoInformation: InputMaybe<NodeContentSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<NodeContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<NodeContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<NodeContentWhereInput>>>;
};

export type NumberElementBlock = IContent & IData & {
  __typename: 'NumberElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AutoComplete: Maybe<Scalars['Int']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type NumberElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type NumberElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type NumberElementBlockAutocomplete = {
  __typename: 'NumberElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type NumberElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumberElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type NumberElementBlockFacet = {
  __typename: 'NumberElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AutoComplete: Maybe<Array<Maybe<NumberFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type NumberElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetAutoCompleteArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NumberElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumberElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NumberElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumberElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumberElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumberElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumberElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumberElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type NumberElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  AutoComplete: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PlaceHolder: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type NumberElementBlockOutput = {
  __typename: 'NumberElementBlockOutput';
  autocomplete: Maybe<NumberElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<NumberElementBlockFacet>;
  items: Maybe<Array<Maybe<NumberElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type NumberElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type NumberElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  AutoComplete: InputMaybe<IntFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<NumberElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<NumberElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<NumberElementBlockWhereInput>>>;
};

export type NumberFacet = {
  __typename: 'NumberFacet';
  count: Maybe<Scalars['Int']['output']>;
  name: Maybe<Scalars['String']['output']>;
};

/** Filter product search blocks by field values */
export type NumericFilterBlock = IContent & IData & {
  __typename: 'NumericFilterBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** Name of field in index */
  FieldName: Maybe<Scalars['String']['output']>;
  FieldOperator: Maybe<Scalars['String']['output']>;
  /** The value to filter search results on */
  FieldValue: Maybe<Scalars['Float']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Filter product search blocks by field values */
export type NumericFilterBlockFieldNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type NumericFilterBlockFieldOperatorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type NumericFilterBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type NumericFilterBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type NumericFilterBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type NumericFilterBlockAutocomplete = {
  __typename: 'NumericFilterBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type NumericFilterBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type NumericFilterBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type NumericFilterBlockFacet = {
  __typename: 'NumericFilterBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FieldName: Maybe<Array<Maybe<StringFacet>>>;
  FieldOperator: Maybe<Array<Maybe<StringFacet>>>;
  FieldValue: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type NumericFilterBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumericFilterBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumericFilterBlockFacetFieldNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetFieldOperatorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetFieldValueArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type NumericFilterBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumericFilterBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumericFilterBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type NumericFilterBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type NumericFilterBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type NumericFilterBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FieldName: InputMaybe<OrderBy>;
  FieldOperator: InputMaybe<OrderBy>;
  FieldValue: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type NumericFilterBlockOutput = {
  __typename: 'NumericFilterBlockOutput';
  autocomplete: Maybe<NumericFilterBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<NumericFilterBlockFacet>;
  items: Maybe<Array<Maybe<NumericFilterBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type NumericFilterBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type NumericFilterBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FieldName: InputMaybe<SearchableStringFilterInput>;
  FieldOperator: InputMaybe<SearchableStringFilterInput>;
  FieldValue: InputMaybe<FloatFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<NumericFilterBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<NumericFilterBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<NumericFilterBlockWhereInput>>>;
};

export type OdpListConsentFormBlock = IContent & IData & {
  __typename: 'ODPListConsentFormBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AutoComplete: Maybe<Scalars['Int']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type OdpListConsentFormBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListConsentFormBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OdpListConsentFormBlockAutocomplete = {
  __typename: 'ODPListConsentFormBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OdpListConsentFormBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListConsentFormBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OdpListConsentFormBlockFacet = {
  __typename: 'ODPListConsentFormBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AutoComplete: Maybe<Array<Maybe<NumberFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type OdpListConsentFormBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetAutoCompleteArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type OdpListConsentFormBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListConsentFormBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type OdpListConsentFormBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListConsentFormBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListConsentFormBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListConsentFormBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListConsentFormBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListConsentFormBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OdpListConsentFormBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  AutoComplete: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PlaceHolder: InputMaybe<OrderBy>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OdpListConsentFormBlockOutput = {
  __typename: 'ODPListConsentFormBlockOutput';
  autocomplete: Maybe<OdpListConsentFormBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OdpListConsentFormBlockFacet>;
  items: Maybe<Array<Maybe<OdpListConsentFormBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OdpListConsentFormBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OdpListConsentFormBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  AutoComplete: InputMaybe<IntFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OdpListConsentFormBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OdpListConsentFormBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OdpListConsentFormBlockWhereInput>>>;
};

export type OdpListFormBlock = IContent & IData & {
  __typename: 'ODPListFormBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  ListId: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type OdpListFormBlockListIdArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListFormBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListFormBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListFormBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OdpListFormBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OdpListFormBlockAutocomplete = {
  __typename: 'ODPListFormBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OdpListFormBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OdpListFormBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OdpListFormBlockFacet = {
  __typename: 'ODPListFormBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  ListId: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OdpListFormBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListFormBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListFormBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetListIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListFormBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListFormBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OdpListFormBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OdpListFormBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OdpListFormBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  ListId: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OdpListFormBlockOutput = {
  __typename: 'ODPListFormBlockOutput';
  autocomplete: Maybe<OdpListFormBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OdpListFormBlockFacet>;
  items: Maybe<Array<Maybe<OdpListFormBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OdpListFormBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OdpListFormBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  ListId: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OdpListFormBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OdpListFormBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OdpListFormBlockWhereInput>>>;
};

export enum OrderBy {
  Asc = 'ASC',
  Desc = 'DESC'
}

export enum OrderByFacetType {
  Count = 'COUNT',
  Value = 'VALUE'
}

/** The reset passord template mail page. */
export type OrderConfirmationMailPage = IContent & IData & {
  __typename: 'OrderConfirmationMailPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Subject: Maybe<Scalars['String']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageSubjectArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset passord template mail page. */
export type OrderConfirmationMailPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderConfirmationMailPageAutocomplete = {
  __typename: 'OrderConfirmationMailPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderConfirmationMailPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationMailPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderConfirmationMailPageFacet = {
  __typename: 'OrderConfirmationMailPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Subject: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderConfirmationMailPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationMailPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationMailPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationMailPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationMailPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationMailPageFacetSubjectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationMailPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderConfirmationMailPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Subject: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderConfirmationMailPageOutput = {
  __typename: 'OrderConfirmationMailPageOutput';
  autocomplete: Maybe<OrderConfirmationMailPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderConfirmationMailPageFacet>;
  items: Maybe<Array<Maybe<OrderConfirmationMailPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderConfirmationMailPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderConfirmationMailPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Subject: InputMaybe<SearchableStringFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderConfirmationMailPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderConfirmationMailPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderConfirmationMailPageWhereInput>>>;
};

/** Page to show when succesful checkout */
export type OrderConfirmationPage = IContent & IData & {
  __typename: 'OrderConfirmationPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  Body: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RegistrationArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageRegistrationAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPageTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show when succesful checkout */
export type OrderConfirmationPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderConfirmationPageAutocomplete = {
  __typename: 'OrderConfirmationPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderConfirmationPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderConfirmationPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderConfirmationPageFacet = {
  __typename: 'OrderConfirmationPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Body: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RegistrationArea: Maybe<ContentAreaItemModelSearchFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderConfirmationPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderConfirmationPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderConfirmationPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderConfirmationPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Body: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RegistrationArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderConfirmationPageOutput = {
  __typename: 'OrderConfirmationPageOutput';
  autocomplete: Maybe<OrderConfirmationPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderConfirmationPageFacet>;
  items: Maybe<Array<Maybe<OrderConfirmationPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderConfirmationPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderConfirmationPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Body: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RegistrationArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderConfirmationPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderConfirmationPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderConfirmationPageWhereInput>>>;
};

/** Page for customer to view their order */
export type OrderDetailsPage = IContent & IData & {
  __typename: 'OrderDetailsPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for customer to view their order */
export type OrderDetailsPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order */
export type OrderDetailsPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderDetailsPageAutocomplete = {
  __typename: 'OrderDetailsPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderDetailsPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderDetailsPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderDetailsPageFacet = {
  __typename: 'OrderDetailsPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderDetailsPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderDetailsPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderDetailsPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderDetailsPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderDetailsPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderDetailsPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderDetailsPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderDetailsPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderDetailsPageOutput = {
  __typename: 'OrderDetailsPageOutput';
  autocomplete: Maybe<OrderDetailsPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderDetailsPageFacet>;
  items: Maybe<Array<Maybe<OrderDetailsPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderDetailsPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderDetailsPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderDetailsPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderDetailsPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderDetailsPageWhereInput>>>;
};

export type OrderHistoryBlock = IContent & IData & {
  __typename: 'OrderHistoryBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type OrderHistoryBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OrderHistoryBlockMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OrderHistoryBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OrderHistoryBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OrderHistoryBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OrderHistoryBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type OrderHistoryBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderHistoryBlockAutocomplete = {
  __typename: 'OrderHistoryBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderHistoryBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderHistoryBlockFacet = {
  __typename: 'OrderHistoryBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderHistoryBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type OrderHistoryBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderHistoryBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderHistoryBlockOutput = {
  __typename: 'OrderHistoryBlockOutput';
  autocomplete: Maybe<OrderHistoryBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderHistoryBlockFacet>;
  items: Maybe<Array<Maybe<OrderHistoryBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderHistoryBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderHistoryBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderHistoryBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderHistoryBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderHistoryBlockWhereInput>>>;
};

/** Page for customer to view their order history. */
export type OrderHistoryPage = IContent & IData & {
  __typename: 'OrderHistoryPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to view their order history. */
export type OrderHistoryPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderHistoryPageAutocomplete = {
  __typename: 'OrderHistoryPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderHistoryPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderHistoryPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderHistoryPageFacet = {
  __typename: 'OrderHistoryPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderHistoryPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderHistoryPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderHistoryPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderHistoryPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderHistoryPageOutput = {
  __typename: 'OrderHistoryPageOutput';
  autocomplete: Maybe<OrderHistoryPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderHistoryPageFacet>;
  items: Maybe<Array<Maybe<OrderHistoryPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderHistoryPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderHistoryPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderHistoryPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderHistoryPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderHistoryPageWhereInput>>>;
};

/** Page to manage an organization member's order pad */
export type OrderPadsPage = IContent & IData & {
  __typename: 'OrderPadsPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization member's order pad */
export type OrderPadsPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderPadsPageAutocomplete = {
  __typename: 'OrderPadsPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderPadsPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderPadsPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderPadsPageFacet = {
  __typename: 'OrderPadsPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderPadsPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderPadsPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderPadsPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderPadsPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderPadsPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderPadsPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderPadsPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderPadsPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderPadsPageOutput = {
  __typename: 'OrderPadsPageOutput';
  autocomplete: Maybe<OrderPadsPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderPadsPageFacet>;
  items: Maybe<Array<Maybe<OrderPadsPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderPadsPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderPadsPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderPadsPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderPadsPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderPadsPageWhereInput>>>;
};

/** A block that allows to search/filter on orders */
export type OrderSearchBlock = IContent & IData & {
  __typename: 'OrderSearchBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** A block that allows to search/filter on orders */
export type OrderSearchBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that allows to search/filter on orders */
export type OrderSearchBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that allows to search/filter on orders */
export type OrderSearchBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that allows to search/filter on orders */
export type OrderSearchBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that allows to search/filter on orders */
export type OrderSearchBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that allows to search/filter on orders */
export type OrderSearchBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrderSearchBlockAutocomplete = {
  __typename: 'OrderSearchBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrderSearchBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrderSearchBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrderSearchBlockFacet = {
  __typename: 'OrderSearchBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrderSearchBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type OrderSearchBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderSearchBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderSearchBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderSearchBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderSearchBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrderSearchBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrderSearchBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrderSearchBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrderSearchBlockOutput = {
  __typename: 'OrderSearchBlockOutput';
  autocomplete: Maybe<OrderSearchBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrderSearchBlockFacet>;
  items: Maybe<Array<Maybe<OrderSearchBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrderSearchBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrderSearchBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrderSearchBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrderSearchBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrderSearchBlockWhereInput>>>;
};

/** Page to manage an organizations's orders */
export type OrdersPage = IContent & IData & {
  __typename: 'OrdersPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to manage an organizations's orders */
export type OrdersPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organizations's orders */
export type OrdersPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrdersPageAutocomplete = {
  __typename: 'OrdersPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrdersPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrdersPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrdersPageFacet = {
  __typename: 'OrdersPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrdersPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrdersPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrdersPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrdersPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrdersPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrdersPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrdersPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrdersPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrdersPageOutput = {
  __typename: 'OrdersPageOutput';
  autocomplete: Maybe<OrdersPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrdersPageFacet>;
  items: Maybe<Array<Maybe<OrdersPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrdersPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrdersPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrdersPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrdersPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrdersPageWhereInput>>>;
};

/** Page to manage an organization */
export type OrganizationPage = IContent & IData & {
  __typename: 'OrganizationPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to manage an organization */
export type OrganizationPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization */
export type OrganizationPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type OrganizationPageAutocomplete = {
  __typename: 'OrganizationPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type OrganizationPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type OrganizationPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type OrganizationPageFacet = {
  __typename: 'OrganizationPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type OrganizationPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type OrganizationPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type OrganizationPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type OrganizationPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type OrganizationPageOutput = {
  __typename: 'OrganizationPageOutput';
  autocomplete: Maybe<OrganizationPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<OrganizationPageFacet>;
  items: Maybe<Array<Maybe<OrganizationPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type OrganizationPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type OrganizationPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<OrganizationPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<OrganizationPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<OrganizationPageWhereInput>>>;
};

export type PackageContent = IContent & IData & {
  __typename: 'PackageContent';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<PackageContentAssociations>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<PackageContentCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  InventoryReference: Maybe<ContentModelReference>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MaxQuantity: Maybe<Scalars['Float']['output']>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  MinQuantity: Maybe<Scalars['Float']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  PackageReference: Maybe<ContentModelReference>;
  ParentEntries: Maybe<PackageContentRelations>;
  ParentLink: Maybe<ContentModelReference>;
  PriceReference: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SeoInformation: Maybe<PackageContentSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  ShippingDimensions: Maybe<PackageContentShippingDimensions>;
  ShippingPackageId: Maybe<Scalars['Int']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TaxCategoryId: Maybe<Scalars['Int']['output']>;
  TrackInventory: Maybe<Scalars['Bool']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Weight: Maybe<Scalars['Float']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type PackageContentCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PackageContentDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PackageContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PackageContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PackageContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PackageContentAssociations = {
  __typename: 'PackageContentAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type PackageContentAssociationsAutocomplete = {
  __typename: 'PackageContentAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type PackageContentAssociationsFacet = {
  __typename: 'PackageContentAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type PackageContentAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type PackageContentAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type PackageContentAutocomplete = {
  __typename: 'PackageContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<PackageContentAssociationsAutocomplete>;
  Categories: Maybe<PackageContentCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  InventoryReference: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  PackageReference: Maybe<ContentModelReferenceAutocomplete>;
  ParentEntries: Maybe<PackageContentRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  PriceReference: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SeoInformation: Maybe<PackageContentSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PackageContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PackageContentCategories = {
  __typename: 'PackageContentCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type PackageContentCategoriesAutocomplete = {
  __typename: 'PackageContentCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type PackageContentCategoriesFacet = {
  __typename: 'PackageContentCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type PackageContentCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type PackageContentCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type PackageContentFacet = {
  __typename: 'PackageContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<PackageContentAssociationsFacet>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<PackageContentCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  InventoryReference: Maybe<ContentModelReferenceFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  MinQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PackageReference: Maybe<ContentModelReferenceFacet>;
  ParentEntries: Maybe<PackageContentRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PriceReference: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SeoInformation: Maybe<PackageContentSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  ShippingDimensions: Maybe<PackageContentShippingDimensionsFacet>;
  ShippingPackageId: Maybe<Array<Maybe<NumberFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TaxCategoryId: Maybe<Array<Maybe<NumberFacet>>>;
  TrackInventory: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Weight: Maybe<Array<Maybe<NumberFacet>>>;
};


export type PackageContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PackageContentFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PackageContentFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetMaxQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentFacetMinQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PackageContentFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetShippingPackageIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PackageContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PackageContentFacetTaxCategoryIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentFacetTrackInventoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentFacetWeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type PackageContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<PackageContentAssociationsOrderByInput>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<PackageContentCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  InventoryReference: InputMaybe<ContentModelReferenceOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxQuantity: InputMaybe<OrderBy>;
  MetaClassId: InputMaybe<OrderBy>;
  MinQuantity: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  PackageReference: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentEntries: InputMaybe<PackageContentRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PriceReference: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<PackageContentSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  ShippingDimensions: InputMaybe<PackageContentShippingDimensionsOrderByInput>;
  ShippingPackageId: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TaxCategoryId: InputMaybe<OrderBy>;
  TrackInventory: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Weight: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PackageContentOutput = {
  __typename: 'PackageContentOutput';
  autocomplete: Maybe<PackageContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PackageContentFacet>;
  items: Maybe<Array<Maybe<PackageContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PackageContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PackageContentRelations = {
  __typename: 'PackageContentRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type PackageContentRelationsAutocomplete = {
  __typename: 'PackageContentRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type PackageContentRelationsFacet = {
  __typename: 'PackageContentRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type PackageContentRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type PackageContentRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type PackageContentSeoInformation = {
  __typename: 'PackageContentSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type PackageContentSeoInformationAutocomplete = {
  __typename: 'PackageContentSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PackageContentSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PackageContentSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PackageContentSeoInformationFacet = {
  __typename: 'PackageContentSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type PackageContentSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PackageContentSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PackageContentSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type PackageContentSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type PackageContentShippingDimensions = {
  __typename: 'PackageContentShippingDimensions';
  Height: Maybe<Scalars['Float']['output']>;
  Length: Maybe<Scalars['Float']['output']>;
  Width: Maybe<Scalars['Float']['output']>;
};

export type PackageContentShippingDimensionsFacet = {
  __typename: 'PackageContentShippingDimensionsFacet';
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  Length: Maybe<Array<Maybe<NumberFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type PackageContentShippingDimensionsFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentShippingDimensionsFacetLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PackageContentShippingDimensionsFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type PackageContentShippingDimensionsOrderByInput = {
  Height: InputMaybe<OrderBy>;
  Length: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
};

export type PackageContentShippingDimensionsWhereInput = {
  Height: InputMaybe<FloatFilterInput>;
  Length: InputMaybe<FloatFilterInput>;
  Width: InputMaybe<FloatFilterInput>;
};

export type PackageContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<PackageContentAssociationsWhereInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<PackageContentCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  InventoryReference: InputMaybe<ContentModelReferenceWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxQuantity: InputMaybe<FloatFilterInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  MinQuantity: InputMaybe<FloatFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PackageReference: InputMaybe<ContentModelReferenceWhereInput>;
  ParentEntries: InputMaybe<PackageContentRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PriceReference: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SeoInformation: InputMaybe<PackageContentSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  ShippingDimensions: InputMaybe<PackageContentShippingDimensionsWhereInput>;
  ShippingPackageId: InputMaybe<IntFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TaxCategoryId: InputMaybe<IntFilterInput>;
  TrackInventory: InputMaybe<BoolFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Weight: InputMaybe<FloatFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PackageContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PackageContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PackageContentWhereInput>>>;
};

/** A block that lists a bunch of pages */
export type PageListBlock = IContent & IData & {
  __typename: 'PageListBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Display ratio for card image when using Bootstrap Card Group template */
  BootstrapCardRatioOption: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  /** Categories to filter the list on */
  CategoryListFilter: Maybe<Array<Maybe<ContentModelReference>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Count: Maybe<Scalars['Int']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IncludePublishDate: Maybe<Scalars['Bool']['output']>;
  IncludeTeaserText: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  /** Apply for non-Bootstrap Card template */
  OverlayColor: Maybe<Scalars['String']['output']>;
  /** Apply for non-Bootstrap Card template */
  OverlayTextColor: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageTypeFilter: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PreviewOption: Maybe<Scalars['String']['output']>;
  Recursive: Maybe<Scalars['Bool']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  Roots: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  SortOrder: Maybe<Scalars['Int']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  /** Display template to use for page list */
  Template: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** A block that lists a bunch of pages */
export type PageListBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockBootstrapCardRatioOptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockOverlayColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockOverlayTextColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockPreviewOptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockRootsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlockTemplateArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** A block that lists a bunch of pages */
export type PageListBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PageListBlockAutocomplete = {
  __typename: 'PageListBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  CategoryListFilter: Maybe<ContentModelReferenceAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  PageTypeFilter: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PageListBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompletePageTypeFilterArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PageListBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PageListBlockFacet = {
  __typename: 'PageListBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  BootstrapCardRatioOption: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  CategoryListFilter: Maybe<ContentModelReferenceFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Count: Maybe<Array<Maybe<NumberFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IncludePublishDate: Maybe<Array<Maybe<StringFacet>>>;
  IncludeTeaserText: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  OverlayColor: Maybe<Array<Maybe<StringFacet>>>;
  OverlayTextColor: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageTypeFilter: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PreviewOption: Maybe<Array<Maybe<StringFacet>>>;
  Recursive: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  Roots: Maybe<ContentAreaItemModelSearchFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  SortOrder: Maybe<Array<Maybe<NumberFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Template: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PageListBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PageListBlockFacetBootstrapCardRatioOptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PageListBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetCountArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PageListBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PageListBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetIncludePublishDateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetIncludeTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetOverlayColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetOverlayTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetPageTypeFilterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetPreviewOptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetRecursiveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PageListBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetSortOrderArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PageListBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PageListBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PageListBlockFacetTemplateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PageListBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PageListBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  BootstrapCardRatioOption: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  CategoryListFilter: InputMaybe<ContentModelReferenceOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Count: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IncludePublishDate: InputMaybe<OrderBy>;
  IncludeTeaserText: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  OverlayColor: InputMaybe<OrderBy>;
  OverlayTextColor: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageTypeFilter: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PreviewOption: InputMaybe<OrderBy>;
  Recursive: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  Roots: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  SortOrder: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Template: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PageListBlockOutput = {
  __typename: 'PageListBlockOutput';
  autocomplete: Maybe<PageListBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PageListBlockFacet>;
  items: Maybe<Array<Maybe<PageListBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PageListBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PageListBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  BootstrapCardRatioOption: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  CategoryListFilter: InputMaybe<ContentModelReferenceWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Count: InputMaybe<IntFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IncludePublishDate: InputMaybe<BoolFilterInput>;
  IncludeTeaserText: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  OverlayColor: InputMaybe<SearchableStringFilterInput>;
  OverlayTextColor: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  PageTypeFilter: InputMaybe<StringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PreviewOption: InputMaybe<SearchableStringFilterInput>;
  Recursive: InputMaybe<BoolFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  Roots: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  SortOrder: InputMaybe<IntFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Template: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PageListBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PageListBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PageListBlockWhereInput>>>;
};

export type ParagraphTextElementBlock = IContent & IData & {
  __typename: 'ParagraphTextElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DisablePlaceholdersReplacement: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FormSubmissionId: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParagraphText: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ParagraphTextElementBlockFormSubmissionIdArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ParagraphTextElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ParagraphTextElementBlockParagraphTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ParagraphTextElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ParagraphTextElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ParagraphTextElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ParagraphTextElementBlockAutocomplete = {
  __typename: 'ParagraphTextElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ParagraphTextElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ParagraphTextElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ParagraphTextElementBlockFacet = {
  __typename: 'ParagraphTextElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisablePlaceholdersReplacement: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FormSubmissionId: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParagraphText: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ParagraphTextElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ParagraphTextElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ParagraphTextElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ParagraphTextElementBlockFacetDisablePlaceholdersReplacementArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetFormSubmissionIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetParagraphTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ParagraphTextElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ParagraphTextElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ParagraphTextElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ParagraphTextElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ParagraphTextElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisablePlaceholdersReplacement: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FormSubmissionId: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParagraphText: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ParagraphTextElementBlockOutput = {
  __typename: 'ParagraphTextElementBlockOutput';
  autocomplete: Maybe<ParagraphTextElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ParagraphTextElementBlockFacet>;
  items: Maybe<Array<Maybe<ParagraphTextElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ParagraphTextElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ParagraphTextElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisablePlaceholdersReplacement: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FormSubmissionId: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParagraphText: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ParagraphTextElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ParagraphTextElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ParagraphTextElementBlockWhereInput>>>;
};

/** Using to preview pdf files in system */
export type PdfFile = IContent & IData & {
  __typename: 'PdfFile';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Using to preview pdf files in system */
export type PdfFileContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Using to preview pdf files in system */
export type PdfFileNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Using to preview pdf files in system */
export type PdfFile_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Using to preview pdf files in system */
export type PdfFile_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PdfFileAutocomplete = {
  __typename: 'PdfFileAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PdfFileAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PdfFileAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PdfFileFacet = {
  __typename: 'PdfFileFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PdfFileFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PdfFileFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PdfFileFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PdfFileFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PdfFileFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PdfFileFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PdfFileFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PdfFileOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PdfFileOutput = {
  __typename: 'PdfFileOutput';
  autocomplete: Maybe<PdfFileAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PdfFileFacet>;
  items: Maybe<Array<Maybe<PdfFile>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PdfFileOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PdfFileWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PdfFileWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PdfFileWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PdfFileWhereInput>>>;
};

/** Used to find people within an organization */
export type PersonList = IContent & IData & {
  __typename: 'PersonList';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to find people within an organization */
export type PersonListAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListPageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonListTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonList_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to find people within an organization */
export type PersonList_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PersonListAutocomplete = {
  __typename: 'PersonListAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PersonListAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonListAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PersonListFacet = {
  __typename: 'PersonListFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PersonListFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonListFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonListFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonListFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonListFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonListFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonListFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PersonListOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PersonListOutput = {
  __typename: 'PersonListOutput';
  autocomplete: Maybe<PersonListAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PersonListFacet>;
  items: Maybe<Array<Maybe<PersonList>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PersonListOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PersonListWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PersonListWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PersonListWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PersonListWhereInput>>>;
};

/** Used to show info of specific person */
export type PersonPage = IContent & IData & {
  __typename: 'PersonPage';
  About: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  Email: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Image: Maybe<ContentModelReference>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  JobTitle: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Location: Maybe<Scalars['String']['output']>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  Phone: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Sector: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to show info of specific person */
export type PersonPageAboutArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageEmailArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageJobTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageLocationArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPagePhoneArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageSectorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to show info of specific person */
export type PersonPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PersonPageAutocomplete = {
  __typename: 'PersonPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Image: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PersonPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PersonPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PersonPageFacet = {
  __typename: 'PersonPageFacet';
  About: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  Email: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Image: Maybe<ContentModelReferenceFacet>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  JobTitle: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Location: Maybe<Array<Maybe<StringFacet>>>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Phone: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Sector: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PersonPageFacetAboutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetEmailArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetJobTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetLocationArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetPhoneArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonPageFacetSectorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PersonPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PersonPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PersonPageOrderByInput = {
  About: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  Email: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Image: InputMaybe<ContentModelReferenceOrderByInput>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  JobTitle: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Location: InputMaybe<OrderBy>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Phone: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Sector: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PersonPageOutput = {
  __typename: 'PersonPageOutput';
  autocomplete: Maybe<PersonPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PersonPageFacet>;
  items: Maybe<Array<Maybe<PersonPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PersonPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PersonPageWhereInput = {
  About: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  Email: InputMaybe<SearchableStringFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Image: InputMaybe<ContentModelReferenceWhereInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  JobTitle: InputMaybe<SearchableStringFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Location: InputMaybe<SearchableStringFilterInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Phone: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Sector: InputMaybe<SearchableStringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PersonPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PersonPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PersonPageWhereInput>>>;
};

export type PredefinedHiddenElementBlock = IContent & IData & {
  __typename: 'PredefinedHiddenElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type PredefinedHiddenElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PredefinedHiddenElementBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PredefinedHiddenElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PredefinedHiddenElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PredefinedHiddenElementBlockAutocomplete = {
  __typename: 'PredefinedHiddenElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PredefinedHiddenElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PredefinedHiddenElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PredefinedHiddenElementBlockFacet = {
  __typename: 'PredefinedHiddenElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PredefinedHiddenElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PredefinedHiddenElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PredefinedHiddenElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PredefinedHiddenElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PredefinedHiddenElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PredefinedHiddenElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PredefinedHiddenElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PredefinedHiddenElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PredefinedHiddenElementBlockOutput = {
  __typename: 'PredefinedHiddenElementBlockOutput';
  autocomplete: Maybe<PredefinedHiddenElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PredefinedHiddenElementBlockFacet>;
  items: Maybe<Array<Maybe<PredefinedHiddenElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PredefinedHiddenElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PredefinedHiddenElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PredefinedHiddenElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PredefinedHiddenElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PredefinedHiddenElementBlockWhereInput>>>;
};

export type ProductContent = IContent & IData & {
  __typename: 'ProductContent';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<ProductContentAssociations>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<ProductContentCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentEntries: Maybe<ProductContentRelations>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SeoInformation: Maybe<ProductContentSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  VariantsReference: Maybe<ContentModelReference>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ProductContentCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductContentDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ProductContentAssociations = {
  __typename: 'ProductContentAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type ProductContentAssociationsAutocomplete = {
  __typename: 'ProductContentAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type ProductContentAssociationsFacet = {
  __typename: 'ProductContentAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type ProductContentAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type ProductContentAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type ProductContentAutocomplete = {
  __typename: 'ProductContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<ProductContentAssociationsAutocomplete>;
  Categories: Maybe<ProductContentCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<ProductContentRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SeoInformation: Maybe<ProductContentSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  VariantsReference: Maybe<ContentModelReferenceAutocomplete>;
};


export type ProductContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductContentCategories = {
  __typename: 'ProductContentCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type ProductContentCategoriesAutocomplete = {
  __typename: 'ProductContentCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type ProductContentCategoriesFacet = {
  __typename: 'ProductContentCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type ProductContentCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type ProductContentCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type ProductContentFacet = {
  __typename: 'ProductContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<ProductContentAssociationsFacet>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ProductContentCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<ProductContentRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SeoInformation: Maybe<ProductContentSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VariantsReference: Maybe<ContentModelReferenceFacet>;
};


export type ProductContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductContentFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductContentFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductContentFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<ProductContentAssociationsOrderByInput>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<ProductContentCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaClassId: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<ProductContentRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<ProductContentSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VariantsReference: InputMaybe<ContentModelReferenceOrderByInput>;
  _ranking: InputMaybe<Ranking>;
};

export type ProductContentOutput = {
  __typename: 'ProductContentOutput';
  autocomplete: Maybe<ProductContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ProductContentFacet>;
  items: Maybe<Array<Maybe<ProductContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ProductContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductContentRelations = {
  __typename: 'ProductContentRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type ProductContentRelationsAutocomplete = {
  __typename: 'ProductContentRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type ProductContentRelationsFacet = {
  __typename: 'ProductContentRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type ProductContentRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type ProductContentRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type ProductContentSeoInformation = {
  __typename: 'ProductContentSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type ProductContentSeoInformationAutocomplete = {
  __typename: 'ProductContentSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductContentSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductContentSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductContentSeoInformationFacet = {
  __typename: 'ProductContentSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProductContentSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductContentSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductContentSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type ProductContentSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type ProductContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<ProductContentAssociationsWhereInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<ProductContentCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentEntries: InputMaybe<ProductContentRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SeoInformation: InputMaybe<ProductContentSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VariantsReference: InputMaybe<ContentModelReferenceWhereInput>;
  _and: InputMaybe<Array<InputMaybe<ProductContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ProductContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ProductContentWhereInput>>>;
};

/** Product hero block */
export type ProductHeroBlock = IContent & IData & {
  __typename: 'ProductHeroBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  Callout: Maybe<ProductHeroBlockProductHeroBlockCallout>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Image: Maybe<ProductHeroBlockProductHeroBlockImage>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Layout: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Product hero block */
export type ProductHeroBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Product hero block */
export type ProductHeroBlockLayoutArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Product hero block */
export type ProductHeroBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Product hero block */
export type ProductHeroBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Product hero block */
export type ProductHeroBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Product hero block */
export type ProductHeroBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Product hero block */
export type ProductHeroBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ProductHeroBlockAutocomplete = {
  __typename: 'ProductHeroBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Callout: Maybe<ProductHeroBlockProductHeroBlockCalloutAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Image: Maybe<ProductHeroBlockProductHeroBlockImageAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductHeroBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductHeroBlockCallout = IContent & IData & {
  __typename: 'ProductHeroBlockCallout';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Text: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ProductHeroBlockCalloutBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockCalloutMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockCalloutNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockCalloutPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockCalloutTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockCallout_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockCallout_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ProductHeroBlockCalloutAutocomplete = {
  __typename: 'ProductHeroBlockCalloutAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductHeroBlockCalloutAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockCalloutAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductHeroBlockCalloutFacet = {
  __typename: 'ProductHeroBlockCalloutFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Text: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProductHeroBlockCalloutFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockCalloutFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockCalloutFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockCalloutFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockCalloutFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockCalloutFacetTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockCalloutFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductHeroBlockCalloutOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Text: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ProductHeroBlockCalloutOutput = {
  __typename: 'ProductHeroBlockCalloutOutput';
  autocomplete: Maybe<ProductHeroBlockCalloutAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ProductHeroBlockCalloutFacet>;
  items: Maybe<Array<Maybe<ProductHeroBlockCallout>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ProductHeroBlockCalloutOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductHeroBlockCalloutWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Text: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ProductHeroBlockCalloutWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ProductHeroBlockCalloutWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ProductHeroBlockCalloutWhereInput>>>;
};

export type ProductHeroBlockFacet = {
  __typename: 'ProductHeroBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Callout: Maybe<ProductHeroBlockProductHeroBlockCalloutFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Image: Maybe<ProductHeroBlockProductHeroBlockImageFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Layout: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProductHeroBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetLayoutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductHeroBlockImage = IContent & IData & {
  __typename: 'ProductHeroBlockImage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  ImageHeight: Maybe<Scalars['Int']['output']>;
  /** Set image position in the image section to the left, center, right or set a certain position using paddings */
  ImagePosition: Maybe<Scalars['String']['output']>;
  ImageWidth: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  PaddingBottom: Maybe<Scalars['Int']['output']>;
  PaddingLeft: Maybe<Scalars['Int']['output']>;
  PaddingRight: Maybe<Scalars['Int']['output']>;
  PaddingTop: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  Product: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ProductHeroBlockImageImagePositionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockImageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockImageProductArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockImage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ProductHeroBlockImage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ProductHeroBlockImageAutocomplete = {
  __typename: 'ProductHeroBlockImageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductHeroBlockImageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockImageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductHeroBlockImageFacet = {
  __typename: 'ProductHeroBlockImageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  ImageHeight: Maybe<Array<Maybe<NumberFacet>>>;
  ImagePosition: Maybe<Array<Maybe<StringFacet>>>;
  ImageWidth: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PaddingBottom: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingLeft: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingRight: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingTop: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  Product: Maybe<ContentAreaItemModelSearchFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProductHeroBlockImageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockImageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockImageFacetImageHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockImageFacetImagePositionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetImageWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockImageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetPaddingBottomArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockImageFacetPaddingLeftArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockImageFacetPaddingRightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockImageFacetPaddingTopArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockImageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockImageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockImageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockImageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductHeroBlockImageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductHeroBlockImageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  ImageHeight: InputMaybe<OrderBy>;
  ImagePosition: InputMaybe<OrderBy>;
  ImageWidth: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  PaddingBottom: InputMaybe<OrderBy>;
  PaddingLeft: InputMaybe<OrderBy>;
  PaddingRight: InputMaybe<OrderBy>;
  PaddingTop: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Product: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ProductHeroBlockImageOutput = {
  __typename: 'ProductHeroBlockImageOutput';
  autocomplete: Maybe<ProductHeroBlockImageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ProductHeroBlockImageFacet>;
  items: Maybe<Array<Maybe<ProductHeroBlockImage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ProductHeroBlockImageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductHeroBlockImageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  ImageHeight: InputMaybe<IntFilterInput>;
  ImagePosition: InputMaybe<SearchableStringFilterInput>;
  ImageWidth: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PaddingBottom: InputMaybe<IntFilterInput>;
  PaddingLeft: InputMaybe<IntFilterInput>;
  PaddingRight: InputMaybe<IntFilterInput>;
  PaddingTop: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  Product: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ProductHeroBlockImageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ProductHeroBlockImageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ProductHeroBlockImageWhereInput>>>;
};

export type ProductHeroBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Callout: InputMaybe<ProductHeroBlockProductHeroBlockCalloutOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Image: InputMaybe<ProductHeroBlockProductHeroBlockImageOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Layout: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ProductHeroBlockOutput = {
  __typename: 'ProductHeroBlockOutput';
  autocomplete: Maybe<ProductHeroBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ProductHeroBlockFacet>;
  items: Maybe<Array<Maybe<ProductHeroBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ProductHeroBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductHeroBlockProductHeroBlockCallout = {
  __typename: 'ProductHeroBlockProductHeroBlockCallout';
  BackgroundColor: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  Text: Maybe<Scalars['String']['output']>;
};

export type ProductHeroBlockProductHeroBlockCalloutAutocomplete = {
  __typename: 'ProductHeroBlockProductHeroBlockCalloutAutocomplete';
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Text: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductHeroBlockProductHeroBlockCalloutAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockProductHeroBlockCalloutAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockProductHeroBlockCalloutAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductHeroBlockProductHeroBlockCalloutAutocompleteTextArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductHeroBlockProductHeroBlockCalloutFacet = {
  __typename: 'ProductHeroBlockProductHeroBlockCalloutFacet';
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  Text: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProductHeroBlockProductHeroBlockCalloutFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockProductHeroBlockCalloutFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockProductHeroBlockCalloutFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockProductHeroBlockCalloutFacetTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductHeroBlockProductHeroBlockCalloutOrderByInput = {
  BackgroundColor: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  Text: InputMaybe<OrderBy>;
};

export type ProductHeroBlockProductHeroBlockCalloutWhereInput = {
  BackgroundColor: InputMaybe<StringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  Text: InputMaybe<StringFilterInput>;
};

export type ProductHeroBlockProductHeroBlockImage = {
  __typename: 'ProductHeroBlockProductHeroBlockImage';
  ImageHeight: Maybe<Scalars['Int']['output']>;
  ImagePosition: Maybe<Scalars['String']['output']>;
  ImageWidth: Maybe<Scalars['Int']['output']>;
  PaddingBottom: Maybe<Scalars['Int']['output']>;
  PaddingLeft: Maybe<Scalars['Int']['output']>;
  PaddingRight: Maybe<Scalars['Int']['output']>;
  PaddingTop: Maybe<Scalars['Int']['output']>;
  Product: Maybe<Array<Maybe<ContentAreaItemModel>>>;
};

export type ProductHeroBlockProductHeroBlockImageAutocomplete = {
  __typename: 'ProductHeroBlockProductHeroBlockImageAutocomplete';
  ImagePosition: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductHeroBlockProductHeroBlockImageAutocompleteImagePositionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductHeroBlockProductHeroBlockImageFacet = {
  __typename: 'ProductHeroBlockProductHeroBlockImageFacet';
  ImageHeight: Maybe<Array<Maybe<NumberFacet>>>;
  ImagePosition: Maybe<Array<Maybe<StringFacet>>>;
  ImageWidth: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingBottom: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingLeft: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingRight: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingTop: Maybe<Array<Maybe<NumberFacet>>>;
  Product: Maybe<ContentAreaItemModelFacet>;
};


export type ProductHeroBlockProductHeroBlockImageFacetImageHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockProductHeroBlockImageFacetImagePositionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductHeroBlockProductHeroBlockImageFacetImageWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockProductHeroBlockImageFacetPaddingBottomArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockProductHeroBlockImageFacetPaddingLeftArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockProductHeroBlockImageFacetPaddingRightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductHeroBlockProductHeroBlockImageFacetPaddingTopArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type ProductHeroBlockProductHeroBlockImageOrderByInput = {
  ImageHeight: InputMaybe<OrderBy>;
  ImagePosition: InputMaybe<OrderBy>;
  ImageWidth: InputMaybe<OrderBy>;
  PaddingBottom: InputMaybe<OrderBy>;
  PaddingLeft: InputMaybe<OrderBy>;
  PaddingRight: InputMaybe<OrderBy>;
  PaddingTop: InputMaybe<OrderBy>;
  Product: InputMaybe<ContentAreaItemModelOrderByInput>;
};

export type ProductHeroBlockProductHeroBlockImageWhereInput = {
  ImageHeight: InputMaybe<IntFilterInput>;
  ImagePosition: InputMaybe<StringFilterInput>;
  ImageWidth: InputMaybe<IntFilterInput>;
  PaddingBottom: InputMaybe<IntFilterInput>;
  PaddingLeft: InputMaybe<IntFilterInput>;
  PaddingRight: InputMaybe<IntFilterInput>;
  PaddingTop: InputMaybe<IntFilterInput>;
  Product: InputMaybe<ContentAreaItemModelWhereInput>;
};

export type ProductHeroBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Callout: InputMaybe<ProductHeroBlockProductHeroBlockCalloutWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Image: InputMaybe<ProductHeroBlockProductHeroBlockImageWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Layout: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ProductHeroBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ProductHeroBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ProductHeroBlockWhereInput>>>;
};

/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlock = IContent & IData & {
  __typename: 'ProductSearchBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Filter based on all available brands */
  BrandFilter: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  /** Handle discontinued products to show in the list */
  DiscontinuedProductsMode: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** Filters to apply to the search result */
  Filters: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  /** The number of products to show in a row, default is 3 */
  ItemsPerRow: Maybe<Scalars['Int']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  /** The maximum price in the current market currency */
  MaxPrice: Maybe<Scalars['Int']['output']>;
  /** The minimum price in the current market currency */
  MinPrice: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  /** Root categories to get products from, includes sub categories */
  Nodes: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  /** Products to put first in the list */
  PriorityProducts: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RelativePath: Maybe<Scalars['String']['output']>;
  /** The number of products to show in the list, default is 6 */
  ResultsPerPage: Maybe<Scalars['Int']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SearchTerm: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  /** Sort order to apply to the search result */
  SortOrder: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockBrandFilterArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockDiscontinuedProductsModeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockFiltersArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockNodesArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockPriorityProductsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockSearchTermArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlockSortOrderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configurable search block for all products, allows generic filtering */
export type ProductSearchBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ProductSearchBlockAutocomplete = {
  __typename: 'ProductSearchBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProductSearchBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProductSearchBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProductSearchBlockFacet = {
  __typename: 'ProductSearchBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  BrandFilter: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DiscontinuedProductsMode: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Filters: Maybe<ContentAreaItemModelSearchFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  ItemsPerRow: Maybe<Array<Maybe<NumberFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxPrice: Maybe<Array<Maybe<NumberFacet>>>;
  MinPrice: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Nodes: Maybe<ContentAreaItemModelSearchFacet>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PriorityProducts: Maybe<ContentAreaItemModelSearchFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  ResultsPerPage: Maybe<Array<Maybe<NumberFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SearchTerm: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  SortOrder: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProductSearchBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductSearchBlockFacetBrandFilterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductSearchBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductSearchBlockFacetDiscontinuedProductsModeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetItemsPerRowArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductSearchBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetMaxPriceArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductSearchBlockFacetMinPriceArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductSearchBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetResultsPerPageArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ProductSearchBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductSearchBlockFacetSearchTermArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetSortOrderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductSearchBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProductSearchBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProductSearchBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProductSearchBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  BrandFilter: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DiscontinuedProductsMode: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Filters: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  ItemsPerRow: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxPrice: InputMaybe<OrderBy>;
  MinPrice: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Nodes: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PriorityProducts: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  ResultsPerPage: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SearchTerm: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  SortOrder: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ProductSearchBlockOutput = {
  __typename: 'ProductSearchBlockOutput';
  autocomplete: Maybe<ProductSearchBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ProductSearchBlockFacet>;
  items: Maybe<Array<Maybe<ProductSearchBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ProductSearchBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProductSearchBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  BrandFilter: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DiscontinuedProductsMode: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Filters: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  ItemsPerRow: InputMaybe<IntFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxPrice: InputMaybe<IntFilterInput>;
  MinPrice: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Nodes: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PriorityProducts: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  ResultsPerPage: InputMaybe<IntFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SearchTerm: InputMaybe<SearchableStringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  SortOrder: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ProductSearchBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ProductSearchBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ProductSearchBlockWhereInput>>>;
};

/** Page to show and manage profile information */
export type ProfilePage = IContent & IData & {
  __typename: 'ProfilePage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to show and manage profile information */
export type ProfilePageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to show and manage profile information */
export type ProfilePage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ProfilePageAutocomplete = {
  __typename: 'ProfilePageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ProfilePageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ProfilePageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ProfilePageFacet = {
  __typename: 'ProfilePageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ProfilePageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProfilePageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProfilePageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProfilePageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProfilePageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ProfilePageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ProfilePageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ProfilePageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ProfilePageOutput = {
  __typename: 'ProfilePageOutput';
  autocomplete: Maybe<ProfilePageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ProfilePageFacet>;
  items: Maybe<Array<Maybe<ProfilePage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ProfilePageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProfilePageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ProfilePageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ProfilePageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ProfilePageWhereInput>>>;
};

export type PromotionSchedule = IContent & IData & {
  __typename: 'PromotionSchedule';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CampaignLink: Maybe<ContentModelReference>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  UseCampaignDate: Maybe<Scalars['Bool']['output']>;
  ValidFrom: Maybe<Scalars['Date']['output']>;
  ValidUntil: Maybe<Scalars['Date']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type PromotionScheduleNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PromotionSchedule_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PromotionSchedule_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PromotionScheduleAutocomplete = {
  __typename: 'PromotionScheduleAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CampaignLink: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PromotionScheduleAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PromotionScheduleAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PromotionScheduleFacet = {
  __typename: 'PromotionScheduleFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  CampaignLink: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  UseCampaignDate: Maybe<Array<Maybe<StringFacet>>>;
  ValidFrom: Maybe<Array<Maybe<DateFacet>>>;
  ValidUntil: Maybe<Array<Maybe<DateFacet>>>;
};


export type PromotionScheduleFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PromotionScheduleFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PromotionScheduleFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PromotionScheduleFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PromotionScheduleFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PromotionScheduleFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetUseCampaignDateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PromotionScheduleFacetValidFromArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PromotionScheduleFacetValidUntilArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};

export type PromotionScheduleOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  CampaignLink: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  UseCampaignDate: InputMaybe<OrderBy>;
  ValidFrom: InputMaybe<OrderBy>;
  ValidUntil: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PromotionScheduleOutput = {
  __typename: 'PromotionScheduleOutput';
  autocomplete: Maybe<PromotionScheduleAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PromotionScheduleFacet>;
  items: Maybe<Array<Maybe<PromotionSchedule>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PromotionScheduleOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PromotionScheduleWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  CampaignLink: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  UseCampaignDate: InputMaybe<BoolFilterInput>;
  ValidFrom: InputMaybe<DateFilterInput>;
  ValidUntil: InputMaybe<DateFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PromotionScheduleWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PromotionScheduleWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PromotionScheduleWhereInput>>>;
};

export type PurchaseAmount = IContent & IData & {
  __typename: 'PurchaseAmount';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PartiallyFulfilledThreshold: Maybe<Scalars['Float']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type PurchaseAmountNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PurchaseAmount_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PurchaseAmount_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PurchaseAmountAutocomplete = {
  __typename: 'PurchaseAmountAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PurchaseAmountAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseAmountAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PurchaseAmountFacet = {
  __typename: 'PurchaseAmountFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartiallyFulfilledThreshold: Maybe<Array<Maybe<NumberFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PurchaseAmountFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseAmountFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseAmountFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetPartiallyFulfilledThresholdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PurchaseAmountFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseAmountFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseAmountFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseAmountFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseAmountFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PurchaseAmountOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartiallyFulfilledThreshold: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PurchaseAmountOutput = {
  __typename: 'PurchaseAmountOutput';
  autocomplete: Maybe<PurchaseAmountAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PurchaseAmountFacet>;
  items: Maybe<Array<Maybe<PurchaseAmount>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PurchaseAmountOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PurchaseAmountWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartiallyFulfilledThreshold: InputMaybe<FloatFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PurchaseAmountWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PurchaseAmountWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PurchaseAmountWhereInput>>>;
};

export type PurchaseQuantity = IContent & IData & {
  __typename: 'PurchaseQuantity';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Items: Maybe<Array<Maybe<ContentModelReference>>>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MatchRecursive: Maybe<Scalars['Bool']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PartiallyFulfilledThreshold: Maybe<Scalars['Float']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RequiredQuantity: Maybe<Scalars['Int']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type PurchaseQuantityNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PurchaseQuantity_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type PurchaseQuantity_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type PurchaseQuantityAutocomplete = {
  __typename: 'PurchaseQuantityAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Items: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type PurchaseQuantityAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type PurchaseQuantityAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type PurchaseQuantityFacet = {
  __typename: 'PurchaseQuantityFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Items: Maybe<ContentModelReferenceFacet>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MatchRecursive: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PartiallyFulfilledThreshold: Maybe<Array<Maybe<NumberFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RequiredQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type PurchaseQuantityFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseQuantityFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseQuantityFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetMatchRecursiveArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetPartiallyFulfilledThresholdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PurchaseQuantityFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetRequiredQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type PurchaseQuantityFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseQuantityFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseQuantityFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type PurchaseQuantityFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type PurchaseQuantityFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type PurchaseQuantityOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Items: InputMaybe<ContentModelReferenceOrderByInput>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MatchRecursive: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PartiallyFulfilledThreshold: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RequiredQuantity: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type PurchaseQuantityOutput = {
  __typename: 'PurchaseQuantityOutput';
  autocomplete: Maybe<PurchaseQuantityAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<PurchaseQuantityFacet>;
  items: Maybe<Array<Maybe<PurchaseQuantity>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type PurchaseQuantityOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type PurchaseQuantityWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Items: InputMaybe<ContentModelReferenceWhereInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MatchRecursive: InputMaybe<BoolFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PartiallyFulfilledThreshold: InputMaybe<FloatFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RequiredQuantity: InputMaybe<IntFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<PurchaseQuantityWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<PurchaseQuantityWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<PurchaseQuantityWhereInput>>>;
};

export type Query = {
  __typename: 'Query';
  AddressBookPage: Maybe<AddressBookPageOutput>;
  AddressesElementBlock: Maybe<AddressesElementBlockOutput>;
  AssetsDownloadLinksBlock: Maybe<AssetsDownloadLinksBlockOutput>;
  Associations: Maybe<AssociationsOutput>;
  BlogCommentBlock: Maybe<BlogCommentBlockOutput>;
  BlogItemPage: Maybe<BlogItemPageOutput>;
  BlogListPage: Maybe<BlogListPageOutput>;
  BookmarksPage: Maybe<BookmarksPageOutput>;
  BootstrapCardBlock: Maybe<BootstrapCardBlockOutput>;
  BreadcrumbBlock: Maybe<BreadcrumbBlockOutput>;
  BudgetingPage: Maybe<BudgetingPageOutput>;
  BundleContent: Maybe<BundleContentOutput>;
  ButtonBlock: Maybe<ButtonBlockOutput>;
  CalendarBlock: Maybe<CalendarBlockOutput>;
  CalendarEventPage: Maybe<CalendarEventPageOutput>;
  CallToActionBlock: Maybe<CallToActionBlockOutput>;
  CaptchaElementBlock: Maybe<CaptchaElementBlockOutput>;
  CarouselBlock: Maybe<CarouselBlockOutput>;
  CarouselControls: Maybe<CarouselControlsOutput>;
  CartPage: Maybe<CartPageOutput>;
  CatalogContent: Maybe<CatalogContentOutput>;
  Categories: Maybe<CategoriesOutput>;
  CategoryBlock: Maybe<CategoryBlockOutput>;
  CheckoutPage: Maybe<CheckoutPageOutput>;
  ChoiceElementBlock: Maybe<ChoiceElementBlockOutput>;
  CodingFile: Maybe<CodingFileOutput>;
  CollectionPage: Maybe<CollectionPageOutput>;
  CommentsBlock: Maybe<CommentsBlockOutput>;
  CommunityPage: Maybe<CommunityPageOutput>;
  ContainerBlock: Maybe<ContainerBlockOutput>;
  Content: Maybe<ContentOutput>;
  CouponData: Maybe<CouponDataOutput>;
  CreditCardPage: Maybe<CreditCardPageOutput>;
  CustomViewConfigurationBlock: Maybe<CustomViewConfigurationBlockOutput>;
  DAMAsset: Maybe<DamAssetOutput>;
  DAMImageAsset: Maybe<DamImageAssetOutput>;
  DAMVideoAsset: Maybe<DamVideoAssetOutput>;
  Data: Maybe<DataOutput>;
  DateTimeElementBlock: Maybe<DateTimeElementBlockOutput>;
  DateTimeRangeElementBlock: Maybe<DateTimeRangeElementBlockOutput>;
  DiscountItems: Maybe<DiscountItemsOutput>;
  DynamicProduct: Maybe<DynamicProductOutput>;
  DynamicVariant: Maybe<DynamicVariantOutput>;
  ElevatedRoleBlock: Maybe<ElevatedRoleBlockOutput>;
  ExistsFilterBlock: Maybe<ExistsFilterBlockOutput>;
  FacebookBlock: Maybe<FacebookBlockOutput>;
  FeedBlock: Maybe<FeedBlockOutput>;
  FileUploadElementBlock: Maybe<FileUploadElementBlockOutput>;
  FilterActivitiesBlock: Maybe<FilterActivitiesBlockOutput>;
  FilterContinentsBlock: Maybe<FilterContinentsBlockOutput>;
  FilterDistancesBlock: Maybe<FilterDistancesBlockOutput>;
  FilterTemperaturesBlock: Maybe<FilterTemperaturesBlockOutput>;
  FixedPricePurchaseQuantity: Maybe<FixedPricePurchaseQuantityOutput>;
  FolderPage: Maybe<FolderPageOutput>;
  FormContainerBlock: Maybe<FormContainerBlockOutput>;
  FormStepBlock: Maybe<FormStepBlockOutput>;
  FoundationPdfFile: Maybe<FoundationPdfFileOutput>;
  GenericBundle: Maybe<GenericBundleOutput>;
  GenericNode: Maybe<GenericNodeOutput>;
  GenericPackage: Maybe<GenericPackageOutput>;
  GenericProduct: Maybe<GenericProductOutput>;
  GenericVariant: Maybe<GenericVariantOutput>;
  GiftCardPage: Maybe<GiftCardPageOutput>;
  GoogleMapsBlock: Maybe<GoogleMapsBlockOutput>;
  GroupAdmissionBlock: Maybe<GroupAdmissionBlockOutput>;
  GroupCreationBlock: Maybe<GroupCreationBlockOutput>;
  HcaptchaElementBlock: Maybe<HcaptchaElementBlockOutput>;
  HealthChatbotBlock: Maybe<HealthChatbotBlockOutput>;
  HeroBlock: Maybe<HeroBlockOutput>;
  HeroBlockCallout: Maybe<HeroBlockCalloutOutput>;
  HomePage: Maybe<HomePageOutput>;
  ImageChoiceElementBlock: Maybe<ImageChoiceElementBlockOutput>;
  ImageMediaData: Maybe<ImageMediaDataOutput>;
  LandingPage: Maybe<LandingPageOutput>;
  LikeButtonBlock: Maybe<LikeButtonBlockOutput>;
  LocationItemPage: Maybe<LocationItemPageOutput>;
  LocationListPage: Maybe<LocationListPageOutput>;
  MembershipAffiliationBlock: Maybe<MembershipAffiliationBlockOutput>;
  MembershipDisplayBlock: Maybe<MembershipDisplayBlockOutput>;
  MenuItemBlock: Maybe<MenuItemBlockOutput>;
  ModalBlock: Maybe<ModalBlockOutput>;
  MonetaryReward: Maybe<MonetaryRewardOutput>;
  NavigationBlock: Maybe<NavigationBlockOutput>;
  NewProductsPage: Maybe<NewProductsPageOutput>;
  NodeContent: Maybe<NodeContentOutput>;
  NumberElementBlock: Maybe<NumberElementBlockOutput>;
  NumericFilterBlock: Maybe<NumericFilterBlockOutput>;
  ODPListConsentFormBlock: Maybe<OdpListConsentFormBlockOutput>;
  ODPListFormBlock: Maybe<OdpListFormBlockOutput>;
  OrderConfirmationMailPage: Maybe<OrderConfirmationMailPageOutput>;
  OrderConfirmationPage: Maybe<OrderConfirmationPageOutput>;
  OrderDetailsPage: Maybe<OrderDetailsPageOutput>;
  OrderHistoryBlock: Maybe<OrderHistoryBlockOutput>;
  OrderHistoryPage: Maybe<OrderHistoryPageOutput>;
  OrderPadsPage: Maybe<OrderPadsPageOutput>;
  OrderSearchBlock: Maybe<OrderSearchBlockOutput>;
  OrdersPage: Maybe<OrdersPageOutput>;
  OrganizationPage: Maybe<OrganizationPageOutput>;
  PackageContent: Maybe<PackageContentOutput>;
  PageListBlock: Maybe<PageListBlockOutput>;
  ParagraphTextElementBlock: Maybe<ParagraphTextElementBlockOutput>;
  PdfFile: Maybe<PdfFileOutput>;
  PersonList: Maybe<PersonListOutput>;
  PersonPage: Maybe<PersonPageOutput>;
  PredefinedHiddenElementBlock: Maybe<PredefinedHiddenElementBlockOutput>;
  ProductContent: Maybe<ProductContentOutput>;
  ProductHeroBlock: Maybe<ProductHeroBlockOutput>;
  ProductHeroBlockCallout: Maybe<ProductHeroBlockCalloutOutput>;
  ProductHeroBlockImage: Maybe<ProductHeroBlockImageOutput>;
  ProductSearchBlock: Maybe<ProductSearchBlockOutput>;
  ProfilePage: Maybe<ProfilePageOutput>;
  PromotionSchedule: Maybe<PromotionScheduleOutput>;
  PurchaseAmount: Maybe<PurchaseAmountOutput>;
  PurchaseQuantity: Maybe<PurchaseQuantityOutput>;
  QuickOrderBlock: Maybe<QuickOrderBlockOutput>;
  QuickOrderPage: Maybe<QuickOrderPageOutput>;
  RangeElementBlock: Maybe<RangeElementBlockOutput>;
  RatingBlock: Maybe<RatingBlockOutput>;
  RecaptchaElementBlock: Maybe<RecaptchaElementBlockOutput>;
  RedemptionLimitsData: Maybe<RedemptionLimitsDataOutput>;
  Relations: Maybe<RelationsOutput>;
  ReportingMediaData: Maybe<ReportingMediaDataOutput>;
  ResetButtonElementBlock: Maybe<ResetButtonElementBlockOutput>;
  ResetPasswordMailPage: Maybe<ResetPasswordMailPageOutput>;
  ResetPasswordPage: Maybe<ResetPasswordPageOutput>;
  RssReaderBlock: Maybe<RssReaderBlockOutput>;
  SalesPage: Maybe<SalesPageOutput>;
  SearchResultPage: Maybe<SearchResultPageOutput>;
  SelectionElementBlock: Maybe<SelectionElementBlockOutput>;
  SeoInformation: Maybe<SeoInformationOutput>;
  SharedCartPage: Maybe<SharedCartPageOutput>;
  ShippingDimensions: Maybe<ShippingDimensionsOutput>;
  SiteDefinition: Maybe<SiteDefinitionOutput>;
  StandardFile: Maybe<StandardFileOutput>;
  StandardPage: Maybe<StandardPageOutput>;
  StorePage: Maybe<StorePageOutput>;
  StringFilterBlock: Maybe<StringFilterBlockOutput>;
  SubOrganizationPage: Maybe<SubOrganizationPageOutput>;
  SubmitButtonElementBlock: Maybe<SubmitButtonElementBlockOutput>;
  SubscriptionBlock: Maybe<SubscriptionBlockOutput>;
  SubscriptionDetailPage: Maybe<SubscriptionDetailPageOutput>;
  SubscriptionHistoryPage: Maybe<SubscriptionHistoryPageOutput>;
  TagPage: Maybe<TagPageOutput>;
  TeaserBlock: Maybe<TeaserBlockOutput>;
  TextBlock: Maybe<TextBlockOutput>;
  TextareaElementBlock: Maybe<TextareaElementBlockOutput>;
  TextboxElementBlock: Maybe<TextboxElementBlockOutput>;
  ThreeColumnLandingPage: Maybe<ThreeColumnLandingPageOutput>;
  TwitterBlock: Maybe<TwitterBlockOutput>;
  TwoColumnLandingPage: Maybe<TwoColumnLandingPageOutput>;
  UrlElementBlock: Maybe<UrlElementBlockOutput>;
  UsersPage: Maybe<UsersPageOutput>;
  VariationContent: Maybe<VariationContentOutput>;
  VectorImageMediaData: Maybe<VectorImageMediaDataOutput>;
  VideoBlock: Maybe<VideoBlockOutput>;
  VideoFile: Maybe<VideoFileOutput>;
  VimeoBlock: Maybe<VimeoBlockOutput>;
  VisitorDataHiddenElementBlock: Maybe<VisitorDataHiddenElementBlockOutput>;
  WebImageMediaData: Maybe<WebImageMediaDataOutput>;
  WidgetBlock: Maybe<WidgetBlockOutput>;
  WishListPage: Maybe<WishListPageOutput>;
  YouTubeBlock: Maybe<YouTubeBlockOutput>;
};


export type QueryAddressBookPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AddressBookPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AddressBookPageWhereInput>;
};


export type QueryAddressesElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AddressesElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AddressesElementBlockWhereInput>;
};


export type QueryAssetsDownloadLinksBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AssetsDownloadLinksBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AssetsDownloadLinksBlockWhereInput>;
};


export type QueryAssociationsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AssociationsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AssociationsWhereInput>;
};


export type QueryBlogCommentBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BlogCommentBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BlogCommentBlockWhereInput>;
};


export type QueryBlogItemPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BlogItemPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BlogItemPageWhereInput>;
};


export type QueryBlogListPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BlogListPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BlogListPageWhereInput>;
};


export type QueryBookmarksPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BookmarksPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BookmarksPageWhereInput>;
};


export type QueryBootstrapCardBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BootstrapCardBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BootstrapCardBlockWhereInput>;
};


export type QueryBreadcrumbBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BreadcrumbBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BreadcrumbBlockWhereInput>;
};


export type QueryBudgetingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BudgetingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BudgetingPageWhereInput>;
};


export type QueryBundleContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BundleContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BundleContentWhereInput>;
};


export type QueryButtonBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ButtonBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ButtonBlockWhereInput>;
};


export type QueryCalendarBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CalendarBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CalendarBlockWhereInput>;
};


export type QueryCalendarEventPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CalendarEventPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CalendarEventPageWhereInput>;
};


export type QueryCallToActionBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CallToActionBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CallToActionBlockWhereInput>;
};


export type QueryCaptchaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CaptchaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CaptchaElementBlockWhereInput>;
};


export type QueryCarouselBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CarouselBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CarouselBlockWhereInput>;
};


export type QueryCarouselControlsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CarouselControlsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CarouselControlsWhereInput>;
};


export type QueryCartPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CartPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CartPageWhereInput>;
};


export type QueryCatalogContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CatalogContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CatalogContentWhereInput>;
};


export type QueryCategoriesArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CategoriesOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CategoriesWhereInput>;
};


export type QueryCategoryBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CategoryBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CategoryBlockWhereInput>;
};


export type QueryCheckoutPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CheckoutPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CheckoutPageWhereInput>;
};


export type QueryChoiceElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ChoiceElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ChoiceElementBlockWhereInput>;
};


export type QueryCodingFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CodingFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CodingFileWhereInput>;
};


export type QueryCollectionPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CollectionPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CollectionPageWhereInput>;
};


export type QueryCommentsBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CommentsBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CommentsBlockWhereInput>;
};


export type QueryCommunityPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CommunityPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CommunityPageWhereInput>;
};


export type QueryContainerBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ContainerBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ContainerBlockWhereInput>;
};


export type QueryContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ContentWhereInput>;
};


export type QueryCouponDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CouponDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CouponDataWhereInput>;
};


export type QueryCreditCardPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CreditCardPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CreditCardPageWhereInput>;
};


export type QueryCustomViewConfigurationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CustomViewConfigurationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CustomViewConfigurationBlockWhereInput>;
};


export type QueryDamAssetArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DamAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DamAssetWhereInput>;
};


export type QueryDamImageAssetArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DamImageAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DamImageAssetWhereInput>;
};


export type QueryDamVideoAssetArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DamVideoAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DamVideoAssetWhereInput>;
};


export type QueryDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<System_Locales>>>;
  orderBy: InputMaybe<DataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DataWhereInput>;
};


export type QueryDateTimeElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DateTimeElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DateTimeElementBlockWhereInput>;
};


export type QueryDateTimeRangeElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DateTimeRangeElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DateTimeRangeElementBlockWhereInput>;
};


export type QueryDiscountItemsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DiscountItemsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DiscountItemsWhereInput>;
};


export type QueryDynamicProductArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DynamicProductOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DynamicProductWhereInput>;
};


export type QueryDynamicVariantArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DynamicVariantOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DynamicVariantWhereInput>;
};


export type QueryElevatedRoleBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ElevatedRoleBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ElevatedRoleBlockWhereInput>;
};


export type QueryExistsFilterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ExistsFilterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ExistsFilterBlockWhereInput>;
};


export type QueryFacebookBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FacebookBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FacebookBlockWhereInput>;
};


export type QueryFeedBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FeedBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FeedBlockWhereInput>;
};


export type QueryFileUploadElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FileUploadElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FileUploadElementBlockWhereInput>;
};


export type QueryFilterActivitiesBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterActivitiesBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterActivitiesBlockWhereInput>;
};


export type QueryFilterContinentsBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterContinentsBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterContinentsBlockWhereInput>;
};


export type QueryFilterDistancesBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterDistancesBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterDistancesBlockWhereInput>;
};


export type QueryFilterTemperaturesBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterTemperaturesBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterTemperaturesBlockWhereInput>;
};


export type QueryFixedPricePurchaseQuantityArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FixedPricePurchaseQuantityOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FixedPricePurchaseQuantityWhereInput>;
};


export type QueryFolderPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FolderPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FolderPageWhereInput>;
};


export type QueryFormContainerBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FormContainerBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FormContainerBlockWhereInput>;
};


export type QueryFormStepBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FormStepBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FormStepBlockWhereInput>;
};


export type QueryFoundationPdfFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FoundationPdfFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FoundationPdfFileWhereInput>;
};


export type QueryGenericBundleArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericBundleOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericBundleWhereInput>;
};


export type QueryGenericNodeArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericNodeOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericNodeWhereInput>;
};


export type QueryGenericPackageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericPackageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericPackageWhereInput>;
};


export type QueryGenericProductArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericProductOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericProductWhereInput>;
};


export type QueryGenericVariantArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericVariantOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericVariantWhereInput>;
};


export type QueryGiftCardPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GiftCardPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GiftCardPageWhereInput>;
};


export type QueryGoogleMapsBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GoogleMapsBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GoogleMapsBlockWhereInput>;
};


export type QueryGroupAdmissionBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GroupAdmissionBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GroupAdmissionBlockWhereInput>;
};


export type QueryGroupCreationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GroupCreationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GroupCreationBlockWhereInput>;
};


export type QueryHcaptchaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HcaptchaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HcaptchaElementBlockWhereInput>;
};


export type QueryHealthChatbotBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HealthChatbotBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HealthChatbotBlockWhereInput>;
};


export type QueryHeroBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HeroBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HeroBlockWhereInput>;
};


export type QueryHeroBlockCalloutArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HeroBlockCalloutOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HeroBlockCalloutWhereInput>;
};


export type QueryHomePageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HomePageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HomePageWhereInput>;
};


export type QueryImageChoiceElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ImageChoiceElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ImageChoiceElementBlockWhereInput>;
};


export type QueryImageMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ImageMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ImageMediaDataWhereInput>;
};


export type QueryLandingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LandingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LandingPageWhereInput>;
};


export type QueryLikeButtonBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LikeButtonBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LikeButtonBlockWhereInput>;
};


export type QueryLocationItemPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LocationItemPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LocationItemPageWhereInput>;
};


export type QueryLocationListPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LocationListPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LocationListPageWhereInput>;
};


export type QueryMembershipAffiliationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MembershipAffiliationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MembershipAffiliationBlockWhereInput>;
};


export type QueryMembershipDisplayBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MembershipDisplayBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MembershipDisplayBlockWhereInput>;
};


export type QueryMenuItemBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MenuItemBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MenuItemBlockWhereInput>;
};


export type QueryModalBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ModalBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ModalBlockWhereInput>;
};


export type QueryMonetaryRewardArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MonetaryRewardOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MonetaryRewardWhereInput>;
};


export type QueryNavigationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NavigationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NavigationBlockWhereInput>;
};


export type QueryNewProductsPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NewProductsPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NewProductsPageWhereInput>;
};


export type QueryNodeContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NodeContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NodeContentWhereInput>;
};


export type QueryNumberElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NumberElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NumberElementBlockWhereInput>;
};


export type QueryNumericFilterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NumericFilterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NumericFilterBlockWhereInput>;
};


export type QueryOdpListConsentFormBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OdpListConsentFormBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OdpListConsentFormBlockWhereInput>;
};


export type QueryOdpListFormBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OdpListFormBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OdpListFormBlockWhereInput>;
};


export type QueryOrderConfirmationMailPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderConfirmationMailPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderConfirmationMailPageWhereInput>;
};


export type QueryOrderConfirmationPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderConfirmationPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderConfirmationPageWhereInput>;
};


export type QueryOrderDetailsPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderDetailsPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderDetailsPageWhereInput>;
};


export type QueryOrderHistoryBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderHistoryBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderHistoryBlockWhereInput>;
};


export type QueryOrderHistoryPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderHistoryPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderHistoryPageWhereInput>;
};


export type QueryOrderPadsPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderPadsPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderPadsPageWhereInput>;
};


export type QueryOrderSearchBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderSearchBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderSearchBlockWhereInput>;
};


export type QueryOrdersPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrdersPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrdersPageWhereInput>;
};


export type QueryOrganizationPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrganizationPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrganizationPageWhereInput>;
};


export type QueryPackageContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PackageContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PackageContentWhereInput>;
};


export type QueryPageListBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PageListBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PageListBlockWhereInput>;
};


export type QueryParagraphTextElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ParagraphTextElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ParagraphTextElementBlockWhereInput>;
};


export type QueryPdfFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PdfFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PdfFileWhereInput>;
};


export type QueryPersonListArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PersonListOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PersonListWhereInput>;
};


export type QueryPersonPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PersonPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PersonPageWhereInput>;
};


export type QueryPredefinedHiddenElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PredefinedHiddenElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PredefinedHiddenElementBlockWhereInput>;
};


export type QueryProductContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductContentWhereInput>;
};


export type QueryProductHeroBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductHeroBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductHeroBlockWhereInput>;
};


export type QueryProductHeroBlockCalloutArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductHeroBlockCalloutOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductHeroBlockCalloutWhereInput>;
};


export type QueryProductHeroBlockImageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductHeroBlockImageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductHeroBlockImageWhereInput>;
};


export type QueryProductSearchBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductSearchBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductSearchBlockWhereInput>;
};


export type QueryProfilePageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProfilePageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProfilePageWhereInput>;
};


export type QueryPromotionScheduleArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PromotionScheduleOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PromotionScheduleWhereInput>;
};


export type QueryPurchaseAmountArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PurchaseAmountOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PurchaseAmountWhereInput>;
};


export type QueryPurchaseQuantityArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PurchaseQuantityOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PurchaseQuantityWhereInput>;
};


export type QueryQuickOrderBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<QuickOrderBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<QuickOrderBlockWhereInput>;
};


export type QueryQuickOrderPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<QuickOrderPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<QuickOrderPageWhereInput>;
};


export type QueryRangeElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RangeElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RangeElementBlockWhereInput>;
};


export type QueryRatingBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RatingBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RatingBlockWhereInput>;
};


export type QueryRecaptchaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RecaptchaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RecaptchaElementBlockWhereInput>;
};


export type QueryRedemptionLimitsDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RedemptionLimitsDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RedemptionLimitsDataWhereInput>;
};


export type QueryRelationsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RelationsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RelationsWhereInput>;
};


export type QueryReportingMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ReportingMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ReportingMediaDataWhereInput>;
};


export type QueryResetButtonElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ResetButtonElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ResetButtonElementBlockWhereInput>;
};


export type QueryResetPasswordMailPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ResetPasswordMailPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ResetPasswordMailPageWhereInput>;
};


export type QueryResetPasswordPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ResetPasswordPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ResetPasswordPageWhereInput>;
};


export type QueryRssReaderBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RssReaderBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RssReaderBlockWhereInput>;
};


export type QuerySalesPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SalesPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SalesPageWhereInput>;
};


export type QuerySearchResultPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SearchResultPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SearchResultPageWhereInput>;
};


export type QuerySelectionElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SelectionElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SelectionElementBlockWhereInput>;
};


export type QuerySeoInformationArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SeoInformationOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SeoInformationWhereInput>;
};


export type QuerySharedCartPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SharedCartPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SharedCartPageWhereInput>;
};


export type QueryShippingDimensionsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ShippingDimensionsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ShippingDimensionsWhereInput>;
};


export type QuerySiteDefinitionArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SiteDefinitionOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SiteDefinitionWhereInput>;
};


export type QueryStandardFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StandardFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StandardFileWhereInput>;
};


export type QueryStandardPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StandardPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StandardPageWhereInput>;
};


export type QueryStorePageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StorePageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StorePageWhereInput>;
};


export type QueryStringFilterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StringFilterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StringFilterBlockWhereInput>;
};


export type QuerySubOrganizationPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubOrganizationPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubOrganizationPageWhereInput>;
};


export type QuerySubmitButtonElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubmitButtonElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubmitButtonElementBlockWhereInput>;
};


export type QuerySubscriptionBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubscriptionBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubscriptionBlockWhereInput>;
};


export type QuerySubscriptionDetailPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubscriptionDetailPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubscriptionDetailPageWhereInput>;
};


export type QuerySubscriptionHistoryPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubscriptionHistoryPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubscriptionHistoryPageWhereInput>;
};


export type QueryTagPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TagPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TagPageWhereInput>;
};


export type QueryTeaserBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TeaserBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TeaserBlockWhereInput>;
};


export type QueryTextBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TextBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TextBlockWhereInput>;
};


export type QueryTextareaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TextareaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TextareaElementBlockWhereInput>;
};


export type QueryTextboxElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TextboxElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TextboxElementBlockWhereInput>;
};


export type QueryThreeColumnLandingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ThreeColumnLandingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ThreeColumnLandingPageWhereInput>;
};


export type QueryTwitterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TwitterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TwitterBlockWhereInput>;
};


export type QueryTwoColumnLandingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TwoColumnLandingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TwoColumnLandingPageWhereInput>;
};


export type QueryUrlElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<UrlElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<UrlElementBlockWhereInput>;
};


export type QueryUsersPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<UsersPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<UsersPageWhereInput>;
};


export type QueryVariationContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VariationContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VariationContentWhereInput>;
};


export type QueryVectorImageMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VectorImageMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VectorImageMediaDataWhereInput>;
};


export type QueryVideoBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VideoBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VideoBlockWhereInput>;
};


export type QueryVideoFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VideoFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VideoFileWhereInput>;
};


export type QueryVimeoBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VimeoBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VimeoBlockWhereInput>;
};


export type QueryVisitorDataHiddenElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VisitorDataHiddenElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VisitorDataHiddenElementBlockWhereInput>;
};


export type QueryWebImageMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<WebImageMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<WebImageMediaDataWhereInput>;
};


export type QueryWidgetBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<WidgetBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<WidgetBlockWhereInput>;
};


export type QueryWishListPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<WishListPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<WishListPageWhereInput>;
};


export type QueryYouTubeBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<YouTubeBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<YouTubeBlockWhereInput>;
};

export type QueryRef = {
  __typename: 'QueryRef';
  AddressBookPage: Maybe<AddressBookPageOutput>;
  AddressesElementBlock: Maybe<AddressesElementBlockOutput>;
  AssetsDownloadLinksBlock: Maybe<AssetsDownloadLinksBlockOutput>;
  Associations: Maybe<AssociationsOutput>;
  BlogCommentBlock: Maybe<BlogCommentBlockOutput>;
  BlogItemPage: Maybe<BlogItemPageOutput>;
  BlogListPage: Maybe<BlogListPageOutput>;
  BookmarksPage: Maybe<BookmarksPageOutput>;
  BootstrapCardBlock: Maybe<BootstrapCardBlockOutput>;
  BreadcrumbBlock: Maybe<BreadcrumbBlockOutput>;
  BudgetingPage: Maybe<BudgetingPageOutput>;
  BundleContent: Maybe<BundleContentOutput>;
  ButtonBlock: Maybe<ButtonBlockOutput>;
  CalendarBlock: Maybe<CalendarBlockOutput>;
  CalendarEventPage: Maybe<CalendarEventPageOutput>;
  CallToActionBlock: Maybe<CallToActionBlockOutput>;
  CaptchaElementBlock: Maybe<CaptchaElementBlockOutput>;
  CarouselBlock: Maybe<CarouselBlockOutput>;
  CarouselControls: Maybe<CarouselControlsOutput>;
  CartPage: Maybe<CartPageOutput>;
  CatalogContent: Maybe<CatalogContentOutput>;
  Categories: Maybe<CategoriesOutput>;
  CategoryBlock: Maybe<CategoryBlockOutput>;
  CheckoutPage: Maybe<CheckoutPageOutput>;
  ChoiceElementBlock: Maybe<ChoiceElementBlockOutput>;
  CodingFile: Maybe<CodingFileOutput>;
  CollectionPage: Maybe<CollectionPageOutput>;
  CommentsBlock: Maybe<CommentsBlockOutput>;
  CommunityPage: Maybe<CommunityPageOutput>;
  ContainerBlock: Maybe<ContainerBlockOutput>;
  Content: Maybe<ContentOutput>;
  CouponData: Maybe<CouponDataOutput>;
  CreditCardPage: Maybe<CreditCardPageOutput>;
  CustomViewConfigurationBlock: Maybe<CustomViewConfigurationBlockOutput>;
  DAMAsset: Maybe<DamAssetOutput>;
  DAMImageAsset: Maybe<DamImageAssetOutput>;
  DAMVideoAsset: Maybe<DamVideoAssetOutput>;
  Data: Maybe<DataOutput>;
  DateTimeElementBlock: Maybe<DateTimeElementBlockOutput>;
  DateTimeRangeElementBlock: Maybe<DateTimeRangeElementBlockOutput>;
  DiscountItems: Maybe<DiscountItemsOutput>;
  DynamicProduct: Maybe<DynamicProductOutput>;
  DynamicVariant: Maybe<DynamicVariantOutput>;
  ElevatedRoleBlock: Maybe<ElevatedRoleBlockOutput>;
  ExistsFilterBlock: Maybe<ExistsFilterBlockOutput>;
  FacebookBlock: Maybe<FacebookBlockOutput>;
  FeedBlock: Maybe<FeedBlockOutput>;
  FileUploadElementBlock: Maybe<FileUploadElementBlockOutput>;
  FilterActivitiesBlock: Maybe<FilterActivitiesBlockOutput>;
  FilterContinentsBlock: Maybe<FilterContinentsBlockOutput>;
  FilterDistancesBlock: Maybe<FilterDistancesBlockOutput>;
  FilterTemperaturesBlock: Maybe<FilterTemperaturesBlockOutput>;
  FixedPricePurchaseQuantity: Maybe<FixedPricePurchaseQuantityOutput>;
  FolderPage: Maybe<FolderPageOutput>;
  FormContainerBlock: Maybe<FormContainerBlockOutput>;
  FormStepBlock: Maybe<FormStepBlockOutput>;
  FoundationPdfFile: Maybe<FoundationPdfFileOutput>;
  GenericBundle: Maybe<GenericBundleOutput>;
  GenericNode: Maybe<GenericNodeOutput>;
  GenericPackage: Maybe<GenericPackageOutput>;
  GenericProduct: Maybe<GenericProductOutput>;
  GenericVariant: Maybe<GenericVariantOutput>;
  GiftCardPage: Maybe<GiftCardPageOutput>;
  GoogleMapsBlock: Maybe<GoogleMapsBlockOutput>;
  GroupAdmissionBlock: Maybe<GroupAdmissionBlockOutput>;
  GroupCreationBlock: Maybe<GroupCreationBlockOutput>;
  HcaptchaElementBlock: Maybe<HcaptchaElementBlockOutput>;
  HealthChatbotBlock: Maybe<HealthChatbotBlockOutput>;
  HeroBlock: Maybe<HeroBlockOutput>;
  HeroBlockCallout: Maybe<HeroBlockCalloutOutput>;
  HomePage: Maybe<HomePageOutput>;
  ImageChoiceElementBlock: Maybe<ImageChoiceElementBlockOutput>;
  ImageMediaData: Maybe<ImageMediaDataOutput>;
  LandingPage: Maybe<LandingPageOutput>;
  LikeButtonBlock: Maybe<LikeButtonBlockOutput>;
  LocationItemPage: Maybe<LocationItemPageOutput>;
  LocationListPage: Maybe<LocationListPageOutput>;
  MembershipAffiliationBlock: Maybe<MembershipAffiliationBlockOutput>;
  MembershipDisplayBlock: Maybe<MembershipDisplayBlockOutput>;
  MenuItemBlock: Maybe<MenuItemBlockOutput>;
  ModalBlock: Maybe<ModalBlockOutput>;
  MonetaryReward: Maybe<MonetaryRewardOutput>;
  NavigationBlock: Maybe<NavigationBlockOutput>;
  NewProductsPage: Maybe<NewProductsPageOutput>;
  NodeContent: Maybe<NodeContentOutput>;
  NumberElementBlock: Maybe<NumberElementBlockOutput>;
  NumericFilterBlock: Maybe<NumericFilterBlockOutput>;
  ODPListConsentFormBlock: Maybe<OdpListConsentFormBlockOutput>;
  ODPListFormBlock: Maybe<OdpListFormBlockOutput>;
  OrderConfirmationMailPage: Maybe<OrderConfirmationMailPageOutput>;
  OrderConfirmationPage: Maybe<OrderConfirmationPageOutput>;
  OrderDetailsPage: Maybe<OrderDetailsPageOutput>;
  OrderHistoryBlock: Maybe<OrderHistoryBlockOutput>;
  OrderHistoryPage: Maybe<OrderHistoryPageOutput>;
  OrderPadsPage: Maybe<OrderPadsPageOutput>;
  OrderSearchBlock: Maybe<OrderSearchBlockOutput>;
  OrdersPage: Maybe<OrdersPageOutput>;
  OrganizationPage: Maybe<OrganizationPageOutput>;
  PackageContent: Maybe<PackageContentOutput>;
  PageListBlock: Maybe<PageListBlockOutput>;
  ParagraphTextElementBlock: Maybe<ParagraphTextElementBlockOutput>;
  PdfFile: Maybe<PdfFileOutput>;
  PersonList: Maybe<PersonListOutput>;
  PersonPage: Maybe<PersonPageOutput>;
  PredefinedHiddenElementBlock: Maybe<PredefinedHiddenElementBlockOutput>;
  ProductContent: Maybe<ProductContentOutput>;
  ProductHeroBlock: Maybe<ProductHeroBlockOutput>;
  ProductHeroBlockCallout: Maybe<ProductHeroBlockCalloutOutput>;
  ProductHeroBlockImage: Maybe<ProductHeroBlockImageOutput>;
  ProductSearchBlock: Maybe<ProductSearchBlockOutput>;
  ProfilePage: Maybe<ProfilePageOutput>;
  PromotionSchedule: Maybe<PromotionScheduleOutput>;
  PurchaseAmount: Maybe<PurchaseAmountOutput>;
  PurchaseQuantity: Maybe<PurchaseQuantityOutput>;
  QuickOrderBlock: Maybe<QuickOrderBlockOutput>;
  QuickOrderPage: Maybe<QuickOrderPageOutput>;
  RangeElementBlock: Maybe<RangeElementBlockOutput>;
  RatingBlock: Maybe<RatingBlockOutput>;
  RecaptchaElementBlock: Maybe<RecaptchaElementBlockOutput>;
  RedemptionLimitsData: Maybe<RedemptionLimitsDataOutput>;
  Relations: Maybe<RelationsOutput>;
  ReportingMediaData: Maybe<ReportingMediaDataOutput>;
  ResetButtonElementBlock: Maybe<ResetButtonElementBlockOutput>;
  ResetPasswordMailPage: Maybe<ResetPasswordMailPageOutput>;
  ResetPasswordPage: Maybe<ResetPasswordPageOutput>;
  RssReaderBlock: Maybe<RssReaderBlockOutput>;
  SalesPage: Maybe<SalesPageOutput>;
  SearchResultPage: Maybe<SearchResultPageOutput>;
  SelectionElementBlock: Maybe<SelectionElementBlockOutput>;
  SeoInformation: Maybe<SeoInformationOutput>;
  SharedCartPage: Maybe<SharedCartPageOutput>;
  ShippingDimensions: Maybe<ShippingDimensionsOutput>;
  SiteDefinition: Maybe<SiteDefinitionOutput>;
  StandardFile: Maybe<StandardFileOutput>;
  StandardPage: Maybe<StandardPageOutput>;
  StorePage: Maybe<StorePageOutput>;
  StringFilterBlock: Maybe<StringFilterBlockOutput>;
  SubOrganizationPage: Maybe<SubOrganizationPageOutput>;
  SubmitButtonElementBlock: Maybe<SubmitButtonElementBlockOutput>;
  SubscriptionBlock: Maybe<SubscriptionBlockOutput>;
  SubscriptionDetailPage: Maybe<SubscriptionDetailPageOutput>;
  SubscriptionHistoryPage: Maybe<SubscriptionHistoryPageOutput>;
  TagPage: Maybe<TagPageOutput>;
  TeaserBlock: Maybe<TeaserBlockOutput>;
  TextBlock: Maybe<TextBlockOutput>;
  TextareaElementBlock: Maybe<TextareaElementBlockOutput>;
  TextboxElementBlock: Maybe<TextboxElementBlockOutput>;
  ThreeColumnLandingPage: Maybe<ThreeColumnLandingPageOutput>;
  TwitterBlock: Maybe<TwitterBlockOutput>;
  TwoColumnLandingPage: Maybe<TwoColumnLandingPageOutput>;
  UrlElementBlock: Maybe<UrlElementBlockOutput>;
  UsersPage: Maybe<UsersPageOutput>;
  VariationContent: Maybe<VariationContentOutput>;
  VectorImageMediaData: Maybe<VectorImageMediaDataOutput>;
  VideoBlock: Maybe<VideoBlockOutput>;
  VideoFile: Maybe<VideoFileOutput>;
  VimeoBlock: Maybe<VimeoBlockOutput>;
  VisitorDataHiddenElementBlock: Maybe<VisitorDataHiddenElementBlockOutput>;
  WebImageMediaData: Maybe<WebImageMediaDataOutput>;
  WidgetBlock: Maybe<WidgetBlockOutput>;
  WishListPage: Maybe<WishListPageOutput>;
  YouTubeBlock: Maybe<YouTubeBlockOutput>;
};


export type QueryRefAddressBookPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AddressBookPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AddressBookPageWhereInput>;
};


export type QueryRefAddressesElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AddressesElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AddressesElementBlockWhereInput>;
};


export type QueryRefAssetsDownloadLinksBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AssetsDownloadLinksBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AssetsDownloadLinksBlockWhereInput>;
};


export type QueryRefAssociationsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<AssociationsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<AssociationsWhereInput>;
};


export type QueryRefBlogCommentBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BlogCommentBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BlogCommentBlockWhereInput>;
};


export type QueryRefBlogItemPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BlogItemPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BlogItemPageWhereInput>;
};


export type QueryRefBlogListPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BlogListPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BlogListPageWhereInput>;
};


export type QueryRefBookmarksPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BookmarksPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BookmarksPageWhereInput>;
};


export type QueryRefBootstrapCardBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BootstrapCardBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BootstrapCardBlockWhereInput>;
};


export type QueryRefBreadcrumbBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BreadcrumbBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BreadcrumbBlockWhereInput>;
};


export type QueryRefBudgetingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BudgetingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BudgetingPageWhereInput>;
};


export type QueryRefBundleContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<BundleContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<BundleContentWhereInput>;
};


export type QueryRefButtonBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ButtonBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ButtonBlockWhereInput>;
};


export type QueryRefCalendarBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CalendarBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CalendarBlockWhereInput>;
};


export type QueryRefCalendarEventPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CalendarEventPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CalendarEventPageWhereInput>;
};


export type QueryRefCallToActionBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CallToActionBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CallToActionBlockWhereInput>;
};


export type QueryRefCaptchaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CaptchaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CaptchaElementBlockWhereInput>;
};


export type QueryRefCarouselBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CarouselBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CarouselBlockWhereInput>;
};


export type QueryRefCarouselControlsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CarouselControlsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CarouselControlsWhereInput>;
};


export type QueryRefCartPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CartPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CartPageWhereInput>;
};


export type QueryRefCatalogContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CatalogContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CatalogContentWhereInput>;
};


export type QueryRefCategoriesArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CategoriesOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CategoriesWhereInput>;
};


export type QueryRefCategoryBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CategoryBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CategoryBlockWhereInput>;
};


export type QueryRefCheckoutPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CheckoutPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CheckoutPageWhereInput>;
};


export type QueryRefChoiceElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ChoiceElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ChoiceElementBlockWhereInput>;
};


export type QueryRefCodingFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CodingFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CodingFileWhereInput>;
};


export type QueryRefCollectionPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CollectionPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CollectionPageWhereInput>;
};


export type QueryRefCommentsBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CommentsBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CommentsBlockWhereInput>;
};


export type QueryRefCommunityPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CommunityPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CommunityPageWhereInput>;
};


export type QueryRefContainerBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ContainerBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ContainerBlockWhereInput>;
};


export type QueryRefContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ContentWhereInput>;
};


export type QueryRefCouponDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CouponDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CouponDataWhereInput>;
};


export type QueryRefCreditCardPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CreditCardPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CreditCardPageWhereInput>;
};


export type QueryRefCustomViewConfigurationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<CustomViewConfigurationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<CustomViewConfigurationBlockWhereInput>;
};


export type QueryRefDamAssetArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DamAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DamAssetWhereInput>;
};


export type QueryRefDamImageAssetArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DamImageAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DamImageAssetWhereInput>;
};


export type QueryRefDamVideoAssetArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DamVideoAssetOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DamVideoAssetWhereInput>;
};


export type QueryRefDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<System_Locales>>>;
  orderBy: InputMaybe<DataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DataWhereInput>;
};


export type QueryRefDateTimeElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DateTimeElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DateTimeElementBlockWhereInput>;
};


export type QueryRefDateTimeRangeElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DateTimeRangeElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DateTimeRangeElementBlockWhereInput>;
};


export type QueryRefDiscountItemsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DiscountItemsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DiscountItemsWhereInput>;
};


export type QueryRefDynamicProductArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DynamicProductOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DynamicProductWhereInput>;
};


export type QueryRefDynamicVariantArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<DynamicVariantOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<DynamicVariantWhereInput>;
};


export type QueryRefElevatedRoleBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ElevatedRoleBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ElevatedRoleBlockWhereInput>;
};


export type QueryRefExistsFilterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ExistsFilterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ExistsFilterBlockWhereInput>;
};


export type QueryRefFacebookBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FacebookBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FacebookBlockWhereInput>;
};


export type QueryRefFeedBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FeedBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FeedBlockWhereInput>;
};


export type QueryRefFileUploadElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FileUploadElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FileUploadElementBlockWhereInput>;
};


export type QueryRefFilterActivitiesBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterActivitiesBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterActivitiesBlockWhereInput>;
};


export type QueryRefFilterContinentsBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterContinentsBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterContinentsBlockWhereInput>;
};


export type QueryRefFilterDistancesBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterDistancesBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterDistancesBlockWhereInput>;
};


export type QueryRefFilterTemperaturesBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FilterTemperaturesBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FilterTemperaturesBlockWhereInput>;
};


export type QueryRefFixedPricePurchaseQuantityArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FixedPricePurchaseQuantityOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FixedPricePurchaseQuantityWhereInput>;
};


export type QueryRefFolderPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FolderPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FolderPageWhereInput>;
};


export type QueryRefFormContainerBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FormContainerBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FormContainerBlockWhereInput>;
};


export type QueryRefFormStepBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FormStepBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FormStepBlockWhereInput>;
};


export type QueryRefFoundationPdfFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<FoundationPdfFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<FoundationPdfFileWhereInput>;
};


export type QueryRefGenericBundleArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericBundleOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericBundleWhereInput>;
};


export type QueryRefGenericNodeArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericNodeOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericNodeWhereInput>;
};


export type QueryRefGenericPackageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericPackageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericPackageWhereInput>;
};


export type QueryRefGenericProductArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericProductOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericProductWhereInput>;
};


export type QueryRefGenericVariantArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GenericVariantOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GenericVariantWhereInput>;
};


export type QueryRefGiftCardPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GiftCardPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GiftCardPageWhereInput>;
};


export type QueryRefGoogleMapsBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GoogleMapsBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GoogleMapsBlockWhereInput>;
};


export type QueryRefGroupAdmissionBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GroupAdmissionBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GroupAdmissionBlockWhereInput>;
};


export type QueryRefGroupCreationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<GroupCreationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<GroupCreationBlockWhereInput>;
};


export type QueryRefHcaptchaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HcaptchaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HcaptchaElementBlockWhereInput>;
};


export type QueryRefHealthChatbotBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HealthChatbotBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HealthChatbotBlockWhereInput>;
};


export type QueryRefHeroBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HeroBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HeroBlockWhereInput>;
};


export type QueryRefHeroBlockCalloutArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HeroBlockCalloutOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HeroBlockCalloutWhereInput>;
};


export type QueryRefHomePageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<HomePageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<HomePageWhereInput>;
};


export type QueryRefImageChoiceElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ImageChoiceElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ImageChoiceElementBlockWhereInput>;
};


export type QueryRefImageMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ImageMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ImageMediaDataWhereInput>;
};


export type QueryRefLandingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LandingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LandingPageWhereInput>;
};


export type QueryRefLikeButtonBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LikeButtonBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LikeButtonBlockWhereInput>;
};


export type QueryRefLocationItemPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LocationItemPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LocationItemPageWhereInput>;
};


export type QueryRefLocationListPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<LocationListPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<LocationListPageWhereInput>;
};


export type QueryRefMembershipAffiliationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MembershipAffiliationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MembershipAffiliationBlockWhereInput>;
};


export type QueryRefMembershipDisplayBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MembershipDisplayBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MembershipDisplayBlockWhereInput>;
};


export type QueryRefMenuItemBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MenuItemBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MenuItemBlockWhereInput>;
};


export type QueryRefModalBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ModalBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ModalBlockWhereInput>;
};


export type QueryRefMonetaryRewardArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<MonetaryRewardOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<MonetaryRewardWhereInput>;
};


export type QueryRefNavigationBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NavigationBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NavigationBlockWhereInput>;
};


export type QueryRefNewProductsPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NewProductsPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NewProductsPageWhereInput>;
};


export type QueryRefNodeContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NodeContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NodeContentWhereInput>;
};


export type QueryRefNumberElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NumberElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NumberElementBlockWhereInput>;
};


export type QueryRefNumericFilterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<NumericFilterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<NumericFilterBlockWhereInput>;
};


export type QueryRefOdpListConsentFormBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OdpListConsentFormBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OdpListConsentFormBlockWhereInput>;
};


export type QueryRefOdpListFormBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OdpListFormBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OdpListFormBlockWhereInput>;
};


export type QueryRefOrderConfirmationMailPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderConfirmationMailPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderConfirmationMailPageWhereInput>;
};


export type QueryRefOrderConfirmationPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderConfirmationPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderConfirmationPageWhereInput>;
};


export type QueryRefOrderDetailsPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderDetailsPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderDetailsPageWhereInput>;
};


export type QueryRefOrderHistoryBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderHistoryBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderHistoryBlockWhereInput>;
};


export type QueryRefOrderHistoryPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderHistoryPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderHistoryPageWhereInput>;
};


export type QueryRefOrderPadsPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderPadsPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderPadsPageWhereInput>;
};


export type QueryRefOrderSearchBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrderSearchBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrderSearchBlockWhereInput>;
};


export type QueryRefOrdersPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrdersPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrdersPageWhereInput>;
};


export type QueryRefOrganizationPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<OrganizationPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<OrganizationPageWhereInput>;
};


export type QueryRefPackageContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PackageContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PackageContentWhereInput>;
};


export type QueryRefPageListBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PageListBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PageListBlockWhereInput>;
};


export type QueryRefParagraphTextElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ParagraphTextElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ParagraphTextElementBlockWhereInput>;
};


export type QueryRefPdfFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PdfFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PdfFileWhereInput>;
};


export type QueryRefPersonListArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PersonListOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PersonListWhereInput>;
};


export type QueryRefPersonPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PersonPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PersonPageWhereInput>;
};


export type QueryRefPredefinedHiddenElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PredefinedHiddenElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PredefinedHiddenElementBlockWhereInput>;
};


export type QueryRefProductContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductContentWhereInput>;
};


export type QueryRefProductHeroBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductHeroBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductHeroBlockWhereInput>;
};


export type QueryRefProductHeroBlockCalloutArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductHeroBlockCalloutOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductHeroBlockCalloutWhereInput>;
};


export type QueryRefProductHeroBlockImageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductHeroBlockImageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductHeroBlockImageWhereInput>;
};


export type QueryRefProductSearchBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProductSearchBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProductSearchBlockWhereInput>;
};


export type QueryRefProfilePageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ProfilePageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ProfilePageWhereInput>;
};


export type QueryRefPromotionScheduleArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PromotionScheduleOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PromotionScheduleWhereInput>;
};


export type QueryRefPurchaseAmountArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PurchaseAmountOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PurchaseAmountWhereInput>;
};


export type QueryRefPurchaseQuantityArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<PurchaseQuantityOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<PurchaseQuantityWhereInput>;
};


export type QueryRefQuickOrderBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<QuickOrderBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<QuickOrderBlockWhereInput>;
};


export type QueryRefQuickOrderPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<QuickOrderPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<QuickOrderPageWhereInput>;
};


export type QueryRefRangeElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RangeElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RangeElementBlockWhereInput>;
};


export type QueryRefRatingBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RatingBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RatingBlockWhereInput>;
};


export type QueryRefRecaptchaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RecaptchaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RecaptchaElementBlockWhereInput>;
};


export type QueryRefRedemptionLimitsDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RedemptionLimitsDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RedemptionLimitsDataWhereInput>;
};


export type QueryRefRelationsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RelationsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RelationsWhereInput>;
};


export type QueryRefReportingMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ReportingMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ReportingMediaDataWhereInput>;
};


export type QueryRefResetButtonElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ResetButtonElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ResetButtonElementBlockWhereInput>;
};


export type QueryRefResetPasswordMailPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ResetPasswordMailPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ResetPasswordMailPageWhereInput>;
};


export type QueryRefResetPasswordPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ResetPasswordPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ResetPasswordPageWhereInput>;
};


export type QueryRefRssReaderBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<RssReaderBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<RssReaderBlockWhereInput>;
};


export type QueryRefSalesPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SalesPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SalesPageWhereInput>;
};


export type QueryRefSearchResultPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SearchResultPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SearchResultPageWhereInput>;
};


export type QueryRefSelectionElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SelectionElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SelectionElementBlockWhereInput>;
};


export type QueryRefSeoInformationArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SeoInformationOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SeoInformationWhereInput>;
};


export type QueryRefSharedCartPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SharedCartPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SharedCartPageWhereInput>;
};


export type QueryRefShippingDimensionsArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ShippingDimensionsOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ShippingDimensionsWhereInput>;
};


export type QueryRefSiteDefinitionArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SiteDefinitionOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SiteDefinitionWhereInput>;
};


export type QueryRefStandardFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StandardFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StandardFileWhereInput>;
};


export type QueryRefStandardPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StandardPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StandardPageWhereInput>;
};


export type QueryRefStorePageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StorePageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StorePageWhereInput>;
};


export type QueryRefStringFilterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<StringFilterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<StringFilterBlockWhereInput>;
};


export type QueryRefSubOrganizationPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubOrganizationPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubOrganizationPageWhereInput>;
};


export type QueryRefSubmitButtonElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubmitButtonElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubmitButtonElementBlockWhereInput>;
};


export type QueryRefSubscriptionBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubscriptionBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubscriptionBlockWhereInput>;
};


export type QueryRefSubscriptionDetailPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubscriptionDetailPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubscriptionDetailPageWhereInput>;
};


export type QueryRefSubscriptionHistoryPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<SubscriptionHistoryPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<SubscriptionHistoryPageWhereInput>;
};


export type QueryRefTagPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TagPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TagPageWhereInput>;
};


export type QueryRefTeaserBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TeaserBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TeaserBlockWhereInput>;
};


export type QueryRefTextBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TextBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TextBlockWhereInput>;
};


export type QueryRefTextareaElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TextareaElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TextareaElementBlockWhereInput>;
};


export type QueryRefTextboxElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TextboxElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TextboxElementBlockWhereInput>;
};


export type QueryRefThreeColumnLandingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<ThreeColumnLandingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<ThreeColumnLandingPageWhereInput>;
};


export type QueryRefTwitterBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TwitterBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TwitterBlockWhereInput>;
};


export type QueryRefTwoColumnLandingPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<TwoColumnLandingPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<TwoColumnLandingPageWhereInput>;
};


export type QueryRefUrlElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<UrlElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<UrlElementBlockWhereInput>;
};


export type QueryRefUsersPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<UsersPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<UsersPageWhereInput>;
};


export type QueryRefVariationContentArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VariationContentOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VariationContentWhereInput>;
};


export type QueryRefVectorImageMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VectorImageMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VectorImageMediaDataWhereInput>;
};


export type QueryRefVideoBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VideoBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VideoBlockWhereInput>;
};


export type QueryRefVideoFileArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VideoFileOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VideoFileWhereInput>;
};


export type QueryRefVimeoBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VimeoBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VimeoBlockWhereInput>;
};


export type QueryRefVisitorDataHiddenElementBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<VisitorDataHiddenElementBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<VisitorDataHiddenElementBlockWhereInput>;
};


export type QueryRefWebImageMediaDataArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<WebImageMediaDataOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<WebImageMediaDataWhereInput>;
};


export type QueryRefWidgetBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<WidgetBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<WidgetBlockWhereInput>;
};


export type QueryRefWishListPageArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<WishListPageOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<WishListPageWhereInput>;
};


export type QueryRefYouTubeBlockArgs = {
  cursor: InputMaybe<Scalars['String']['input']>;
  ids: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  limit?: Scalars['Int']['input'];
  locale: InputMaybe<Array<InputMaybe<Locales>>>;
  orderBy: InputMaybe<YouTubeBlockOrderByInput>;
  skip?: Scalars['Int']['input'];
  where: InputMaybe<YouTubeBlockWhereInput>;
};

/** Used to quick order a list of products */
export type QuickOrderBlock = IContent & IData & {
  __typename: 'QuickOrderBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to quick order a list of products */
export type QuickOrderBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlockMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlockTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to quick order a list of products */
export type QuickOrderBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type QuickOrderBlockAutocomplete = {
  __typename: 'QuickOrderBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type QuickOrderBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type QuickOrderBlockFacet = {
  __typename: 'QuickOrderBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type QuickOrderBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type QuickOrderBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderBlockFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type QuickOrderBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type QuickOrderBlockOutput = {
  __typename: 'QuickOrderBlockOutput';
  autocomplete: Maybe<QuickOrderBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<QuickOrderBlockFacet>;
  items: Maybe<Array<Maybe<QuickOrderBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type QuickOrderBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type QuickOrderBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<QuickOrderBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<QuickOrderBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<QuickOrderBlockWhereInput>>>;
};

export type QuickOrderPage = IContent & IData & {
  __typename: 'QuickOrderPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  QuickOrderBlockContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type QuickOrderPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageQuickOrderBlockContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type QuickOrderPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type QuickOrderPageAutocomplete = {
  __typename: 'QuickOrderPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type QuickOrderPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type QuickOrderPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type QuickOrderPageFacet = {
  __typename: 'QuickOrderPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  QuickOrderBlockContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type QuickOrderPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type QuickOrderPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type QuickOrderPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type QuickOrderPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  QuickOrderBlockContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type QuickOrderPageOutput = {
  __typename: 'QuickOrderPageOutput';
  autocomplete: Maybe<QuickOrderPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<QuickOrderPageFacet>;
  items: Maybe<Array<Maybe<QuickOrderPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type QuickOrderPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type QuickOrderPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  QuickOrderBlockContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<QuickOrderPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<QuickOrderPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<QuickOrderPageWhereInput>>>;
};

export type RangeElementBlock = IContent & IData & {
  __typename: 'RangeElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Max: Maybe<Scalars['Int']['output']>;
  Min: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  Step: Maybe<Scalars['Int']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type RangeElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RangeElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RangeElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RangeElementBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RangeElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RangeElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RangeElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type RangeElementBlockAutocomplete = {
  __typename: 'RangeElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type RangeElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RangeElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type RangeElementBlockFacet = {
  __typename: 'RangeElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Max: Maybe<Array<Maybe<NumberFacet>>>;
  Min: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  Step: Maybe<Array<Maybe<NumberFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type RangeElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RangeElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RangeElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RangeElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetMaxArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RangeElementBlockFacetMinArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RangeElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RangeElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RangeElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RangeElementBlockFacetStepArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RangeElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RangeElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type RangeElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Max: InputMaybe<OrderBy>;
  Min: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  Step: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type RangeElementBlockOutput = {
  __typename: 'RangeElementBlockOutput';
  autocomplete: Maybe<RangeElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<RangeElementBlockFacet>;
  items: Maybe<Array<Maybe<RangeElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type RangeElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type RangeElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Max: InputMaybe<IntFilterInput>;
  Min: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  Step: InputMaybe<IntFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<RangeElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<RangeElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<RangeElementBlockWhereInput>>>;
};

export type RangeFacetsInput = {
  from: InputMaybe<Scalars['Int']['input']>;
  to: InputMaybe<Scalars['Int']['input']>;
};

export enum Ranking {
  BoostOnly = 'BOOST_ONLY',
  Doc = 'DOC',
  Relevance = 'RELEVANCE',
  Semantic = 'SEMANTIC'
}

/** Configures the frontend view properties of a rating block */
export type RatingBlock = IContent & IData & {
  __typename: 'RatingBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SendActivity: Maybe<Scalars['Bool']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the frontend view properties of a rating block */
export type RatingBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type RatingBlockAutocomplete = {
  __typename: 'RatingBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type RatingBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RatingBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type RatingBlockFacet = {
  __typename: 'RatingBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SendActivity: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type RatingBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RatingBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RatingBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RatingBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RatingBlockFacetSendActivityArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RatingBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RatingBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RatingBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type RatingBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SendActivity: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type RatingBlockOutput = {
  __typename: 'RatingBlockOutput';
  autocomplete: Maybe<RatingBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<RatingBlockFacet>;
  items: Maybe<Array<Maybe<RatingBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type RatingBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type RatingBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SendActivity: InputMaybe<BoolFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<RatingBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<RatingBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<RatingBlockWhereInput>>>;
};

export type RecaptchaElementBlock = IContent & IData & {
  __typename: 'RecaptchaElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  ScoreThreshold: Maybe<Scalars['Float']['output']>;
  SecretKey: Maybe<Scalars['String']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  SiteKey: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type RecaptchaElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RecaptchaElementBlockSecretKeyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RecaptchaElementBlockSiteKeyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RecaptchaElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RecaptchaElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RecaptchaElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type RecaptchaElementBlockAutocomplete = {
  __typename: 'RecaptchaElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type RecaptchaElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RecaptchaElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type RecaptchaElementBlockFacet = {
  __typename: 'RecaptchaElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  ScoreThreshold: Maybe<Array<Maybe<NumberFacet>>>;
  SecretKey: Maybe<Array<Maybe<StringFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  SiteKey: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type RecaptchaElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RecaptchaElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RecaptchaElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RecaptchaElementBlockFacetScoreThresholdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RecaptchaElementBlockFacetSecretKeyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetSiteKeyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RecaptchaElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RecaptchaElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RecaptchaElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type RecaptchaElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  ScoreThreshold: InputMaybe<OrderBy>;
  SecretKey: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  SiteKey: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type RecaptchaElementBlockOutput = {
  __typename: 'RecaptchaElementBlockOutput';
  autocomplete: Maybe<RecaptchaElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<RecaptchaElementBlockFacet>;
  items: Maybe<Array<Maybe<RecaptchaElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type RecaptchaElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type RecaptchaElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  ScoreThreshold: InputMaybe<FloatFilterInput>;
  SecretKey: InputMaybe<SearchableStringFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  SiteKey: InputMaybe<SearchableStringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<RecaptchaElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<RecaptchaElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<RecaptchaElementBlockWhereInput>>>;
};

export type RedemptionLimitsData = IContent & IData & {
  __typename: 'RedemptionLimitsData';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PerCustomer: Maybe<Scalars['Int']['output']>;
  PerOrderForm: Maybe<Scalars['Int']['output']>;
  PerPromotion: Maybe<Scalars['Int']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type RedemptionLimitsDataNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RedemptionLimitsData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type RedemptionLimitsData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type RedemptionLimitsDataAutocomplete = {
  __typename: 'RedemptionLimitsDataAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type RedemptionLimitsDataAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RedemptionLimitsDataAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type RedemptionLimitsDataFacet = {
  __typename: 'RedemptionLimitsDataFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PerCustomer: Maybe<Array<Maybe<NumberFacet>>>;
  PerOrderForm: Maybe<Array<Maybe<NumberFacet>>>;
  PerPromotion: Maybe<Array<Maybe<NumberFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type RedemptionLimitsDataFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RedemptionLimitsDataFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RedemptionLimitsDataFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetPerCustomerArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RedemptionLimitsDataFacetPerOrderFormArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RedemptionLimitsDataFacetPerPromotionArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RedemptionLimitsDataFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RedemptionLimitsDataFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RedemptionLimitsDataFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RedemptionLimitsDataFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RedemptionLimitsDataFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type RedemptionLimitsDataOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PerCustomer: InputMaybe<OrderBy>;
  PerOrderForm: InputMaybe<OrderBy>;
  PerPromotion: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type RedemptionLimitsDataOutput = {
  __typename: 'RedemptionLimitsDataOutput';
  autocomplete: Maybe<RedemptionLimitsDataAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<RedemptionLimitsDataFacet>;
  items: Maybe<Array<Maybe<RedemptionLimitsData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type RedemptionLimitsDataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type RedemptionLimitsDataWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PerCustomer: InputMaybe<IntFilterInput>;
  PerOrderForm: InputMaybe<IntFilterInput>;
  PerPromotion: InputMaybe<IntFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<RedemptionLimitsDataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<RedemptionLimitsDataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<RedemptionLimitsDataWhereInput>>>;
};

export type Relations = IContent & IData & {
  __typename: 'Relations';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type RelationsNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Relations_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type Relations_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type RelationsAutocomplete = {
  __typename: 'RelationsAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type RelationsAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RelationsAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type RelationsFacet = {
  __typename: 'RelationsFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type RelationsFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RelationsFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RelationsFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RelationsFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RelationsFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RelationsFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RelationsFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type RelationsOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type RelationsOutput = {
  __typename: 'RelationsOutput';
  autocomplete: Maybe<RelationsAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<RelationsFacet>;
  items: Maybe<Array<Maybe<Relations>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type RelationsOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type RelationsWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<RelationsWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<RelationsWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<RelationsWhereInput>>>;
};

export type ReportingMediaData = IContent & IData & {
  __typename: 'ReportingMediaData';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ReportingMediaDataContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ReportingMediaDataNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ReportingMediaData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ReportingMediaData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ReportingMediaDataAutocomplete = {
  __typename: 'ReportingMediaDataAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ReportingMediaDataAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ReportingMediaDataAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ReportingMediaDataFacet = {
  __typename: 'ReportingMediaDataFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ReportingMediaDataFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ReportingMediaDataFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ReportingMediaDataFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ReportingMediaDataFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ReportingMediaDataFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ReportingMediaDataFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ReportingMediaDataFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ReportingMediaDataOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ReportingMediaDataOutput = {
  __typename: 'ReportingMediaDataOutput';
  autocomplete: Maybe<ReportingMediaDataAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ReportingMediaDataFacet>;
  items: Maybe<Array<Maybe<ReportingMediaData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ReportingMediaDataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ReportingMediaDataWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ReportingMediaDataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ReportingMediaDataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ReportingMediaDataWhereInput>>>;
};

export type ResetButtonElementBlock = IContent & IData & {
  __typename: 'ResetButtonElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ResetButtonElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ResetButtonElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ResetButtonElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ResetButtonElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ResetButtonElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ResetButtonElementBlockAutocomplete = {
  __typename: 'ResetButtonElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ResetButtonElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetButtonElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ResetButtonElementBlockFacet = {
  __typename: 'ResetButtonElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ResetButtonElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetButtonElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetButtonElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetButtonElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetButtonElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetButtonElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetButtonElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ResetButtonElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ResetButtonElementBlockOutput = {
  __typename: 'ResetButtonElementBlockOutput';
  autocomplete: Maybe<ResetButtonElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ResetButtonElementBlockFacet>;
  items: Maybe<Array<Maybe<ResetButtonElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ResetButtonElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ResetButtonElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ResetButtonElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ResetButtonElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ResetButtonElementBlockWhereInput>>>;
};

/** The reset password template mail page. */
export type ResetPasswordMailPage = IContent & IData & {
  __typename: 'ResetPasswordMailPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Subject: Maybe<Scalars['String']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageSubjectArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** The reset password template mail page. */
export type ResetPasswordMailPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ResetPasswordMailPageAutocomplete = {
  __typename: 'ResetPasswordMailPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ResetPasswordMailPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordMailPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ResetPasswordMailPageFacet = {
  __typename: 'ResetPasswordMailPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Subject: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ResetPasswordMailPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordMailPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordMailPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordMailPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordMailPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordMailPageFacetSubjectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordMailPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ResetPasswordMailPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Subject: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ResetPasswordMailPageOutput = {
  __typename: 'ResetPasswordMailPageOutput';
  autocomplete: Maybe<ResetPasswordMailPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ResetPasswordMailPageFacet>;
  items: Maybe<Array<Maybe<ResetPasswordMailPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ResetPasswordMailPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ResetPasswordMailPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Subject: InputMaybe<SearchableStringFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ResetPasswordMailPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ResetPasswordMailPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ResetPasswordMailPageWhereInput>>>;
};

/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPage = IContent & IData & {
  __typename: 'ResetPasswordPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for allowing users to reset their passwords. The page must also be set in the StartPage's ResetPasswordPage property. */
export type ResetPasswordPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ResetPasswordPageAutocomplete = {
  __typename: 'ResetPasswordPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ResetPasswordPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ResetPasswordPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ResetPasswordPageFacet = {
  __typename: 'ResetPasswordPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ResetPasswordPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ResetPasswordPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ResetPasswordPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ResetPasswordPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ResetPasswordPageOutput = {
  __typename: 'ResetPasswordPageOutput';
  autocomplete: Maybe<ResetPasswordPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ResetPasswordPageFacet>;
  items: Maybe<Array<Maybe<ResetPasswordPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ResetPasswordPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ResetPasswordPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ResetPasswordPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ResetPasswordPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ResetPasswordPageWhereInput>>>;
};

/** Display content from a RSS feed */
export type RssReaderBlock = IContent & IData & {
  __typename: 'RssReaderBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  /** Include publish date for each item in list */
  IncludePublishDate: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  /** Descriptive text for the RSS feed */
  MainBody: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  /** Maximum number of items to display */
  MaxCount: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  /** URL for RSS feed */
  RssUrl: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Display content from a RSS feed */
export type RssReaderBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlockMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a RSS feed */
export type RssReaderBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type RssReaderBlockAutocomplete = {
  __typename: 'RssReaderBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RssUrl: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type RssReaderBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteRssUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type RssReaderBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type RssReaderBlockFacet = {
  __typename: 'RssReaderBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IncludePublishDate: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxCount: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  RssUrl: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type RssReaderBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RssReaderBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RssReaderBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RssReaderBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetIncludePublishDateArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetMaxCountArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type RssReaderBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetRssUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RssReaderBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RssReaderBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type RssReaderBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type RssReaderBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type RssReaderBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IncludePublishDate: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxCount: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  RssUrl: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type RssReaderBlockOutput = {
  __typename: 'RssReaderBlockOutput';
  autocomplete: Maybe<RssReaderBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<RssReaderBlockFacet>;
  items: Maybe<Array<Maybe<RssReaderBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type RssReaderBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type RssReaderBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IncludePublishDate: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxCount: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  RssUrl: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<RssReaderBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<RssReaderBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<RssReaderBlockWhereInput>>>;
};

/** Show all items on sale */
export type SalesPage = IContent & IData & {
  __typename: 'SalesPage';
  AllowPaging: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  ManualExclusion: Maybe<Array<Maybe<ContentModelReference>>>;
  ManualInclusion: Maybe<Array<Maybe<ContentModelReference>>>;
  ManualInclusionOrdering: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  NumberOfProducts: Maybe<Scalars['Int']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  PageSize: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Show all items on sale */
export type SalesPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageManualInclusionOrderingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Show all items on sale */
export type SalesPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SalesPageAutocomplete = {
  __typename: 'SalesPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  ManualExclusion: Maybe<ContentModelReferenceAutocomplete>;
  ManualInclusion: Maybe<ContentModelReferenceAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SalesPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SalesPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SalesPageFacet = {
  __typename: 'SalesPageFacet';
  AllowPaging: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  ManualExclusion: Maybe<ContentModelReferenceFacet>;
  ManualInclusion: Maybe<ContentModelReferenceFacet>;
  ManualInclusionOrdering: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfProducts: Maybe<Array<Maybe<NumberFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  PageSize: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SalesPageFacetAllowPagingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SalesPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SalesPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetManualInclusionOrderingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetNumberOfProductsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type SalesPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetPageSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type SalesPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SalesPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SalesPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SalesPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SalesPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SalesPageOrderByInput = {
  AllowPaging: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  ManualExclusion: InputMaybe<ContentModelReferenceOrderByInput>;
  ManualInclusion: InputMaybe<ContentModelReferenceOrderByInput>;
  ManualInclusionOrdering: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  NumberOfProducts: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  PageSize: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SalesPageOutput = {
  __typename: 'SalesPageOutput';
  autocomplete: Maybe<SalesPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SalesPageFacet>;
  items: Maybe<Array<Maybe<SalesPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SalesPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SalesPageWhereInput = {
  AllowPaging: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  ManualExclusion: InputMaybe<ContentModelReferenceWhereInput>;
  ManualInclusion: InputMaybe<ContentModelReferenceWhereInput>;
  ManualInclusionOrdering: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NumberOfProducts: InputMaybe<IntFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  PageSize: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SalesPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SalesPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SalesPageWhereInput>>>;
};

/** Page to allow customer to search the site */
export type SearchResultPage = IContent & IData & {
  __typename: 'SearchResultPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  /** This will determine whether or not to show recommendations */
  ShowRecommendations: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to allow customer to search the site */
export type SearchResultPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPageTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to allow customer to search the site */
export type SearchResultPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SearchResultPageAutocomplete = {
  __typename: 'SearchResultPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SearchResultPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SearchResultPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SearchResultPageFacet = {
  __typename: 'SearchResultPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowRecommendations: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SearchResultPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SearchResultPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SearchResultPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SearchResultPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetShowRecommendationsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SearchResultPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SearchResultPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SearchResultPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SearchResultPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowRecommendations: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SearchResultPageOutput = {
  __typename: 'SearchResultPageOutput';
  autocomplete: Maybe<SearchResultPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SearchResultPageFacet>;
  items: Maybe<Array<Maybe<SearchResultPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SearchResultPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SearchResultPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowRecommendations: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SearchResultPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SearchResultPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SearchResultPageWhereInput>>>;
};

export type SearchableStringFilterInput = {
  /** `boost` influences the weight of a field by boosting a match with a number (default: 1) — counts more towards the eventual relevance score which can be projected with `_score` — at query time. Note that `boost` cannot be a negative number. */
  boost: InputMaybe<Scalars['Int']['input']>;
  /** `contains` performs full-text search on a word or phrase. */
  contains: InputMaybe<Scalars['String']['input']>;
  /** `eq` matches on an exact value, but the value is case-insensitive. */
  eq: InputMaybe<Scalars['String']['input']>;
  /** `exist` matches results that have this field. */
  exist: InputMaybe<Scalars['Boolean']['input']>;
  /** enables supporting fuzzy matching on the query terms (keywords), which returns items that contain terms in the content similar to the keywords, as measured by a _Levenshtein edit distance_. An edit distance is the number of one-character changes needed to turn one term into another. The edit distance is based on the length of the term.  */
  fuzzy: InputMaybe<Scalars['Boolean']['input']>;
  /** `in` matches with 1 or more exact values in a list. Example: `in: ["word1", "word2", "this is a phrase"]` */
  in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** `like` matches on substrings with wildcard support: `%` to match on 0 or more characters, `_` to match on any character.  */
  like: InputMaybe<Scalars['String']['input']>;
  /** `match` performs full-text search on a word or phrase where less relevant items are also returned. The `match` operator is only supported for `searchable` fields. It will improve fulltext search by making it easier to match on words. More exact matches will be ranked higher, less exact matches will be ranked lower. The `match` operator is supported with synonyms and fuzzy search. */
  match: InputMaybe<Scalars['String']['input']>;
  /** `not_eq` retrieves results not matching with an exact (but case-insensitive) value. */
  notEq: InputMaybe<Scalars['String']['input']>;
  /** `not_in` returns results that do not match with 1 or more exact values in a list. Example: `not_in: ["word1", "word2", "this is a phrase"]` */
  notIn: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** `starts_with` retrieves matches that start with a certain value (prefix). */
  startsWith: InputMaybe<Scalars['String']['input']>;
  /** expands query value with synonyms. Example: if `H2O` is a synonym of `water`, then querying for `water` will also return results with `H2O`. */
  synonyms: InputMaybe<Array<InputMaybe<SynonymSlot>>>;
};

export type SelectionElementBlock = IContent & IData & {
  __typename: 'SelectionElementBlock';
  AllowMultiSelect: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AutoComplete: Maybe<Scalars['Int']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Feed: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type SelectionElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlockFeedArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SelectionElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SelectionElementBlockAutocomplete = {
  __typename: 'SelectionElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SelectionElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SelectionElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SelectionElementBlockFacet = {
  __typename: 'SelectionElementBlockFacet';
  AllowMultiSelect: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AutoComplete: Maybe<Array<Maybe<NumberFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Feed: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type SelectionElementBlockFacetAllowMultiSelectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetAutoCompleteArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type SelectionElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SelectionElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type SelectionElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SelectionElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetFeedArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SelectionElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SelectionElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SelectionElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SelectionElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SelectionElementBlockOrderByInput = {
  AllowMultiSelect: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  AutoComplete: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Feed: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PlaceHolder: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SelectionElementBlockOutput = {
  __typename: 'SelectionElementBlockOutput';
  autocomplete: Maybe<SelectionElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SelectionElementBlockFacet>;
  items: Maybe<Array<Maybe<SelectionElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SelectionElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SelectionElementBlockWhereInput = {
  AllowMultiSelect: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  AutoComplete: InputMaybe<IntFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Feed: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SelectionElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SelectionElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SelectionElementBlockWhereInput>>>;
};

export type SeoInformation = IContent & IData & {
  __typename: 'SeoInformation';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type SeoInformationDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SeoInformationKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SeoInformationNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SeoInformationTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SeoInformation_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SeoInformation_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SeoInformationAutocomplete = {
  __typename: 'SeoInformationAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SeoInformationAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SeoInformationAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SeoInformationFacet = {
  __typename: 'SeoInformationFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SeoInformationFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SeoInformationFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SeoInformationFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SeoInformationFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SeoInformationFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SeoInformationOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SeoInformationOutput = {
  __typename: 'SeoInformationOutput';
  autocomplete: Maybe<SeoInformationAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SeoInformationFacet>;
  items: Maybe<Array<Maybe<SeoInformation>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SeoInformationOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SeoInformationWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SeoInformationWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SeoInformationWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SeoInformationWhereInput>>>;
};

/** Page to manage organization's shared cart. */
export type SharedCartPage = IContent & IData & {
  __typename: 'SharedCartPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage organization's shared cart. */
export type SharedCartPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SharedCartPageAutocomplete = {
  __typename: 'SharedCartPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SharedCartPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SharedCartPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SharedCartPageFacet = {
  __typename: 'SharedCartPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SharedCartPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SharedCartPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SharedCartPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SharedCartPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SharedCartPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SharedCartPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SharedCartPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SharedCartPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SharedCartPageOutput = {
  __typename: 'SharedCartPageOutput';
  autocomplete: Maybe<SharedCartPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SharedCartPageFacet>;
  items: Maybe<Array<Maybe<SharedCartPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SharedCartPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SharedCartPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SharedCartPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SharedCartPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SharedCartPageWhereInput>>>;
};

export type ShippingDimensions = IContent & IData & {
  __typename: 'ShippingDimensions';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Height: Maybe<Scalars['Float']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Length: Maybe<Scalars['Float']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Width: Maybe<Scalars['Float']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type ShippingDimensionsNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ShippingDimensions_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type ShippingDimensions_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ShippingDimensionsAutocomplete = {
  __typename: 'ShippingDimensionsAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ShippingDimensionsAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ShippingDimensionsAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ShippingDimensionsFacet = {
  __typename: 'ShippingDimensionsFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Length: Maybe<Array<Maybe<NumberFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type ShippingDimensionsFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ShippingDimensionsFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ShippingDimensionsFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ShippingDimensionsFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ShippingDimensionsFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ShippingDimensionsFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ShippingDimensionsFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ShippingDimensionsFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ShippingDimensionsFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type ShippingDimensionsOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Height: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Length: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ShippingDimensionsOutput = {
  __typename: 'ShippingDimensionsOutput';
  autocomplete: Maybe<ShippingDimensionsAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ShippingDimensionsFacet>;
  items: Maybe<Array<Maybe<ShippingDimensions>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ShippingDimensionsOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ShippingDimensionsWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Height: InputMaybe<FloatFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Length: InputMaybe<FloatFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Width: InputMaybe<FloatFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ShippingDimensionsWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ShippingDimensionsWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ShippingDimensionsWhereInput>>>;
};

export type SiteDefinition = IData & {
  __typename: 'SiteDefinition';
  ContentLink: Maybe<ContentModelReference>;
  ContentRoots: Maybe<ContentRootsModel>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  EditLocation: Maybe<Scalars['String']['output']>;
  Hosts: Maybe<Array<Maybe<HostDefinitionModel>>>;
  Id: Maybe<Scalars['String']['output']>;
  Languages: Maybe<Array<Maybe<SiteDefinitionLanguageModel>>>;
  Name: Maybe<Scalars['String']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type SiteDefinitionNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SiteDefinition_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SiteDefinition_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SiteDefinitionAutocomplete = {
  __typename: 'SiteDefinitionAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentRoots: Maybe<ContentRootsModelAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  EditLocation: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Hosts: Maybe<HostDefinitionModelAutocomplete>;
  Id: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Languages: Maybe<SiteDefinitionLanguageModelAutocomplete>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SiteDefinitionAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SiteDefinitionAutocompleteEditLocationArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SiteDefinitionAutocompleteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SiteDefinitionAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SiteDefinitionFacet = {
  __typename: 'SiteDefinitionFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentRoots: Maybe<ContentRootsModelFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  EditLocation: Maybe<Array<Maybe<StringFacet>>>;
  Hosts: Maybe<HostDefinitionModelFacet>;
  Id: Maybe<Array<Maybe<StringFacet>>>;
  Languages: Maybe<SiteDefinitionLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
};


export type SiteDefinitionFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionFacetEditLocationArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionFacetIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SiteDefinitionLanguageModel = {
  __typename: 'SiteDefinitionLanguageModel';
  DisplayName: Maybe<Scalars['String']['output']>;
  IsMasterLanguage: Maybe<Scalars['Bool']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  UrlSegment: Maybe<Scalars['String']['output']>;
};

export type SiteDefinitionLanguageModelAutocomplete = {
  __typename: 'SiteDefinitionLanguageModelAutocomplete';
  DisplayName: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Name: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  UrlSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SiteDefinitionLanguageModelAutocompleteDisplayNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SiteDefinitionLanguageModelAutocompleteNameArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SiteDefinitionLanguageModelAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SiteDefinitionLanguageModelAutocompleteUrlSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SiteDefinitionLanguageModelFacet = {
  __typename: 'SiteDefinitionLanguageModelFacet';
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  IsMasterLanguage: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  UrlSegment: Maybe<Array<Maybe<StringFacet>>>;
};


export type SiteDefinitionLanguageModelFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionLanguageModelFacetIsMasterLanguageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionLanguageModelFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionLanguageModelFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SiteDefinitionLanguageModelFacetUrlSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SiteDefinitionLanguageModelOrderByInput = {
  DisplayName: InputMaybe<OrderBy>;
  IsMasterLanguage: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  UrlSegment: InputMaybe<OrderBy>;
};

export type SiteDefinitionLanguageModelWhereInput = {
  DisplayName: InputMaybe<StringFilterInput>;
  IsMasterLanguage: InputMaybe<BoolFilterInput>;
  Name: InputMaybe<StringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  UrlSegment: InputMaybe<StringFilterInput>;
};

export type SiteDefinitionOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentRoots: InputMaybe<ContentRootsModelOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  EditLocation: InputMaybe<OrderBy>;
  Hosts: InputMaybe<HostDefinitionModelOrderByInput>;
  Id: InputMaybe<OrderBy>;
  Languages: InputMaybe<SiteDefinitionLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SiteDefinitionOutput = {
  __typename: 'SiteDefinitionOutput';
  autocomplete: Maybe<SiteDefinitionAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SiteDefinitionFacet>;
  items: Maybe<Array<Maybe<SiteDefinition>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SiteDefinitionOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SiteDefinitionWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentRoots: InputMaybe<ContentRootsModelWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  EditLocation: InputMaybe<StringFilterInput>;
  Hosts: InputMaybe<HostDefinitionModelWhereInput>;
  Id: InputMaybe<StringFilterInput>;
  Languages: InputMaybe<SiteDefinitionLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SiteDefinitionWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SiteDefinitionWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SiteDefinitionWhereInput>>>;
};

/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFile = IContent & IData & {
  __typename: 'StandardFile';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FileSize: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowDescription: Maybe<Scalars['Bool']['output']>;
  ShowIcon: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFileContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFileDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFileFileSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFileNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFileTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFile_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for standard file types such as Word, Excel, PowerPoint or text documents. */
export type StandardFile_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type StandardFileAutocomplete = {
  __typename: 'StandardFileAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type StandardFileAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardFileAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type StandardFileFacet = {
  __typename: 'StandardFileFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FileSize: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowDescription: Maybe<Array<Maybe<StringFacet>>>;
  ShowIcon: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type StandardFileFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardFileFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardFileFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetFileSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardFileFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetShowDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetShowIconArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardFileFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardFileFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardFileFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type StandardFileOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FileSize: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowDescription: InputMaybe<OrderBy>;
  ShowIcon: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type StandardFileOutput = {
  __typename: 'StandardFileOutput';
  autocomplete: Maybe<StandardFileAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<StandardFileFacet>;
  items: Maybe<Array<Maybe<StandardFile>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type StandardFileOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type StandardFileWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FileSize: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowDescription: InputMaybe<BoolFilterInput>;
  ShowIcon: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<StandardFileWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<StandardFileWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<StandardFileWhereInput>>>;
};

/** Allows for creation of rich standard pages */
export type StandardPage = IContent & IData & {
  __typename: 'StandardPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BackgroundImage: Maybe<ContentModelReference>;
  BackgroundOpacity: Maybe<Scalars['Float']['output']>;
  BackgroundVideo: Maybe<ContentModelReference>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TitleColor: Maybe<Scalars['String']['output']>;
  /** Sets how much padding should be at the top of the standard content */
  TopPaddingMode: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Allows for creation of rich standard pages */
export type StandardPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Allows for creation of rich standard pages */
export type StandardPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type StandardPageAutocomplete = {
  __typename: 'StandardPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundImage: Maybe<ContentModelReferenceAutocomplete>;
  BackgroundVideo: Maybe<ContentModelReferenceAutocomplete>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  TitleColor: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TopPaddingMode: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type StandardPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteBackgroundColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteTitleColorArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteTopPaddingModeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StandardPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type StandardPageFacet = {
  __typename: 'StandardPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundImage: Maybe<ContentModelReferenceFacet>;
  BackgroundOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  BackgroundVideo: Maybe<ContentModelReferenceFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TitleColor: Maybe<Array<Maybe<StringFacet>>>;
  TopPaddingMode: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type StandardPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetBackgroundOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type StandardPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StandardPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTitleColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetTopPaddingModeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StandardPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type StandardPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BackgroundImage: InputMaybe<ContentModelReferenceOrderByInput>;
  BackgroundOpacity: InputMaybe<OrderBy>;
  BackgroundVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TitleColor: InputMaybe<OrderBy>;
  TopPaddingMode: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type StandardPageOutput = {
  __typename: 'StandardPageOutput';
  autocomplete: Maybe<StandardPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<StandardPageFacet>;
  items: Maybe<Array<Maybe<StandardPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type StandardPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type StandardPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  BackgroundColor: InputMaybe<StringFilterInput>;
  BackgroundImage: InputMaybe<ContentModelReferenceWhereInput>;
  BackgroundOpacity: InputMaybe<FloatFilterInput>;
  BackgroundVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TitleColor: InputMaybe<StringFilterInput>;
  TopPaddingMode: InputMaybe<StringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<StandardPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<StandardPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<StandardPageWhereInput>>>;
};

/** Store locator page. */
export type StorePage = IContent & IData & {
  __typename: 'StorePage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Store locator page. */
export type StorePageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Store locator page. */
export type StorePage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type StorePageAutocomplete = {
  __typename: 'StorePageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type StorePageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StorePageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type StorePageFacet = {
  __typename: 'StorePageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type StorePageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StorePageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StorePageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StorePageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StorePageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StorePageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StorePageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type StorePageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type StorePageOutput = {
  __typename: 'StorePageOutput';
  autocomplete: Maybe<StorePageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<StorePageFacet>;
  items: Maybe<Array<Maybe<StorePage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type StorePageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type StorePageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<StorePageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<StorePageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<StorePageWhereInput>>>;
};

export type StringFacet = {
  __typename: 'StringFacet';
  count: Maybe<Scalars['Int']['output']>;
  name: Maybe<Scalars['String']['output']>;
};

/** Filter product search blocks by field values */
export type StringFilterBlock = IContent & IData & {
  __typename: 'StringFilterBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  /** Name of field in index */
  FieldName: Maybe<Scalars['String']['output']>;
  /** The value to filter search results on */
  FieldValue: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Filter product search blocks by field values */
export type StringFilterBlockFieldNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type StringFilterBlockFieldValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type StringFilterBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type StringFilterBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Filter product search blocks by field values */
export type StringFilterBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type StringFilterBlockAutocomplete = {
  __typename: 'StringFilterBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type StringFilterBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type StringFilterBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type StringFilterBlockFacet = {
  __typename: 'StringFilterBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FieldName: Maybe<Array<Maybe<StringFacet>>>;
  FieldValue: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type StringFilterBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StringFilterBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StringFilterBlockFacetFieldNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetFieldValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StringFilterBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StringFilterBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type StringFilterBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type StringFilterBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type StringFilterBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FieldName: InputMaybe<OrderBy>;
  FieldValue: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type StringFilterBlockOutput = {
  __typename: 'StringFilterBlockOutput';
  autocomplete: Maybe<StringFilterBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<StringFilterBlockFacet>;
  items: Maybe<Array<Maybe<StringFilterBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type StringFilterBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type StringFilterBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FieldName: InputMaybe<SearchableStringFilterInput>;
  FieldValue: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<StringFilterBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<StringFilterBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<StringFilterBlockWhereInput>>>;
};

export type StringFilterInput = {
  /** `boost` influences the weight of a field by boosting a match with a number (default: 1) — counts more towards the eventual relevance score which can be projected with `_score` — at query time. Note that `boost` cannot be a negative number. */
  boost: InputMaybe<Scalars['Int']['input']>;
  /** `ends_with` retrieves matches that end with a certain value (suffix). */
  endsWith: InputMaybe<Scalars['String']['input']>;
  /** `eq` matches on an exact value, but the value is case-insensitive. */
  eq: InputMaybe<Scalars['String']['input']>;
  /** `exist` matches results that have this field. */
  exist: InputMaybe<Scalars['Boolean']['input']>;
  /** enables supporting fuzzy matching on the query terms (keywords), which returns items that contain terms in the content similar to the keywords, as measured by a _Levenshtein edit distance_. An edit distance is the number of one-character changes needed to turn one term into another. The edit distance is based on the length of the term.  */
  fuzzy: InputMaybe<Scalars['Boolean']['input']>;
  /** `in` matches with 1 or more exact values in a list. Example: `in: ["word1", "word2", "this is a phrase"]` */
  in: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** `like` matches on substrings with wildcard support: `%` to match on 0 or more characters, `_` to match on any character.  */
  like: InputMaybe<Scalars['String']['input']>;
  /** `not_eq` retrieves results not matching with an exact (but case-insensitive) value. */
  notEq: InputMaybe<Scalars['String']['input']>;
  /** `not_in` returns results that do not match with 1 or more exact values in a list. Example: `not_in: ["word1", "word2", "this is a phrase"]` */
  notIn: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  /** `starts_with` retrieves matches that start with a certain value (prefix). */
  startsWith: InputMaybe<Scalars['String']['input']>;
  /** expands query value with synonyms. Example: if `H2O` is a synonym of `water`, then querying for `water` will also return results with `H2O`. */
  synonyms: InputMaybe<Array<InputMaybe<SynonymSlot>>>;
};

/** Manage a sub organization */
export type SubOrganizationPage = IContent & IData & {
  __typename: 'SubOrganizationPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Manage a sub organization */
export type SubOrganizationPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Manage a sub organization */
export type SubOrganizationPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SubOrganizationPageAutocomplete = {
  __typename: 'SubOrganizationPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SubOrganizationPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubOrganizationPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SubOrganizationPageFacet = {
  __typename: 'SubOrganizationPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SubOrganizationPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubOrganizationPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubOrganizationPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubOrganizationPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubOrganizationPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubOrganizationPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubOrganizationPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SubOrganizationPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SubOrganizationPageOutput = {
  __typename: 'SubOrganizationPageOutput';
  autocomplete: Maybe<SubOrganizationPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SubOrganizationPageFacet>;
  items: Maybe<Array<Maybe<SubOrganizationPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SubOrganizationPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubOrganizationPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SubOrganizationPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SubOrganizationPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SubOrganizationPageWhereInput>>>;
};

export type SubmitButtonElementBlock = IContent & IData & {
  __typename: 'SubmitButtonElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FinalizeForm: Maybe<Scalars['Bool']['output']>;
  Image: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RedirectToPage: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type SubmitButtonElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SubmitButtonElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SubmitButtonElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SubmitButtonElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SubmitButtonElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type SubmitButtonElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SubmitButtonElementBlockAutocomplete = {
  __typename: 'SubmitButtonElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Image: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RedirectToPage: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SubmitButtonElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteImageArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteRedirectToPageArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubmitButtonElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SubmitButtonElementBlockFacet = {
  __typename: 'SubmitButtonElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FinalizeForm: Maybe<Array<Maybe<StringFacet>>>;
  Image: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RedirectToPage: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SubmitButtonElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubmitButtonElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type SubmitButtonElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubmitButtonElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetFinalizeFormArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetImageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetRedirectToPageArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubmitButtonElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubmitButtonElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubmitButtonElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubmitButtonElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SubmitButtonElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FinalizeForm: InputMaybe<OrderBy>;
  Image: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RedirectToPage: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SubmitButtonElementBlockOutput = {
  __typename: 'SubmitButtonElementBlockOutput';
  autocomplete: Maybe<SubmitButtonElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SubmitButtonElementBlockFacet>;
  items: Maybe<Array<Maybe<SubmitButtonElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SubmitButtonElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubmitButtonElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FinalizeForm: InputMaybe<BoolFilterInput>;
  Image: InputMaybe<StringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RedirectToPage: InputMaybe<StringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SubmitButtonElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SubmitButtonElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SubmitButtonElementBlockWhereInput>>>;
};

/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlock = IContent & IData & {
  __typename: 'SubscriptionBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  ShowHeading: Maybe<Scalars['Bool']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Configures the properties of a subscription block frontend view */
export type SubscriptionBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SubscriptionBlockAutocomplete = {
  __typename: 'SubscriptionBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SubscriptionBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SubscriptionBlockFacet = {
  __typename: 'SubscriptionBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  ShowHeading: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SubscriptionBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type SubscriptionBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetShowHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SubscriptionBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  ShowHeading: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SubscriptionBlockOutput = {
  __typename: 'SubscriptionBlockOutput';
  autocomplete: Maybe<SubscriptionBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SubscriptionBlockFacet>;
  items: Maybe<Array<Maybe<SubscriptionBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SubscriptionBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubscriptionBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  ShowHeading: InputMaybe<BoolFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SubscriptionBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SubscriptionBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SubscriptionBlockWhereInput>>>;
};

/** Page for customer to see their subscription details. */
export type SubscriptionDetailPage = IContent & IData & {
  __typename: 'SubscriptionDetailPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customer to see their subscription details. */
export type SubscriptionDetailPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SubscriptionDetailPageAutocomplete = {
  __typename: 'SubscriptionDetailPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SubscriptionDetailPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionDetailPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SubscriptionDetailPageFacet = {
  __typename: 'SubscriptionDetailPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SubscriptionDetailPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionDetailPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionDetailPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionDetailPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionDetailPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionDetailPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionDetailPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SubscriptionDetailPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SubscriptionDetailPageOutput = {
  __typename: 'SubscriptionDetailPageOutput';
  autocomplete: Maybe<SubscriptionDetailPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SubscriptionDetailPageFacet>;
  items: Maybe<Array<Maybe<SubscriptionDetailPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SubscriptionDetailPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubscriptionDetailPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SubscriptionDetailPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SubscriptionDetailPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SubscriptionDetailPageWhereInput>>>;
};

/** Page for customers to view their subscription history */
export type SubscriptionHistoryPage = IContent & IData & {
  __typename: 'SubscriptionHistoryPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to view their subscription history */
export type SubscriptionHistoryPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type SubscriptionHistoryPageAutocomplete = {
  __typename: 'SubscriptionHistoryPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type SubscriptionHistoryPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type SubscriptionHistoryPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type SubscriptionHistoryPageFacet = {
  __typename: 'SubscriptionHistoryPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type SubscriptionHistoryPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionHistoryPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionHistoryPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionHistoryPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionHistoryPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type SubscriptionHistoryPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type SubscriptionHistoryPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type SubscriptionHistoryPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type SubscriptionHistoryPageOutput = {
  __typename: 'SubscriptionHistoryPageOutput';
  autocomplete: Maybe<SubscriptionHistoryPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<SubscriptionHistoryPageFacet>;
  items: Maybe<Array<Maybe<SubscriptionHistoryPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type SubscriptionHistoryPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type SubscriptionHistoryPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<SubscriptionHistoryPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<SubscriptionHistoryPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<SubscriptionHistoryPageWhereInput>>>;
};

export enum SynonymSlot {
  /** synonym slot 1 */
  One = 'ONE',
  /** synonym slot 2 */
  Two = 'TWO'
}

/** Used to define a Tag */
export type TagPage = IContent & IData & {
  __typename: 'TagPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  BottomArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Images: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  MainIntro: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used to define a Tag */
export type TagPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageBottomAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageImagesArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageMainIntroArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPageTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used to define a Tag */
export type TagPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TagPageAutocomplete = {
  __typename: 'TagPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TagPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TagPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TagPageFacet = {
  __typename: 'TagPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  BottomArea: Maybe<ContentAreaItemModelSearchFacet>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Images: Maybe<ContentAreaItemModelSearchFacet>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  MainIntro: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type TagPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TagPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TagPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetMainIntroArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TagPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TagPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TagPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TagPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TagPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  BottomArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Images: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  MainIntro: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TagPageOutput = {
  __typename: 'TagPageOutput';
  autocomplete: Maybe<TagPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TagPageFacet>;
  items: Maybe<Array<Maybe<TagPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TagPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TagPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  BottomArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Images: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  MainIntro: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TagPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TagPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TagPageWhereInput>>>;
};

/** Image block with overlay for text */
export type TeaserBlock = IContent & IData & {
  __typename: 'TeaserBlock';
  AlignButtonBottom: Maybe<Scalars['Bool']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  HeadingColor: Maybe<Scalars['String']['output']>;
  HeadingSize: Maybe<Scalars['Int']['output']>;
  HeadingStyle: Maybe<Scalars['String']['output']>;
  Height: Maybe<Scalars['String']['output']>;
  Image: Maybe<ContentModelReference>;
  ImageSize: Maybe<Scalars['Int']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Link: Maybe<ContentModelReference>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MaxImageHeight: Maybe<Scalars['Int']['output']>;
  MinCardHeight: Maybe<Scalars['Int']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SecondImage: Maybe<ContentModelReference>;
  SecondImageSize: Maybe<Scalars['Int']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  Text: Maybe<Scalars['String']['output']>;
  TextColor: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Image block with overlay for text */
export type TeaserBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockHeadingColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockHeadingStyleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockHeightArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlockTextColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Image block with overlay for text */
export type TeaserBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TeaserBlockAutocomplete = {
  __typename: 'TeaserBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Image: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Link: Maybe<ContentModelReferenceAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SecondImage: Maybe<ContentModelReferenceAutocomplete>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TeaserBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TeaserBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TeaserBlockFacet = {
  __typename: 'TeaserBlockFacet';
  AlignButtonBottom: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  HeadingColor: Maybe<Array<Maybe<StringFacet>>>;
  HeadingSize: Maybe<Array<Maybe<NumberFacet>>>;
  HeadingStyle: Maybe<Array<Maybe<StringFacet>>>;
  Height: Maybe<Array<Maybe<StringFacet>>>;
  Image: Maybe<ContentModelReferenceFacet>;
  ImageSize: Maybe<Array<Maybe<NumberFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Link: Maybe<ContentModelReferenceFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxImageHeight: Maybe<Array<Maybe<NumberFacet>>>;
  MinCardHeight: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SecondImage: Maybe<ContentModelReferenceFacet>;
  SecondImageSize: Maybe<Array<Maybe<NumberFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  Text: Maybe<Array<Maybe<StringFacet>>>;
  TextColor: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type TeaserBlockFacetAlignButtonBottomArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TeaserBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TeaserBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TeaserBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetHeadingColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetHeadingSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TeaserBlockFacetHeadingStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetHeightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetImageSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TeaserBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetMaxImageHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TeaserBlockFacetMinCardHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TeaserBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TeaserBlockFacetSecondImageSizeArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TeaserBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TeaserBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TeaserBlockFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetTextColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TeaserBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TeaserBlockOrderByInput = {
  AlignButtonBottom: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  HeadingColor: InputMaybe<OrderBy>;
  HeadingSize: InputMaybe<OrderBy>;
  HeadingStyle: InputMaybe<OrderBy>;
  Height: InputMaybe<OrderBy>;
  Image: InputMaybe<ContentModelReferenceOrderByInput>;
  ImageSize: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Link: InputMaybe<ContentModelReferenceOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxImageHeight: InputMaybe<OrderBy>;
  MinCardHeight: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SecondImage: InputMaybe<ContentModelReferenceOrderByInput>;
  SecondImageSize: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  Text: InputMaybe<OrderBy>;
  TextColor: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TeaserBlockOutput = {
  __typename: 'TeaserBlockOutput';
  autocomplete: Maybe<TeaserBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TeaserBlockFacet>;
  items: Maybe<Array<Maybe<TeaserBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TeaserBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TeaserBlockWhereInput = {
  AlignButtonBottom: InputMaybe<BoolFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  HeadingColor: InputMaybe<SearchableStringFilterInput>;
  HeadingSize: InputMaybe<IntFilterInput>;
  HeadingStyle: InputMaybe<SearchableStringFilterInput>;
  Height: InputMaybe<SearchableStringFilterInput>;
  Image: InputMaybe<ContentModelReferenceWhereInput>;
  ImageSize: InputMaybe<IntFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Link: InputMaybe<ContentModelReferenceWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxImageHeight: InputMaybe<IntFilterInput>;
  MinCardHeight: InputMaybe<IntFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SecondImage: InputMaybe<ContentModelReferenceWhereInput>;
  SecondImageSize: InputMaybe<IntFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  Text: InputMaybe<SearchableStringFilterInput>;
  TextColor: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TeaserBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TeaserBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TeaserBlockWhereInput>>>;
};

/** Simple Rich Text Block */
export type TextBlock = IContent & IData & {
  __typename: 'TextBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Simple Rich Text Block */
export type TextBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Simple Rich Text Block */
export type TextBlockMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Simple Rich Text Block */
export type TextBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Simple Rich Text Block */
export type TextBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Simple Rich Text Block */
export type TextBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Simple Rich Text Block */
export type TextBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Simple Rich Text Block */
export type TextBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TextBlockAutocomplete = {
  __typename: 'TextBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TextBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TextBlockFacet = {
  __typename: 'TextBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type TextBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TextBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TextBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TextBlockOutput = {
  __typename: 'TextBlockOutput';
  autocomplete: Maybe<TextBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TextBlockFacet>;
  items: Maybe<Array<Maybe<TextBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TextBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TextBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TextBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TextBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TextBlockWhereInput>>>;
};

export type TextareaElementBlock = IContent & IData & {
  __typename: 'TextareaElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AutoComplete: Maybe<Scalars['Int']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type TextareaElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextareaElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TextareaElementBlockAutocomplete = {
  __typename: 'TextareaElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TextareaElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextareaElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TextareaElementBlockFacet = {
  __typename: 'TextareaElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AutoComplete: Maybe<Array<Maybe<NumberFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type TextareaElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetAutoCompleteArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TextareaElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextareaElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TextareaElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextareaElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextareaElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextareaElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextareaElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextareaElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TextareaElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  AutoComplete: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PlaceHolder: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TextareaElementBlockOutput = {
  __typename: 'TextareaElementBlockOutput';
  autocomplete: Maybe<TextareaElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TextareaElementBlockFacet>;
  items: Maybe<Array<Maybe<TextareaElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TextareaElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TextareaElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  AutoComplete: InputMaybe<IntFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TextareaElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TextareaElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TextareaElementBlockWhereInput>>>;
};

export type TextboxElementBlock = IContent & IData & {
  __typename: 'TextboxElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  AutoComplete: Maybe<Scalars['Int']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type TextboxElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type TextboxElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TextboxElementBlockAutocomplete = {
  __typename: 'TextboxElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TextboxElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TextboxElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TextboxElementBlockFacet = {
  __typename: 'TextboxElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  AutoComplete: Maybe<Array<Maybe<NumberFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type TextboxElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetAutoCompleteArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TextboxElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextboxElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TextboxElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextboxElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextboxElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextboxElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TextboxElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TextboxElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TextboxElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  AutoComplete: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PlaceHolder: InputMaybe<OrderBy>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TextboxElementBlockOutput = {
  __typename: 'TextboxElementBlockOutput';
  autocomplete: Maybe<TextboxElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TextboxElementBlockFacet>;
  items: Maybe<Array<Maybe<TextboxElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TextboxElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TextboxElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  AutoComplete: InputMaybe<IntFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TextboxElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TextboxElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TextboxElementBlockWhereInput>>>;
};

/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPage = IContent & IData & {
  __typename: 'ThreeColumnLandingPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  CenterColumn: Maybe<Scalars['Int']['output']>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LeftColumn: Maybe<Scalars['Int']['output']>;
  LeftContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RightColumn: Maybe<Scalars['Int']['output']>;
  RightContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageLeftContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageRightContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPageTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Three column landing page with properties to determin column size */
export type ThreeColumnLandingPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type ThreeColumnLandingPageAutocomplete = {
  __typename: 'ThreeColumnLandingPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type ThreeColumnLandingPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type ThreeColumnLandingPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type ThreeColumnLandingPageFacet = {
  __typename: 'ThreeColumnLandingPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  CenterColumn: Maybe<Array<Maybe<NumberFacet>>>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LeftColumn: Maybe<Array<Maybe<NumberFacet>>>;
  LeftContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RightColumn: Maybe<Array<Maybe<NumberFacet>>>;
  RightContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type ThreeColumnLandingPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetCenterColumnArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ThreeColumnLandingPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ThreeColumnLandingPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ThreeColumnLandingPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetLeftColumnArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ThreeColumnLandingPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetRightColumnArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type ThreeColumnLandingPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ThreeColumnLandingPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ThreeColumnLandingPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type ThreeColumnLandingPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type ThreeColumnLandingPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type ThreeColumnLandingPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  CenterColumn: InputMaybe<OrderBy>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LeftColumn: InputMaybe<OrderBy>;
  LeftContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RightColumn: InputMaybe<OrderBy>;
  RightContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type ThreeColumnLandingPageOutput = {
  __typename: 'ThreeColumnLandingPageOutput';
  autocomplete: Maybe<ThreeColumnLandingPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<ThreeColumnLandingPageFacet>;
  items: Maybe<Array<Maybe<ThreeColumnLandingPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type ThreeColumnLandingPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type ThreeColumnLandingPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  CenterColumn: InputMaybe<IntFilterInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LeftColumn: InputMaybe<IntFilterInput>;
  LeftContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RightColumn: InputMaybe<IntFilterInput>;
  RightContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<ThreeColumnLandingPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<ThreeColumnLandingPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<ThreeColumnLandingPageWhereInput>>>;
};

/** Display content from a Twitter feed */
export type TwitterBlock = IContent & IData & {
  __typename: 'TwitterBlock';
  AccountName: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  NumberOfItems: Maybe<Scalars['Int']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Display content from a Twitter feed */
export type TwitterBlockAccountNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Twitter feed */
export type TwitterBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Twitter feed */
export type TwitterBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Twitter feed */
export type TwitterBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Twitter feed */
export type TwitterBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Twitter feed */
export type TwitterBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display content from a Twitter feed */
export type TwitterBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TwitterBlockAutocomplete = {
  __typename: 'TwitterBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TwitterBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwitterBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TwitterBlockFacet = {
  __typename: 'TwitterBlockFacet';
  AccountName: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfItems: Maybe<Array<Maybe<NumberFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type TwitterBlockFacetAccountNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TwitterBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwitterBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwitterBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetNumberOfItemsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TwitterBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwitterBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwitterBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwitterBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwitterBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TwitterBlockOrderByInput = {
  AccountName: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  NumberOfItems: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TwitterBlockOutput = {
  __typename: 'TwitterBlockOutput';
  autocomplete: Maybe<TwitterBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TwitterBlockFacet>;
  items: Maybe<Array<Maybe<TwitterBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TwitterBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TwitterBlockWhereInput = {
  AccountName: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NumberOfItems: InputMaybe<IntFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TwitterBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TwitterBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TwitterBlockWhereInput>>>;
};

/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPage = IContent & IData & {
  __typename: 'TwoColumnLandingPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LeftColumn: Maybe<Scalars['Int']['output']>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RightColumn: Maybe<Scalars['Int']['output']>;
  RightContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  TopContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageRightContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPageTopContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Two column landing page with properties to determine column size */
export type TwoColumnLandingPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type TwoColumnLandingPageAutocomplete = {
  __typename: 'TwoColumnLandingPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type TwoColumnLandingPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type TwoColumnLandingPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type TwoColumnLandingPageFacet = {
  __typename: 'TwoColumnLandingPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LeftColumn: Maybe<Array<Maybe<NumberFacet>>>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RightColumn: Maybe<Array<Maybe<NumberFacet>>>;
  RightContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  TopContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type TwoColumnLandingPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwoColumnLandingPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwoColumnLandingPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetLeftColumnArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TwoColumnLandingPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetRightColumnArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type TwoColumnLandingPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwoColumnLandingPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwoColumnLandingPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type TwoColumnLandingPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type TwoColumnLandingPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type TwoColumnLandingPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LeftColumn: InputMaybe<OrderBy>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RightColumn: InputMaybe<OrderBy>;
  RightContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type TwoColumnLandingPageOutput = {
  __typename: 'TwoColumnLandingPageOutput';
  autocomplete: Maybe<TwoColumnLandingPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<TwoColumnLandingPageFacet>;
  items: Maybe<Array<Maybe<TwoColumnLandingPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type TwoColumnLandingPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type TwoColumnLandingPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LeftColumn: InputMaybe<IntFilterInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RightColumn: InputMaybe<IntFilterInput>;
  RightContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  TopContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<TwoColumnLandingPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<TwoColumnLandingPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<TwoColumnLandingPageWhereInput>>>;
};

export type UrlElementBlock = IContent & IData & {
  __typename: 'UrlElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ConditionCombination: Maybe<Scalars['Int']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Description: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Label: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PlaceHolder: Maybe<Scalars['String']['output']>;
  PredefinedValue: Maybe<Scalars['String']['output']>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  SatisfiedAction: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Validators: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type UrlElementBlockDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlockLabelArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlockPlaceHolderArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlockPredefinedValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlockSatisfiedActionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlockValidatorsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type UrlElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type UrlElementBlockAutocomplete = {
  __typename: 'UrlElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type UrlElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UrlElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type UrlElementBlockFacet = {
  __typename: 'UrlElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ConditionCombination: Maybe<Array<Maybe<NumberFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Label: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PlaceHolder: Maybe<Array<Maybe<StringFacet>>>;
  PredefinedValue: Maybe<Array<Maybe<StringFacet>>>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  SatisfiedAction: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Validators: Maybe<Array<Maybe<StringFacet>>>;
};


export type UrlElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UrlElementBlockFacetConditionCombinationArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type UrlElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UrlElementBlockFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetLabelArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetPlaceHolderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetPredefinedValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetSatisfiedActionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UrlElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UrlElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UrlElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UrlElementBlockFacetValidatorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type UrlElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ConditionCombination: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Label: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PlaceHolder: InputMaybe<OrderBy>;
  PredefinedValue: InputMaybe<OrderBy>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  SatisfiedAction: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Validators: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type UrlElementBlockOutput = {
  __typename: 'UrlElementBlockOutput';
  autocomplete: Maybe<UrlElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<UrlElementBlockFacet>;
  items: Maybe<Array<Maybe<UrlElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type UrlElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type UrlElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ConditionCombination: InputMaybe<IntFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Label: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PlaceHolder: InputMaybe<SearchableStringFilterInput>;
  PredefinedValue: InputMaybe<SearchableStringFilterInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  SatisfiedAction: InputMaybe<SearchableStringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Validators: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<UrlElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<UrlElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<UrlElementBlockWhereInput>>>;
};

/** Page to manage an organization's users. */
export type UsersPage = IContent & IData & {
  __typename: 'UsersPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page to manage an organization's users. */
export type UsersPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page to manage an organization's users. */
export type UsersPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type UsersPageAutocomplete = {
  __typename: 'UsersPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type UsersPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type UsersPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type UsersPageFacet = {
  __typename: 'UsersPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type UsersPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UsersPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UsersPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UsersPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UsersPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type UsersPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type UsersPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type UsersPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type UsersPageOutput = {
  __typename: 'UsersPageOutput';
  autocomplete: Maybe<UsersPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<UsersPageFacet>;
  items: Maybe<Array<Maybe<UsersPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type UsersPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type UsersPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<UsersPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<UsersPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<UsersPageWhereInput>>>;
};

export type VariationContent = IContent & IData & {
  __typename: 'VariationContent';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<VariationContentAssociations>;
  CatalogId: Maybe<Scalars['Int']['output']>;
  Categories: Maybe<VariationContentCategories>;
  Changed: Maybe<Scalars['Date']['output']>;
  Code: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  DisplayName: Maybe<Scalars['String']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  InventoryReference: Maybe<ContentModelReference>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MaxQuantity: Maybe<Scalars['Float']['output']>;
  MetaClassId: Maybe<Scalars['Int']['output']>;
  MinQuantity: Maybe<Scalars['Float']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentEntries: Maybe<VariationContentRelations>;
  ParentLink: Maybe<ContentModelReference>;
  PriceReference: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  SeoInformation: Maybe<VariationContentSeoInformation>;
  SeoUri: Maybe<Scalars['String']['output']>;
  ShippingDimensions: Maybe<VariationContentShippingDimensions>;
  ShippingPackageId: Maybe<Scalars['Int']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TaxCategoryId: Maybe<Scalars['Int']['output']>;
  TrackInventory: Maybe<Scalars['Bool']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Weight: Maybe<Scalars['Float']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type VariationContentCodeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VariationContentDisplayNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VariationContentNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VariationContent_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VariationContent_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type VariationContentAssociations = {
  __typename: 'VariationContentAssociations';
  ContentLink: Maybe<ContentModelReference>;
};

export type VariationContentAssociationsAutocomplete = {
  __typename: 'VariationContentAssociationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type VariationContentAssociationsFacet = {
  __typename: 'VariationContentAssociationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type VariationContentAssociationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type VariationContentAssociationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type VariationContentAutocomplete = {
  __typename: 'VariationContentAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Associations: Maybe<VariationContentAssociationsAutocomplete>;
  Categories: Maybe<VariationContentCategoriesAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  InventoryReference: Maybe<ContentModelReferenceAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentEntries: Maybe<VariationContentRelationsAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  PriceReference: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SeoInformation: Maybe<VariationContentSeoInformationAutocomplete>;
  SeoUri: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type VariationContentAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteSeoUriArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VariationContentCategories = {
  __typename: 'VariationContentCategories';
  ContentLink: Maybe<ContentModelReference>;
};

export type VariationContentCategoriesAutocomplete = {
  __typename: 'VariationContentCategoriesAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type VariationContentCategoriesFacet = {
  __typename: 'VariationContentCategoriesFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type VariationContentCategoriesOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type VariationContentCategoriesWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type VariationContentFacet = {
  __typename: 'VariationContentFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Associations: Maybe<VariationContentAssociationsFacet>;
  CatalogId: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<VariationContentCategoriesFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Code: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisplayName: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  InventoryReference: Maybe<ContentModelReferenceFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MaxQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  MetaClassId: Maybe<Array<Maybe<NumberFacet>>>;
  MinQuantity: Maybe<Array<Maybe<NumberFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentEntries: Maybe<VariationContentRelationsFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PriceReference: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  SeoInformation: Maybe<VariationContentSeoInformationFacet>;
  SeoUri: Maybe<Array<Maybe<StringFacet>>>;
  ShippingDimensions: Maybe<VariationContentShippingDimensionsFacet>;
  ShippingPackageId: Maybe<Array<Maybe<NumberFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TaxCategoryId: Maybe<Array<Maybe<NumberFacet>>>;
  TrackInventory: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Weight: Maybe<Array<Maybe<NumberFacet>>>;
};


export type VariationContentFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetCatalogIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VariationContentFacetCodeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VariationContentFacetDisplayNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetMaxQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentFacetMetaClassIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentFacetMinQuantityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VariationContentFacetSeoUriArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetShippingPackageIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VariationContentFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VariationContentFacetTaxCategoryIdArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentFacetTrackInventoryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentFacetWeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type VariationContentOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Associations: InputMaybe<VariationContentAssociationsOrderByInput>;
  CatalogId: InputMaybe<OrderBy>;
  Categories: InputMaybe<VariationContentCategoriesOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Code: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisplayName: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  InventoryReference: InputMaybe<ContentModelReferenceOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MaxQuantity: InputMaybe<OrderBy>;
  MetaClassId: InputMaybe<OrderBy>;
  MinQuantity: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentEntries: InputMaybe<VariationContentRelationsOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PriceReference: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  SeoInformation: InputMaybe<VariationContentSeoInformationOrderByInput>;
  SeoUri: InputMaybe<OrderBy>;
  ShippingDimensions: InputMaybe<VariationContentShippingDimensionsOrderByInput>;
  ShippingPackageId: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TaxCategoryId: InputMaybe<OrderBy>;
  TrackInventory: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Weight: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type VariationContentOutput = {
  __typename: 'VariationContentOutput';
  autocomplete: Maybe<VariationContentAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<VariationContentFacet>;
  items: Maybe<Array<Maybe<VariationContent>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type VariationContentOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type VariationContentRelations = {
  __typename: 'VariationContentRelations';
  ContentLink: Maybe<ContentModelReference>;
};

export type VariationContentRelationsAutocomplete = {
  __typename: 'VariationContentRelationsAutocomplete';
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
};

export type VariationContentRelationsFacet = {
  __typename: 'VariationContentRelationsFacet';
  ContentLink: Maybe<ContentModelReferenceFacet>;
};

export type VariationContentRelationsOrderByInput = {
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
};

export type VariationContentRelationsWhereInput = {
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
};

export type VariationContentSeoInformation = {
  __typename: 'VariationContentSeoInformation';
  Description: Maybe<Scalars['String']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Title: Maybe<Scalars['String']['output']>;
};

export type VariationContentSeoInformationAutocomplete = {
  __typename: 'VariationContentSeoInformationAutocomplete';
  Description: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Keywords: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Title: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type VariationContentSeoInformationAutocompleteDescriptionArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentSeoInformationAutocompleteKeywordsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VariationContentSeoInformationAutocompleteTitleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VariationContentSeoInformationFacet = {
  __typename: 'VariationContentSeoInformationFacet';
  Description: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
};


export type VariationContentSeoInformationFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentSeoInformationFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VariationContentSeoInformationFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type VariationContentSeoInformationOrderByInput = {
  Description: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Title: InputMaybe<OrderBy>;
};

export type VariationContentSeoInformationWhereInput = {
  Description: InputMaybe<StringFilterInput>;
  Keywords: InputMaybe<StringFilterInput>;
  Title: InputMaybe<StringFilterInput>;
};

export type VariationContentShippingDimensions = {
  __typename: 'VariationContentShippingDimensions';
  Height: Maybe<Scalars['Float']['output']>;
  Length: Maybe<Scalars['Float']['output']>;
  Width: Maybe<Scalars['Float']['output']>;
};

export type VariationContentShippingDimensionsFacet = {
  __typename: 'VariationContentShippingDimensionsFacet';
  Height: Maybe<Array<Maybe<NumberFacet>>>;
  Length: Maybe<Array<Maybe<NumberFacet>>>;
  Width: Maybe<Array<Maybe<NumberFacet>>>;
};


export type VariationContentShippingDimensionsFacetHeightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentShippingDimensionsFacetLengthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VariationContentShippingDimensionsFacetWidthArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};

export type VariationContentShippingDimensionsOrderByInput = {
  Height: InputMaybe<OrderBy>;
  Length: InputMaybe<OrderBy>;
  Width: InputMaybe<OrderBy>;
};

export type VariationContentShippingDimensionsWhereInput = {
  Height: InputMaybe<FloatFilterInput>;
  Length: InputMaybe<FloatFilterInput>;
  Width: InputMaybe<FloatFilterInput>;
};

export type VariationContentWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Associations: InputMaybe<VariationContentAssociationsWhereInput>;
  CatalogId: InputMaybe<IntFilterInput>;
  Categories: InputMaybe<VariationContentCategoriesWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Code: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisplayName: InputMaybe<SearchableStringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  InventoryReference: InputMaybe<ContentModelReferenceWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MaxQuantity: InputMaybe<FloatFilterInput>;
  MetaClassId: InputMaybe<IntFilterInput>;
  MinQuantity: InputMaybe<FloatFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentEntries: InputMaybe<VariationContentRelationsWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PriceReference: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  SeoInformation: InputMaybe<VariationContentSeoInformationWhereInput>;
  SeoUri: InputMaybe<StringFilterInput>;
  ShippingDimensions: InputMaybe<VariationContentShippingDimensionsWhereInput>;
  ShippingPackageId: InputMaybe<IntFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TaxCategoryId: InputMaybe<IntFilterInput>;
  TrackInventory: InputMaybe<BoolFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Weight: InputMaybe<FloatFilterInput>;
  _and: InputMaybe<Array<InputMaybe<VariationContentWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<VariationContentWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<VariationContentWhereInput>>>;
};

/** Used for svg image file type */
export type VectorImageMediaData = IContent & IData & {
  __typename: 'VectorImageMediaData';
  AccentColor: Maybe<Scalars['String']['output']>;
  AltText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Caption: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ClipArtType: Maybe<Scalars['String']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Copyright: Maybe<Scalars['String']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  CreditsLink: Maybe<Scalars['String']['output']>;
  CreditsText: Maybe<Scalars['String']['output']>;
  /** Description of the image */
  Description: Maybe<Scalars['String']['output']>;
  DominantColorBackground: Maybe<Scalars['String']['output']>;
  DominantColorForeground: Maybe<Scalars['String']['output']>;
  DominantColors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FileSize: Maybe<Scalars['String']['output']>;
  ImageAlignment: Maybe<Scalars['String']['output']>;
  ImageCategories: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  IsAdultContent: Maybe<Scalars['Bool']['output']>;
  IsBwImg: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  IsRacyContent: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LargeThumbnail: Maybe<BlobModel>;
  LineDrawingType: Maybe<Scalars['String']['output']>;
  /** Link to content */
  Link: Maybe<ContentModelReference>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  PaddingBottom: Maybe<Scalars['Int']['output']>;
  PaddingLeft: Maybe<Scalars['Int']['output']>;
  PaddingRight: Maybe<Scalars['Int']['output']>;
  PaddingTop: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Tags: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModel>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for svg image file type */
export type VectorImageMediaDataAccentColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataAltTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataCaptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataClipArtTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataCopyrightArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataCreditsTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataDominantColorBackgroundArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataDominantColorForegroundArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataFileSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataImageAlignmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataLineDrawingTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaDataTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for svg image file type */
export type VectorImageMediaData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type VectorImageMediaDataAutocomplete = {
  __typename: 'VectorImageMediaDataAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CreditsLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DominantColors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  ImageCategories: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  LargeThumbnail: Maybe<BlobModelAutocomplete>;
  Link: Maybe<ContentModelReferenceAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Tags: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type VectorImageMediaDataAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteCreditsLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteDominantColorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteImageCategoriesArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteTagsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VectorImageMediaDataAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VectorImageMediaDataFacet = {
  __typename: 'VectorImageMediaDataFacet';
  AccentColor: Maybe<Array<Maybe<StringFacet>>>;
  AltText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Caption: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ClipArtType: Maybe<Array<Maybe<StringFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Copyright: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  CreditsLink: Maybe<Array<Maybe<StringFacet>>>;
  CreditsText: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DominantColorBackground: Maybe<Array<Maybe<StringFacet>>>;
  DominantColorForeground: Maybe<Array<Maybe<StringFacet>>>;
  DominantColors: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FileSize: Maybe<Array<Maybe<StringFacet>>>;
  ImageAlignment: Maybe<Array<Maybe<StringFacet>>>;
  ImageCategories: Maybe<Array<Maybe<StringFacet>>>;
  IsAdultContent: Maybe<Array<Maybe<StringFacet>>>;
  IsBwImg: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  IsRacyContent: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LargeThumbnail: Maybe<BlobModelFacet>;
  LineDrawingType: Maybe<Array<Maybe<StringFacet>>>;
  Link: Maybe<ContentModelReferenceFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PaddingBottom: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingLeft: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingRight: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingTop: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Tags: Maybe<Array<Maybe<StringFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type VectorImageMediaDataFacetAccentColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetAltTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetCaptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VectorImageMediaDataFacetClipArtTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetCopyrightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VectorImageMediaDataFacetCreditsLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetCreditsTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetDominantColorBackgroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetDominantColorForegroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetDominantColorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetFileSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetImageAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetImageCategoriesArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetIsAdultContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetIsBwImgArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetIsRacyContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetLineDrawingTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetPaddingBottomArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VectorImageMediaDataFacetPaddingLeftArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VectorImageMediaDataFacetPaddingRightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VectorImageMediaDataFacetPaddingTopArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VectorImageMediaDataFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VectorImageMediaDataFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VectorImageMediaDataFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VectorImageMediaDataFacetTagsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VectorImageMediaDataFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type VectorImageMediaDataOrderByInput = {
  AccentColor: InputMaybe<OrderBy>;
  AltText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Caption: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ClipArtType: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Copyright: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  CreditsLink: InputMaybe<OrderBy>;
  CreditsText: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DominantColorBackground: InputMaybe<OrderBy>;
  DominantColorForeground: InputMaybe<OrderBy>;
  DominantColors: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FileSize: InputMaybe<OrderBy>;
  ImageAlignment: InputMaybe<OrderBy>;
  ImageCategories: InputMaybe<OrderBy>;
  IsAdultContent: InputMaybe<OrderBy>;
  IsBwImg: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  IsRacyContent: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LargeThumbnail: InputMaybe<BlobModelOrderByInput>;
  LineDrawingType: InputMaybe<OrderBy>;
  Link: InputMaybe<ContentModelReferenceOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  PaddingBottom: InputMaybe<OrderBy>;
  PaddingLeft: InputMaybe<OrderBy>;
  PaddingRight: InputMaybe<OrderBy>;
  PaddingTop: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Tags: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type VectorImageMediaDataOutput = {
  __typename: 'VectorImageMediaDataOutput';
  autocomplete: Maybe<VectorImageMediaDataAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<VectorImageMediaDataFacet>;
  items: Maybe<Array<Maybe<VectorImageMediaData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type VectorImageMediaDataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type VectorImageMediaDataWhereInput = {
  AccentColor: InputMaybe<SearchableStringFilterInput>;
  AltText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Caption: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ClipArtType: InputMaybe<SearchableStringFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Copyright: InputMaybe<SearchableStringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  CreditsLink: InputMaybe<StringFilterInput>;
  CreditsText: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DominantColorBackground: InputMaybe<SearchableStringFilterInput>;
  DominantColorForeground: InputMaybe<SearchableStringFilterInput>;
  DominantColors: InputMaybe<StringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FileSize: InputMaybe<SearchableStringFilterInput>;
  ImageAlignment: InputMaybe<SearchableStringFilterInput>;
  ImageCategories: InputMaybe<StringFilterInput>;
  IsAdultContent: InputMaybe<BoolFilterInput>;
  IsBwImg: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  IsRacyContent: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LargeThumbnail: InputMaybe<BlobModelWhereInput>;
  LineDrawingType: InputMaybe<SearchableStringFilterInput>;
  Link: InputMaybe<ContentModelReferenceWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PaddingBottom: InputMaybe<IntFilterInput>;
  PaddingLeft: InputMaybe<IntFilterInput>;
  PaddingRight: InputMaybe<IntFilterInput>;
  PaddingTop: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Tags: InputMaybe<StringFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<VectorImageMediaDataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<VectorImageMediaDataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<VectorImageMediaDataWhereInput>>>;
};

/** Video Block */
export type VideoBlock = IContent & IData & {
  __typename: 'VideoBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Video: Maybe<ContentModelReference>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Video Block */
export type VideoBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Video Block */
export type VideoBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Video Block */
export type VideoBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Video Block */
export type VideoBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Video Block */
export type VideoBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Video Block */
export type VideoBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type VideoBlockAutocomplete = {
  __typename: 'VideoBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Video: Maybe<ContentModelReferenceAutocomplete>;
};


export type VideoBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VideoBlockFacet = {
  __typename: 'VideoBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Video: Maybe<ContentModelReferenceFacet>;
};


export type VideoBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VideoBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type VideoBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Video: InputMaybe<ContentModelReferenceOrderByInput>;
  _ranking: InputMaybe<Ranking>;
};

export type VideoBlockOutput = {
  __typename: 'VideoBlockOutput';
  autocomplete: Maybe<VideoBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<VideoBlockFacet>;
  items: Maybe<Array<Maybe<VideoBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type VideoBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type VideoBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Video: InputMaybe<ContentModelReferenceWhereInput>;
  _and: InputMaybe<Array<InputMaybe<VideoBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<VideoBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<VideoBlockWhereInput>>>;
};

/** Used for video file types such as mp4, flv, webm */
export type VideoFile = IContent & IData & {
  __typename: 'VideoFile';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Autoplay: Maybe<Scalars['Bool']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Copyright: Maybe<Scalars['String']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  DisplayControls: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  PreviewImage: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Thumbnail: Maybe<BlobModel>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for video file types such as mp4, flv, webm */
export type VideoFileContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for video file types such as mp4, flv, webm */
export type VideoFileCopyrightArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for video file types such as mp4, flv, webm */
export type VideoFileNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for video file types such as mp4, flv, webm */
export type VideoFile_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for video file types such as mp4, flv, webm */
export type VideoFile_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type VideoFileAutocomplete = {
  __typename: 'VideoFileAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  PreviewImage: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type VideoFileAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VideoFileAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VideoFileFacet = {
  __typename: 'VideoFileFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Autoplay: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Copyright: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  DisplayControls: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  PreviewImage: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type VideoFileFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetAutoplayArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoFileFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetCopyrightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoFileFacetDisplayControlsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoFileFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoFileFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VideoFileFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VideoFileFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type VideoFileOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Autoplay: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Copyright: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  DisplayControls: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  PreviewImage: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type VideoFileOutput = {
  __typename: 'VideoFileOutput';
  autocomplete: Maybe<VideoFileAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<VideoFileFacet>;
  items: Maybe<Array<Maybe<VideoFile>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type VideoFileOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type VideoFileWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Autoplay: InputMaybe<BoolFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Copyright: InputMaybe<SearchableStringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  DisplayControls: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  PreviewImage: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<VideoFileWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<VideoFileWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<VideoFileWhereInput>>>;
};

/** Display Vimeo video */
export type VimeoBlock = IContent & IData & {
  __typename: 'VimeoBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CoverImage: Maybe<ContentModelReference>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  /** Descriptive text for the video */
  MainBody: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  /** URL link to Vimeo video */
  VimeoVideoLink: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Display Vimeo video */
export type VimeoBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlockMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display Vimeo video */
export type VimeoBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type VimeoBlockAutocomplete = {
  __typename: 'VimeoBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CoverImage: Maybe<ContentModelReferenceAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  VimeoVideoLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type VimeoBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VimeoBlockAutocompleteVimeoVideoLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VimeoBlockFacet = {
  __typename: 'VimeoBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  CoverImage: Maybe<ContentModelReferenceFacet>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VimeoVideoLink: Maybe<Array<Maybe<StringFacet>>>;
};


export type VimeoBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type VimeoBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VimeoBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VimeoBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VimeoBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VimeoBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VimeoBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VimeoBlockFacetVimeoVideoLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type VimeoBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  CoverImage: InputMaybe<ContentModelReferenceOrderByInput>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VimeoVideoLink: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type VimeoBlockOutput = {
  __typename: 'VimeoBlockOutput';
  autocomplete: Maybe<VimeoBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<VimeoBlockFacet>;
  items: Maybe<Array<Maybe<VimeoBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type VimeoBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type VimeoBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  CoverImage: InputMaybe<ContentModelReferenceWhereInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VimeoVideoLink: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<VimeoBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<VimeoBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<VimeoBlockWhereInput>>>;
};

export type VisitorDataHiddenElementBlock = IContent & IData & {
  __typename: 'VisitorDataHiddenElementBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  VisitorDataSources: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


export type VisitorDataHiddenElementBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VisitorDataHiddenElementBlockVisitorDataSourcesArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VisitorDataHiddenElementBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


export type VisitorDataHiddenElementBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type VisitorDataHiddenElementBlockAutocomplete = {
  __typename: 'VisitorDataHiddenElementBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type VisitorDataHiddenElementBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type VisitorDataHiddenElementBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type VisitorDataHiddenElementBlockFacet = {
  __typename: 'VisitorDataHiddenElementBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  VisitorDataSources: Maybe<Array<Maybe<StringFacet>>>;
};


export type VisitorDataHiddenElementBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VisitorDataHiddenElementBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VisitorDataHiddenElementBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VisitorDataHiddenElementBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VisitorDataHiddenElementBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type VisitorDataHiddenElementBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type VisitorDataHiddenElementBlockFacetVisitorDataSourcesArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type VisitorDataHiddenElementBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  VisitorDataSources: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type VisitorDataHiddenElementBlockOutput = {
  __typename: 'VisitorDataHiddenElementBlockOutput';
  autocomplete: Maybe<VisitorDataHiddenElementBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<VisitorDataHiddenElementBlockFacet>;
  items: Maybe<Array<Maybe<VisitorDataHiddenElementBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type VisitorDataHiddenElementBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type VisitorDataHiddenElementBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  VisitorDataSources: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<VisitorDataHiddenElementBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<VisitorDataHiddenElementBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<VisitorDataHiddenElementBlockWhereInput>>>;
};

/** Used for webp image file type */
export type WebImageMediaData = IContent & IData & {
  __typename: 'WebImageMediaData';
  AccentColor: Maybe<Scalars['String']['output']>;
  AltText: Maybe<Scalars['String']['output']>;
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Caption: Maybe<Scalars['String']['output']>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ClipArtType: Maybe<Scalars['String']['output']>;
  Content: Maybe<Scalars['String']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Copyright: Maybe<Scalars['String']['output']>;
  Created: Maybe<Scalars['Date']['output']>;
  CreditsLink: Maybe<Scalars['String']['output']>;
  CreditsText: Maybe<Scalars['String']['output']>;
  /** Description of the image */
  Description: Maybe<Scalars['String']['output']>;
  DominantColorBackground: Maybe<Scalars['String']['output']>;
  DominantColorForeground: Maybe<Scalars['String']['output']>;
  DominantColors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  FileSize: Maybe<Scalars['String']['output']>;
  ImageAlignment: Maybe<Scalars['String']['output']>;
  ImageCategories: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  IsAdultContent: Maybe<Scalars['Bool']['output']>;
  IsBwImg: Maybe<Scalars['Bool']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  IsRacyContent: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  LargeThumbnail: Maybe<BlobModel>;
  LineDrawingType: Maybe<Scalars['String']['output']>;
  /** Link to content */
  Link: Maybe<ContentModelReference>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MimeType: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  PaddingBottom: Maybe<Scalars['Int']['output']>;
  PaddingLeft: Maybe<Scalars['Int']['output']>;
  PaddingRight: Maybe<Scalars['Int']['output']>;
  PaddingTop: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Tags: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModel>;
  Title: Maybe<Scalars['String']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Used for webp image file type */
export type WebImageMediaDataAccentColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataAltTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataCaptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataClipArtTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataContentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataCopyrightArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataCreditsTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataDominantColorBackgroundArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataDominantColorForegroundArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataFileSizeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataImageAlignmentArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataLineDrawingTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaDataTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaData_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Used for webp image file type */
export type WebImageMediaData_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type WebImageMediaDataAutocomplete = {
  __typename: 'WebImageMediaDataAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CreditsLink: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  DominantColors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  ImageCategories: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  LargeThumbnail: Maybe<BlobModelAutocomplete>;
  Link: Maybe<ContentModelReferenceAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  MimeType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Tags: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Thumbnail: Maybe<BlobModelAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type WebImageMediaDataAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteCreditsLinkArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteDominantColorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteImageCategoriesArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteMimeTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteTagsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WebImageMediaDataAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type WebImageMediaDataFacet = {
  __typename: 'WebImageMediaDataFacet';
  AccentColor: Maybe<Array<Maybe<StringFacet>>>;
  AltText: Maybe<Array<Maybe<StringFacet>>>;
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Caption: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ClipArtType: Maybe<Array<Maybe<StringFacet>>>;
  Content: Maybe<Array<Maybe<StringFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Copyright: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  CreditsLink: Maybe<Array<Maybe<StringFacet>>>;
  CreditsText: Maybe<Array<Maybe<StringFacet>>>;
  Description: Maybe<Array<Maybe<StringFacet>>>;
  DominantColorBackground: Maybe<Array<Maybe<StringFacet>>>;
  DominantColorForeground: Maybe<Array<Maybe<StringFacet>>>;
  DominantColors: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  FileSize: Maybe<Array<Maybe<StringFacet>>>;
  ImageAlignment: Maybe<Array<Maybe<StringFacet>>>;
  ImageCategories: Maybe<Array<Maybe<StringFacet>>>;
  IsAdultContent: Maybe<Array<Maybe<StringFacet>>>;
  IsBwImg: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  IsRacyContent: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  LargeThumbnail: Maybe<BlobModelFacet>;
  LineDrawingType: Maybe<Array<Maybe<StringFacet>>>;
  Link: Maybe<ContentModelReferenceFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MimeType: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  PaddingBottom: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingLeft: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingRight: Maybe<Array<Maybe<NumberFacet>>>;
  PaddingTop: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Tags: Maybe<Array<Maybe<StringFacet>>>;
  Thumbnail: Maybe<BlobModelFacet>;
  Title: Maybe<Array<Maybe<StringFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type WebImageMediaDataFacetAccentColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetAltTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetCaptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WebImageMediaDataFacetClipArtTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetCopyrightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WebImageMediaDataFacetCreditsLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetCreditsTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetDominantColorBackgroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetDominantColorForegroundArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetDominantColorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetFileSizeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetImageAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetImageCategoriesArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetIsAdultContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetIsBwImgArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetIsRacyContentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetLineDrawingTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetMimeTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetPaddingBottomArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type WebImageMediaDataFacetPaddingLeftArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type WebImageMediaDataFacetPaddingRightArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type WebImageMediaDataFacetPaddingTopArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type WebImageMediaDataFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WebImageMediaDataFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WebImageMediaDataFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WebImageMediaDataFacetTagsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WebImageMediaDataFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type WebImageMediaDataOrderByInput = {
  AccentColor: InputMaybe<OrderBy>;
  AltText: InputMaybe<OrderBy>;
  Ancestors: InputMaybe<OrderBy>;
  Caption: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ClipArtType: InputMaybe<OrderBy>;
  Content: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Copyright: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  CreditsLink: InputMaybe<OrderBy>;
  CreditsText: InputMaybe<OrderBy>;
  Description: InputMaybe<OrderBy>;
  DominantColorBackground: InputMaybe<OrderBy>;
  DominantColorForeground: InputMaybe<OrderBy>;
  DominantColors: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  FileSize: InputMaybe<OrderBy>;
  ImageAlignment: InputMaybe<OrderBy>;
  ImageCategories: InputMaybe<OrderBy>;
  IsAdultContent: InputMaybe<OrderBy>;
  IsBwImg: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  IsRacyContent: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  LargeThumbnail: InputMaybe<BlobModelOrderByInput>;
  LineDrawingType: InputMaybe<OrderBy>;
  Link: InputMaybe<ContentModelReferenceOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MimeType: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  PaddingBottom: InputMaybe<OrderBy>;
  PaddingLeft: InputMaybe<OrderBy>;
  PaddingRight: InputMaybe<OrderBy>;
  PaddingTop: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Tags: InputMaybe<OrderBy>;
  Thumbnail: InputMaybe<BlobModelOrderByInput>;
  Title: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type WebImageMediaDataOutput = {
  __typename: 'WebImageMediaDataOutput';
  autocomplete: Maybe<WebImageMediaDataAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<WebImageMediaDataFacet>;
  items: Maybe<Array<Maybe<WebImageMediaData>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type WebImageMediaDataOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type WebImageMediaDataWhereInput = {
  AccentColor: InputMaybe<SearchableStringFilterInput>;
  AltText: InputMaybe<SearchableStringFilterInput>;
  Ancestors: InputMaybe<StringFilterInput>;
  Caption: InputMaybe<SearchableStringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ClipArtType: InputMaybe<SearchableStringFilterInput>;
  Content: InputMaybe<SearchableStringFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Copyright: InputMaybe<SearchableStringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  CreditsLink: InputMaybe<StringFilterInput>;
  CreditsText: InputMaybe<SearchableStringFilterInput>;
  Description: InputMaybe<SearchableStringFilterInput>;
  DominantColorBackground: InputMaybe<SearchableStringFilterInput>;
  DominantColorForeground: InputMaybe<SearchableStringFilterInput>;
  DominantColors: InputMaybe<StringFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  FileSize: InputMaybe<SearchableStringFilterInput>;
  ImageAlignment: InputMaybe<SearchableStringFilterInput>;
  ImageCategories: InputMaybe<StringFilterInput>;
  IsAdultContent: InputMaybe<BoolFilterInput>;
  IsBwImg: InputMaybe<BoolFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  IsRacyContent: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  LargeThumbnail: InputMaybe<BlobModelWhereInput>;
  LineDrawingType: InputMaybe<SearchableStringFilterInput>;
  Link: InputMaybe<ContentModelReferenceWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MimeType: InputMaybe<StringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  PaddingBottom: InputMaybe<IntFilterInput>;
  PaddingLeft: InputMaybe<IntFilterInput>;
  PaddingRight: InputMaybe<IntFilterInput>;
  PaddingTop: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Tags: InputMaybe<StringFilterInput>;
  Thumbnail: InputMaybe<BlobModelWhereInput>;
  Title: InputMaybe<SearchableStringFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<WebImageMediaDataWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<WebImageMediaDataWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<WebImageMediaDataWhereInput>>>;
};

/** Block that adds recommendations based on selected widget type */
export type WidgetBlock = IContent & IData & {
  __typename: 'WidgetBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  NumberOfRecommendations: Maybe<Scalars['Int']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  Value: Maybe<Scalars['String']['output']>;
  WidgetType: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Block that adds recommendations based on selected widget type */
export type WidgetBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block that adds recommendations based on selected widget type */
export type WidgetBlockValueArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block that adds recommendations based on selected widget type */
export type WidgetBlockWidgetTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block that adds recommendations based on selected widget type */
export type WidgetBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Block that adds recommendations based on selected widget type */
export type WidgetBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type WidgetBlockAutocomplete = {
  __typename: 'WidgetBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type WidgetBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WidgetBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type WidgetBlockFacet = {
  __typename: 'WidgetBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  NumberOfRecommendations: Maybe<Array<Maybe<NumberFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  Value: Maybe<Array<Maybe<StringFacet>>>;
  WidgetType: Maybe<Array<Maybe<StringFacet>>>;
};


export type WidgetBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WidgetBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WidgetBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetNumberOfRecommendationsArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type WidgetBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WidgetBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WidgetBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WidgetBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetValueArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WidgetBlockFacetWidgetTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type WidgetBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  NumberOfRecommendations: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  Value: InputMaybe<OrderBy>;
  WidgetType: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type WidgetBlockOutput = {
  __typename: 'WidgetBlockOutput';
  autocomplete: Maybe<WidgetBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<WidgetBlockFacet>;
  items: Maybe<Array<Maybe<WidgetBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type WidgetBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type WidgetBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  NumberOfRecommendations: InputMaybe<IntFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  Value: InputMaybe<SearchableStringFilterInput>;
  WidgetType: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<WidgetBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<WidgetBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<WidgetBlockWhereInput>>>;
};

/** Page for customers to manage their wish list. */
export type WishListPage = IContent & IData & {
  __typename: 'WishListPage';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ApplyHoverEffect: Maybe<Scalars['Bool']['output']>;
  AuthorMetaData: Maybe<Scalars['String']['output']>;
  /** Categories associated with this content. */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  Css: Maybe<Scalars['String']['output']>;
  CssFiles: Maybe<Array<Maybe<LinkItemNode>>>;
  DisableIndexing: Maybe<Scalars['Bool']['output']>;
  DisplayAsCard: Maybe<Scalars['Bool']['output']>;
  /** This will determine whether or not to show on search */
  ExcludeFromSearch: Maybe<Scalars['Bool']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  HideSiteFooter: Maybe<Scalars['Bool']['output']>;
  HideSiteHeader: Maybe<Scalars['Bool']['output']>;
  Highlight: Maybe<Scalars['Bool']['output']>;
  Industry: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Keywords: Maybe<Scalars['String']['output']>;
  Language: Maybe<ContentLanguageModel>;
  MainBody: Maybe<Scalars['String']['output']>;
  MainContentArea: Maybe<Array<Maybe<ContentAreaItemModelSearch>>>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  MetaContentType: Maybe<Scalars['String']['output']>;
  MetaTitle: Maybe<Scalars['String']['output']>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  PageDescription: Maybe<Scalars['String']['output']>;
  PageImage: Maybe<ContentModelReference>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  TeaserButtonStyle: Maybe<Scalars['String']['output']>;
  TeaserButtonText: Maybe<Scalars['String']['output']>;
  TeaserColorTheme: Maybe<Scalars['String']['output']>;
  TeaserRatio: Maybe<Scalars['String']['output']>;
  TeaserText: Maybe<Scalars['String']['output']>;
  TeaserTextAlignment: Maybe<Scalars['String']['output']>;
  TeaserVideo: Maybe<ContentModelReference>;
  Url: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Page for customers to manage their wish list. */
export type WishListPageAuthorMetaDataArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageIndustryArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageKeywordsArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageMainContentAreaArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageMetaContentTypeArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageMetaTitleArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPagePageDescriptionArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageTeaserButtonTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPageTeaserTextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPage_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Page for customers to manage their wish list. */
export type WishListPage_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type WishListPageAutocomplete = {
  __typename: 'WishListPageAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Css: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  CssFiles: Maybe<LinkItemNodeAutocomplete>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  Margin: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  Padding: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  PageImage: Maybe<ContentModelReferenceAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserColorTheme: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserRatio: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  TeaserVideo: Maybe<ContentModelReferenceAutocomplete>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type WishListPageAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteCssArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteMarginArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompletePaddingArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteTeaserButtonStyleArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteTeaserColorThemeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteTeaserRatioArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteTeaserTextAlignmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type WishListPageAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type WishListPageFacet = {
  __typename: 'WishListPageFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  ApplyHoverEffect: Maybe<Array<Maybe<StringFacet>>>;
  AuthorMetaData: Maybe<Array<Maybe<StringFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  Css: Maybe<Array<Maybe<StringFacet>>>;
  CssFiles: Maybe<LinkItemNodeFacet>;
  DisableIndexing: Maybe<Array<Maybe<StringFacet>>>;
  DisplayAsCard: Maybe<Array<Maybe<StringFacet>>>;
  ExcludeFromSearch: Maybe<Array<Maybe<StringFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  HideSiteFooter: Maybe<Array<Maybe<StringFacet>>>;
  HideSiteHeader: Maybe<Array<Maybe<StringFacet>>>;
  Highlight: Maybe<Array<Maybe<StringFacet>>>;
  Industry: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Keywords: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  MainContentArea: Maybe<ContentAreaItemModelSearchFacet>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  MetaContentType: Maybe<Array<Maybe<StringFacet>>>;
  MetaTitle: Maybe<Array<Maybe<StringFacet>>>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  PageDescription: Maybe<Array<Maybe<StringFacet>>>;
  PageImage: Maybe<ContentModelReferenceFacet>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  TeaserButtonStyle: Maybe<Array<Maybe<StringFacet>>>;
  TeaserButtonText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserColorTheme: Maybe<Array<Maybe<StringFacet>>>;
  TeaserRatio: Maybe<Array<Maybe<StringFacet>>>;
  TeaserText: Maybe<Array<Maybe<StringFacet>>>;
  TeaserTextAlignment: Maybe<Array<Maybe<StringFacet>>>;
  TeaserVideo: Maybe<ContentModelReferenceFacet>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
};


export type WishListPageFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetApplyHoverEffectArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetAuthorMetaDataArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WishListPageFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WishListPageFacetCssArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetDisableIndexingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetDisplayAsCardArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetExcludeFromSearchArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetHideSiteFooterArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetHideSiteHeaderArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetHighlightArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetIndustryArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetKeywordsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetMetaContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetMetaTitleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetPageDescriptionArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WishListPageFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WishListPageFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type WishListPageFacetTeaserButtonStyleArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetTeaserButtonTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetTeaserColorThemeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetTeaserRatioArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetTeaserTextArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetTeaserTextAlignmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type WishListPageFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type WishListPageOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  ApplyHoverEffect: InputMaybe<OrderBy>;
  AuthorMetaData: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  Css: InputMaybe<OrderBy>;
  CssFiles: InputMaybe<LinkItemNodeOrderByInput>;
  DisableIndexing: InputMaybe<OrderBy>;
  DisplayAsCard: InputMaybe<OrderBy>;
  ExcludeFromSearch: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  HideSiteFooter: InputMaybe<OrderBy>;
  HideSiteHeader: InputMaybe<OrderBy>;
  Highlight: InputMaybe<OrderBy>;
  Industry: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Keywords: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchOrderByInput>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  MetaContentType: InputMaybe<OrderBy>;
  MetaTitle: InputMaybe<OrderBy>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  PageDescription: InputMaybe<OrderBy>;
  PageImage: InputMaybe<ContentModelReferenceOrderByInput>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  TeaserButtonStyle: InputMaybe<OrderBy>;
  TeaserButtonText: InputMaybe<OrderBy>;
  TeaserColorTheme: InputMaybe<OrderBy>;
  TeaserRatio: InputMaybe<OrderBy>;
  TeaserText: InputMaybe<OrderBy>;
  TeaserTextAlignment: InputMaybe<OrderBy>;
  TeaserVideo: InputMaybe<ContentModelReferenceOrderByInput>;
  Url: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type WishListPageOutput = {
  __typename: 'WishListPageOutput';
  autocomplete: Maybe<WishListPageAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<WishListPageFacet>;
  items: Maybe<Array<Maybe<WishListPage>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type WishListPageOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type WishListPageWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  ApplyHoverEffect: InputMaybe<BoolFilterInput>;
  AuthorMetaData: InputMaybe<SearchableStringFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  Css: InputMaybe<StringFilterInput>;
  CssFiles: InputMaybe<LinkItemNodeWhereInput>;
  DisableIndexing: InputMaybe<BoolFilterInput>;
  DisplayAsCard: InputMaybe<BoolFilterInput>;
  ExcludeFromSearch: InputMaybe<BoolFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  HideSiteFooter: InputMaybe<BoolFilterInput>;
  HideSiteHeader: InputMaybe<BoolFilterInput>;
  Highlight: InputMaybe<BoolFilterInput>;
  Industry: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Keywords: InputMaybe<SearchableStringFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  MainContentArea: InputMaybe<ContentAreaItemModelSearchWhereInput>;
  Margin: InputMaybe<StringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  MetaContentType: InputMaybe<SearchableStringFilterInput>;
  MetaTitle: InputMaybe<SearchableStringFilterInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<StringFilterInput>;
  PageDescription: InputMaybe<SearchableStringFilterInput>;
  PageImage: InputMaybe<ContentModelReferenceWhereInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  TeaserButtonStyle: InputMaybe<StringFilterInput>;
  TeaserButtonText: InputMaybe<SearchableStringFilterInput>;
  TeaserColorTheme: InputMaybe<StringFilterInput>;
  TeaserRatio: InputMaybe<StringFilterInput>;
  TeaserText: InputMaybe<SearchableStringFilterInput>;
  TeaserTextAlignment: InputMaybe<StringFilterInput>;
  TeaserVideo: InputMaybe<ContentModelReferenceWhereInput>;
  Url: InputMaybe<StringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<WishListPageWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<WishListPageWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<WishListPageWhereInput>>>;
};

/** Display YouTube video */
export type YouTubeBlock = IContent & IData & {
  __typename: 'YouTubeBlock';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  BackgroundColor: Maybe<Scalars['String']['output']>;
  BlockOpacity: Maybe<Scalars['Float']['output']>;
  /** Categories associated with this content */
  Categories: Maybe<Array<Maybe<ContentModelReference>>>;
  Category: Maybe<Array<Maybe<CategoryModel>>>;
  Changed: Maybe<Scalars['Date']['output']>;
  ContentLink: Maybe<ContentModelReference>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Created: Maybe<Scalars['Date']['output']>;
  ExistingLanguages: Maybe<Array<Maybe<ContentLanguageModel>>>;
  Heading: Maybe<Scalars['String']['output']>;
  IsCommonDraft: Maybe<Scalars['Bool']['output']>;
  Language: Maybe<ContentLanguageModel>;
  /** Descriptive text for the video */
  MainBody: Maybe<Scalars['String']['output']>;
  Margin: Maybe<Scalars['String']['output']>;
  MasterLanguage: Maybe<ContentLanguageModel>;
  Name: Maybe<Scalars['String']['output']>;
  Padding: Maybe<Scalars['String']['output']>;
  ParentLink: Maybe<ContentModelReference>;
  RelativePath: Maybe<Scalars['String']['output']>;
  RouteSegment: Maybe<Scalars['String']['output']>;
  Saved: Maybe<Scalars['Date']['output']>;
  Shortcut: Maybe<Scalars['String']['output']>;
  SiteId: Maybe<Scalars['String']['output']>;
  StartPublish: Maybe<Scalars['Date']['output']>;
  Status: Maybe<Scalars['String']['output']>;
  StopPublish: Maybe<Scalars['Date']['output']>;
  Url: Maybe<Scalars['String']['output']>;
  /** URL link to YouTube video */
  YouTubeLink: Maybe<Scalars['String']['output']>;
  _children: Maybe<QueryRef>;
  _deleted: Maybe<Scalars['Bool']['output']>;
  _fulltext: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  _id: Maybe<Scalars['String']['output']>;
  _link: Maybe<QueryRef>;
  _modified: Maybe<Scalars['Date']['output']>;
  _score: Maybe<Scalars['Float']['output']>;
};


/** Display YouTube video */
export type YouTubeBlockBackgroundColorArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlockHeadingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlockMainBodyArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlockMarginArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlockNameArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlockPaddingArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlockYouTubeLinkArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlock_FulltextArgs = {
  highlight: InputMaybe<HighlightOptions>;
};


/** Display YouTube video */
export type YouTubeBlock_LinkArgs = {
  type: InputMaybe<LinkTypes>;
};

export type YouTubeBlockAutocomplete = {
  __typename: 'YouTubeBlockAutocomplete';
  Ancestors: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Categories: Maybe<ContentModelReferenceAutocomplete>;
  Category: Maybe<CategoryModelAutocomplete>;
  ContentLink: Maybe<ContentModelReferenceAutocomplete>;
  ContentType: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  ExistingLanguages: Maybe<ContentLanguageModelAutocomplete>;
  Language: Maybe<ContentLanguageModelAutocomplete>;
  MasterLanguage: Maybe<ContentLanguageModelAutocomplete>;
  ParentLink: Maybe<ContentModelReferenceAutocomplete>;
  RelativePath: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  RouteSegment: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Shortcut: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  SiteId: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Status: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  Url: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};


export type YouTubeBlockAutocompleteAncestorsArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteContentTypeArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteRelativePathArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteRouteSegmentArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteShortcutArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteSiteIdArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteStatusArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};


export type YouTubeBlockAutocompleteUrlArgs = {
  limit?: Scalars['Int']['input'];
  value: Scalars['String']['input'];
};

export type YouTubeBlockFacet = {
  __typename: 'YouTubeBlockFacet';
  Ancestors: Maybe<Array<Maybe<StringFacet>>>;
  BackgroundColor: Maybe<Array<Maybe<StringFacet>>>;
  BlockOpacity: Maybe<Array<Maybe<NumberFacet>>>;
  Categories: Maybe<ContentModelReferenceFacet>;
  Category: Maybe<CategoryModelFacet>;
  Changed: Maybe<Array<Maybe<DateFacet>>>;
  ContentLink: Maybe<ContentModelReferenceFacet>;
  ContentType: Maybe<Array<Maybe<StringFacet>>>;
  Created: Maybe<Array<Maybe<DateFacet>>>;
  ExistingLanguages: Maybe<ContentLanguageModelFacet>;
  Heading: Maybe<Array<Maybe<StringFacet>>>;
  IsCommonDraft: Maybe<Array<Maybe<StringFacet>>>;
  Language: Maybe<ContentLanguageModelFacet>;
  MainBody: Maybe<Array<Maybe<StringFacet>>>;
  Margin: Maybe<Array<Maybe<StringFacet>>>;
  MasterLanguage: Maybe<ContentLanguageModelFacet>;
  Name: Maybe<Array<Maybe<StringFacet>>>;
  Padding: Maybe<Array<Maybe<StringFacet>>>;
  ParentLink: Maybe<ContentModelReferenceFacet>;
  RelativePath: Maybe<Array<Maybe<StringFacet>>>;
  RouteSegment: Maybe<Array<Maybe<StringFacet>>>;
  Saved: Maybe<Array<Maybe<DateFacet>>>;
  Shortcut: Maybe<Array<Maybe<StringFacet>>>;
  SiteId: Maybe<Array<Maybe<StringFacet>>>;
  StartPublish: Maybe<Array<Maybe<DateFacet>>>;
  Status: Maybe<Array<Maybe<StringFacet>>>;
  StopPublish: Maybe<Array<Maybe<DateFacet>>>;
  Url: Maybe<Array<Maybe<StringFacet>>>;
  YouTubeLink: Maybe<Array<Maybe<StringFacet>>>;
};


export type YouTubeBlockFacetAncestorsArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetBackgroundColorArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetBlockOpacityArgs = {
  ranges: InputMaybe<Array<InputMaybe<RangeFacetsInput>>>;
};


export type YouTubeBlockFacetChangedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type YouTubeBlockFacetContentTypeArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetCreatedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type YouTubeBlockFacetHeadingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetIsCommonDraftArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetMainBodyArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetMarginArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetNameArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetPaddingArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetRelativePathArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetRouteSegmentArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetSavedArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type YouTubeBlockFacetShortcutArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetSiteIdArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetStartPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type YouTubeBlockFacetStatusArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetStopPublishArgs = {
  unit?: InputMaybe<DateFacetUnit>;
  value?: InputMaybe<Scalars['Int']['input']>;
};


export type YouTubeBlockFacetUrlArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};


export type YouTubeBlockFacetYouTubeLinkArgs = {
  filters: InputMaybe<Array<Scalars['String']['input']>>;
  limit?: Scalars['Int']['input'];
  orderBy?: InputMaybe<OrderBy>;
  orderType?: InputMaybe<OrderByFacetType>;
};

export type YouTubeBlockOrderByInput = {
  Ancestors: InputMaybe<OrderBy>;
  BackgroundColor: InputMaybe<OrderBy>;
  BlockOpacity: InputMaybe<OrderBy>;
  Categories: InputMaybe<ContentModelReferenceOrderByInput>;
  Category: InputMaybe<CategoryModelOrderByInput>;
  Changed: InputMaybe<OrderBy>;
  ContentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  ContentType: InputMaybe<OrderBy>;
  Created: InputMaybe<OrderBy>;
  ExistingLanguages: InputMaybe<ContentLanguageModelOrderByInput>;
  Heading: InputMaybe<OrderBy>;
  IsCommonDraft: InputMaybe<OrderBy>;
  Language: InputMaybe<ContentLanguageModelOrderByInput>;
  MainBody: InputMaybe<OrderBy>;
  Margin: InputMaybe<OrderBy>;
  MasterLanguage: InputMaybe<ContentLanguageModelOrderByInput>;
  Name: InputMaybe<OrderBy>;
  Padding: InputMaybe<OrderBy>;
  ParentLink: InputMaybe<ContentModelReferenceOrderByInput>;
  RelativePath: InputMaybe<OrderBy>;
  RouteSegment: InputMaybe<OrderBy>;
  Saved: InputMaybe<OrderBy>;
  Shortcut: InputMaybe<OrderBy>;
  SiteId: InputMaybe<OrderBy>;
  StartPublish: InputMaybe<OrderBy>;
  Status: InputMaybe<OrderBy>;
  StopPublish: InputMaybe<OrderBy>;
  Url: InputMaybe<OrderBy>;
  YouTubeLink: InputMaybe<OrderBy>;
  _ranking: InputMaybe<Ranking>;
};

export type YouTubeBlockOutput = {
  __typename: 'YouTubeBlockOutput';
  autocomplete: Maybe<YouTubeBlockAutocomplete>;
  cursor: Maybe<Scalars['String']['output']>;
  facets: Maybe<YouTubeBlockFacet>;
  items: Maybe<Array<Maybe<YouTubeBlock>>>;
  total: Maybe<Scalars['Int']['output']>;
};


export type YouTubeBlockOutputTotalArgs = {
  all: InputMaybe<Scalars['Boolean']['input']>;
};

export type YouTubeBlockWhereInput = {
  Ancestors: InputMaybe<StringFilterInput>;
  BackgroundColor: InputMaybe<SearchableStringFilterInput>;
  BlockOpacity: InputMaybe<FloatFilterInput>;
  Categories: InputMaybe<ContentModelReferenceWhereInput>;
  Category: InputMaybe<CategoryModelWhereInput>;
  Changed: InputMaybe<DateFilterInput>;
  ContentLink: InputMaybe<ContentModelReferenceWhereInput>;
  ContentType: InputMaybe<StringFilterInput>;
  Created: InputMaybe<DateFilterInput>;
  ExistingLanguages: InputMaybe<ContentLanguageModelWhereInput>;
  Heading: InputMaybe<SearchableStringFilterInput>;
  IsCommonDraft: InputMaybe<BoolFilterInput>;
  Language: InputMaybe<ContentLanguageModelWhereInput>;
  MainBody: InputMaybe<SearchableStringFilterInput>;
  Margin: InputMaybe<SearchableStringFilterInput>;
  MasterLanguage: InputMaybe<ContentLanguageModelWhereInput>;
  Name: InputMaybe<SearchableStringFilterInput>;
  Padding: InputMaybe<SearchableStringFilterInput>;
  ParentLink: InputMaybe<ContentModelReferenceWhereInput>;
  RelativePath: InputMaybe<StringFilterInput>;
  RouteSegment: InputMaybe<StringFilterInput>;
  Saved: InputMaybe<DateFilterInput>;
  Shortcut: InputMaybe<StringFilterInput>;
  SiteId: InputMaybe<StringFilterInput>;
  StartPublish: InputMaybe<DateFilterInput>;
  Status: InputMaybe<StringFilterInput>;
  StopPublish: InputMaybe<DateFilterInput>;
  Url: InputMaybe<StringFilterInput>;
  YouTubeLink: InputMaybe<SearchableStringFilterInput>;
  _and: InputMaybe<Array<InputMaybe<YouTubeBlockWhereInput>>>;
  _fulltext: InputMaybe<SearchableStringFilterInput>;
  _modified: InputMaybe<DateFilterInput>;
  _not: InputMaybe<Array<InputMaybe<YouTubeBlockWhereInput>>>;
  _or: InputMaybe<Array<InputMaybe<YouTubeBlockWhereInput>>>;
};

export enum System_Locales {
  All = 'ALL',
  Neutral = 'NEUTRAL'
}
